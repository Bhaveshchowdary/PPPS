{
  "version": 3,
  "sources": ["../../@spruceid/siwe-parser/dist/siwe-grammar.js", "../../apg-js/src/apg-lib/identifiers.js", "../../apg-js/src/apg-lib/style.js", "../../../../../node_modules/base64-js/index.js", "../../../../../node_modules/ieee754/index.js", "../../../../../node_modules/buffer/index.js", "../../apg-js/src/apg-conv-api/transformers.js", "../../apg-js/src/apg-conv-api/converter.js", "../../apg-js/src/apg-lib/emitcss.js", "../../apg-js/src/apg-lib/utilities.js", "../../apg-js/src/apg-lib/ast.js", "../../apg-js/src/apg-lib/circular-buffer.js", "../../apg-js/src/apg-lib/parser.js", "../../apg-js/src/apg-lib/stats.js", "../../apg-js/src/apg-lib/trace.js", "../../apg-js/src/apg-lib/node-exports.js", "../../@noble/hashes/src/_u64.ts", "../../@noble/hashes/src/crypto.ts", "../../@noble/hashes/src/utils.ts", "../../@noble/hashes/src/sha3.ts", "../../@spruceid/siwe-parser/dist/utils.js", "../../@spruceid/siwe-parser/dist/callbacks.js", "../../@spruceid/siwe-parser/dist/abnf.js", "../../@spruceid/siwe-parser/dist/parsers.js", "../../siwe/dist/ethersCompat.js", "../../siwe/dist/types.js", "../../@stablelib/random/source/browser.ts", "../../@stablelib/wipe/wipe.ts", "browser-external:crypto", "../../@stablelib/random/source/node.ts", "../../@stablelib/random/source/system.ts", "../../@stablelib/int/int.ts", "../../@stablelib/binary/binary.ts", "../../@stablelib/random/random.ts", "../../siwe/dist/utils.js", "../../siwe/dist/client.js", "../../siwe/dist/siwe.js"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.grammar = void 0;\n// copyright: Copyright (c) 2024 Lowell D. Thomas, all rights reserved<br>\n//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n//\n// Generated by apg-js, Version 4.4.0 [apg-js](https://github.com/ldthomas/apg-js)\nfunction grammar() {\n    // ```\n    // SUMMARY\n    //      rules = 81\n    //       udts = 0\n    //    opcodes = 461\n    //        ---   ABNF original opcodes\n    //        ALT = 26\n    //        CAT = 63\n    //        REP = 63\n    //        RNM = 159\n    //        TLS = 41\n    //        TBS = 64\n    //        TRG = 41\n    //        ---   SABNF superset opcodes\n    //        UDT = 0\n    //        AND = 0\n    //        NOT = 4\n    //        BKA = 0\n    //        BKN = 0\n    //        BKR = 0\n    //        ABG = 0\n    //        AEN = 0\n    // characters = [10 - 126]\n    // ```\n    /* OBJECT IDENTIFIER (for internal parser use) */\n    this.grammarObject = 'grammarObject';\n    /* RULES */\n    this.rules = [];\n    this.rules[0] = { name: 'sign-in-with-ethereum', lower: 'sign-in-with-ethereum', index: 0, isBkr: false };\n    this.rules[1] = { name: 'ex-title', lower: 'ex-title', index: 1, isBkr: false };\n    this.rules[2] = { name: 'nb-title', lower: 'nb-title', index: 2, isBkr: false };\n    this.rules[3] = { name: 'ri-title', lower: 'ri-title', index: 3, isBkr: false };\n    this.rules[4] = { name: 're-title', lower: 're-title', index: 4, isBkr: false };\n    this.rules[5] = { name: 'oscheme', lower: 'oscheme', index: 5, isBkr: false };\n    this.rules[6] = { name: 'domain', lower: 'domain', index: 6, isBkr: false };\n    this.rules[7] = { name: 'address', lower: 'address', index: 7, isBkr: false };\n    this.rules[8] = { name: 'statement', lower: 'statement', index: 8, isBkr: false };\n    this.rules[9] = { name: 'empty-statement', lower: 'empty-statement', index: 9, isBkr: false };\n    this.rules[10] = { name: 'version', lower: 'version', index: 10, isBkr: false };\n    this.rules[11] = { name: 'nonce', lower: 'nonce', index: 11, isBkr: false };\n    this.rules[12] = { name: 'issued-at', lower: 'issued-at', index: 12, isBkr: false };\n    this.rules[13] = { name: 'expiration-time', lower: 'expiration-time', index: 13, isBkr: false };\n    this.rules[14] = { name: 'not-before', lower: 'not-before', index: 14, isBkr: false };\n    this.rules[15] = { name: 'request-id', lower: 'request-id', index: 15, isBkr: false };\n    this.rules[16] = { name: 'chain-id', lower: 'chain-id', index: 16, isBkr: false };\n    this.rules[17] = { name: 'resources', lower: 'resources', index: 17, isBkr: false };\n    this.rules[18] = { name: 'resource', lower: 'resource', index: 18, isBkr: false };\n    this.rules[19] = { name: 'URI', lower: 'uri', index: 19, isBkr: false };\n    this.rules[20] = { name: 'hier-part', lower: 'hier-part', index: 20, isBkr: false };\n    this.rules[21] = { name: 'scheme', lower: 'scheme', index: 21, isBkr: false };\n    this.rules[22] = { name: 'authority', lower: 'authority', index: 22, isBkr: false };\n    this.rules[23] = { name: 'path-abempty', lower: 'path-abempty', index: 23, isBkr: false };\n    this.rules[24] = { name: 'path-absolute', lower: 'path-absolute', index: 24, isBkr: false };\n    this.rules[25] = { name: 'path-rootless', lower: 'path-rootless', index: 25, isBkr: false };\n    this.rules[26] = { name: 'path-empty', lower: 'path-empty', index: 26, isBkr: false };\n    this.rules[27] = { name: 'userinfo-at', lower: 'userinfo-at', index: 27, isBkr: false };\n    this.rules[28] = { name: 'userinfo', lower: 'userinfo', index: 28, isBkr: false };\n    this.rules[29] = { name: 'host', lower: 'host', index: 29, isBkr: false };\n    this.rules[30] = { name: 'IP-literal', lower: 'ip-literal', index: 30, isBkr: false };\n    this.rules[31] = { name: 'IPvFuture', lower: 'ipvfuture', index: 31, isBkr: false };\n    this.rules[32] = { name: 'IPv6address', lower: 'ipv6address', index: 32, isBkr: false };\n    this.rules[33] = { name: 'nodcolon', lower: 'nodcolon', index: 33, isBkr: false };\n    this.rules[34] = { name: 'dcolon', lower: 'dcolon', index: 34, isBkr: false };\n    this.rules[35] = { name: 'h16', lower: 'h16', index: 35, isBkr: false };\n    this.rules[36] = { name: 'h16c', lower: 'h16c', index: 36, isBkr: false };\n    this.rules[37] = { name: 'h16n', lower: 'h16n', index: 37, isBkr: false };\n    this.rules[38] = { name: 'h16cn', lower: 'h16cn', index: 38, isBkr: false };\n    this.rules[39] = { name: 'IPv4address', lower: 'ipv4address', index: 39, isBkr: false };\n    this.rules[40] = { name: 'dec-octet', lower: 'dec-octet', index: 40, isBkr: false };\n    this.rules[41] = { name: 'dec-digit', lower: 'dec-digit', index: 41, isBkr: false };\n    this.rules[42] = { name: 'reg-name', lower: 'reg-name', index: 42, isBkr: false };\n    this.rules[43] = { name: 'reg-name-char', lower: 'reg-name-char', index: 43, isBkr: false };\n    this.rules[44] = { name: 'port', lower: 'port', index: 44, isBkr: false };\n    this.rules[45] = { name: 'query', lower: 'query', index: 45, isBkr: false };\n    this.rules[46] = { name: 'fragment', lower: 'fragment', index: 46, isBkr: false };\n    this.rules[47] = { name: 'URI-r', lower: 'uri-r', index: 47, isBkr: false };\n    this.rules[48] = { name: 'hier-part-r', lower: 'hier-part-r', index: 48, isBkr: false };\n    this.rules[49] = { name: 'scheme-r', lower: 'scheme-r', index: 49, isBkr: false };\n    this.rules[50] = { name: 'query-r', lower: 'query-r', index: 50, isBkr: false };\n    this.rules[51] = { name: 'fragment-r', lower: 'fragment-r', index: 51, isBkr: false };\n    this.rules[52] = { name: 'authority-d', lower: 'authority-d', index: 52, isBkr: false };\n    this.rules[53] = { name: 'userinfo-d', lower: 'userinfo-d', index: 53, isBkr: false };\n    this.rules[54] = { name: 'host-d', lower: 'host-d', index: 54, isBkr: false };\n    this.rules[55] = { name: 'port-d', lower: 'port-d', index: 55, isBkr: false };\n    this.rules[56] = { name: 'path-abempty-r', lower: 'path-abempty-r', index: 56, isBkr: false };\n    this.rules[57] = { name: 'path-absolute-r', lower: 'path-absolute-r', index: 57, isBkr: false };\n    this.rules[58] = { name: 'path-rootless-r', lower: 'path-rootless-r', index: 58, isBkr: false };\n    this.rules[59] = { name: 'path-empty-r', lower: 'path-empty-r', index: 59, isBkr: false };\n    this.rules[60] = { name: 'segment', lower: 'segment', index: 60, isBkr: false };\n    this.rules[61] = { name: 'segment-nz', lower: 'segment-nz', index: 61, isBkr: false };\n    this.rules[62] = { name: 'pchar', lower: 'pchar', index: 62, isBkr: false };\n    this.rules[63] = { name: 'pct-encoded', lower: 'pct-encoded', index: 63, isBkr: false };\n    this.rules[64] = { name: 'date-fullyear', lower: 'date-fullyear', index: 64, isBkr: false };\n    this.rules[65] = { name: 'date-month', lower: 'date-month', index: 65, isBkr: false };\n    this.rules[66] = { name: 'date-mday', lower: 'date-mday', index: 66, isBkr: false };\n    this.rules[67] = { name: 'time-hour', lower: 'time-hour', index: 67, isBkr: false };\n    this.rules[68] = { name: 'time-minute', lower: 'time-minute', index: 68, isBkr: false };\n    this.rules[69] = { name: 'time-second', lower: 'time-second', index: 69, isBkr: false };\n    this.rules[70] = { name: 'time-secfrac', lower: 'time-secfrac', index: 70, isBkr: false };\n    this.rules[71] = { name: 'time-numoffset', lower: 'time-numoffset', index: 71, isBkr: false };\n    this.rules[72] = { name: 'time-offset', lower: 'time-offset', index: 72, isBkr: false };\n    this.rules[73] = { name: 'partial-time', lower: 'partial-time', index: 73, isBkr: false };\n    this.rules[74] = { name: 'full-date', lower: 'full-date', index: 74, isBkr: false };\n    this.rules[75] = { name: 'full-time', lower: 'full-time', index: 75, isBkr: false };\n    this.rules[76] = { name: 'date-time', lower: 'date-time', index: 76, isBkr: false };\n    this.rules[77] = { name: 'ALPHA', lower: 'alpha', index: 77, isBkr: false };\n    this.rules[78] = { name: 'LF', lower: 'lf', index: 78, isBkr: false };\n    this.rules[79] = { name: 'DIGIT', lower: 'digit', index: 79, isBkr: false };\n    this.rules[80] = { name: 'HEXDIG', lower: 'hexdig', index: 80, isBkr: false };\n    /* UDTS */\n    this.udts = [];\n    /* OPCODES */\n    /* sign-in-with-ethereum */\n    this.rules[0].opcodes = [];\n    this.rules[0].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6, 7, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36, 41, 46] }; // CAT\n    this.rules[0].opcodes[1] = { type: 4, index: 5 }; // RNM(oscheme)\n    this.rules[0].opcodes[2] = { type: 4, index: 6 }; // RNM(domain)\n    this.rules[0].opcodes[3] = { type: 6, string: [32, 119, 97, 110, 116, 115, 32, 121, 111, 117, 32, 116, 111, 32, 115, 105, 103, 110, 32, 105, 110, 32, 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 69, 116, 104, 101, 114, 101, 117, 109, 32, 97, 99, 99, 111, 117, 110, 116, 58] }; // TBS\n    this.rules[0].opcodes[4] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[5] = { type: 4, index: 7 }; // RNM(address)\n    this.rules[0].opcodes[6] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[7] = { type: 1, children: [8, 13, 14] }; // ALT\n    this.rules[0].opcodes[8] = { type: 2, children: [9, 10, 11, 12] }; // CAT\n    this.rules[0].opcodes[9] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[10] = { type: 4, index: 8 }; // RNM(statement)\n    this.rules[0].opcodes[11] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[12] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[13] = { type: 4, index: 9 }; // RNM(empty-statement)\n    this.rules[0].opcodes[14] = { type: 2, children: [15, 16] }; // CAT\n    this.rules[0].opcodes[15] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[16] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[17] = { type: 6, string: [85, 82, 73, 58, 32] }; // TBS\n    this.rules[0].opcodes[18] = { type: 4, index: 19 }; // RNM(URI)\n    this.rules[0].opcodes[19] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[20] = { type: 6, string: [86, 101, 114, 115, 105, 111, 110, 58, 32] }; // TBS\n    this.rules[0].opcodes[21] = { type: 4, index: 10 }; // RNM(version)\n    this.rules[0].opcodes[22] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[23] = { type: 6, string: [67, 104, 97, 105, 110, 32, 73, 68, 58, 32] }; // TBS\n    this.rules[0].opcodes[24] = { type: 4, index: 16 }; // RNM(chain-id)\n    this.rules[0].opcodes[25] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[26] = { type: 6, string: [78, 111, 110, 99, 101, 58, 32] }; // TBS\n    this.rules[0].opcodes[27] = { type: 4, index: 11 }; // RNM(nonce)\n    this.rules[0].opcodes[28] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[29] = { type: 6, string: [73, 115, 115, 117, 101, 100, 32, 65, 116, 58, 32] }; // TBS\n    this.rules[0].opcodes[30] = { type: 4, index: 12 }; // RNM(issued-at)\n    this.rules[0].opcodes[31] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[32] = { type: 2, children: [33, 34, 35] }; // CAT\n    this.rules[0].opcodes[33] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[34] = { type: 4, index: 1 }; // RNM(ex-title)\n    this.rules[0].opcodes[35] = { type: 4, index: 13 }; // RNM(expiration-time)\n    this.rules[0].opcodes[36] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[37] = { type: 2, children: [38, 39, 40] }; // CAT\n    this.rules[0].opcodes[38] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[39] = { type: 4, index: 2 }; // RNM(nb-title)\n    this.rules[0].opcodes[40] = { type: 4, index: 14 }; // RNM(not-before)\n    this.rules[0].opcodes[41] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[42] = { type: 2, children: [43, 44, 45] }; // CAT\n    this.rules[0].opcodes[43] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[44] = { type: 4, index: 3 }; // RNM(ri-title)\n    this.rules[0].opcodes[45] = { type: 4, index: 15 }; // RNM(request-id)\n    this.rules[0].opcodes[46] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[0].opcodes[47] = { type: 2, children: [48, 49, 50] }; // CAT\n    this.rules[0].opcodes[48] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[0].opcodes[49] = { type: 4, index: 4 }; // RNM(re-title)\n    this.rules[0].opcodes[50] = { type: 4, index: 17 }; // RNM(resources)\n    /* ex-title */\n    this.rules[1].opcodes = [];\n    this.rules[1].opcodes[0] = { type: 6, string: [69, 120, 112, 105, 114, 97, 116, 105, 111, 110, 32, 84, 105, 109, 101, 58, 32] }; // TBS\n    /* nb-title */\n    this.rules[2].opcodes = [];\n    this.rules[2].opcodes[0] = { type: 6, string: [78, 111, 116, 32, 66, 101, 102, 111, 114, 101, 58, 32] }; // TBS\n    /* ri-title */\n    this.rules[3].opcodes = [];\n    this.rules[3].opcodes[0] = { type: 6, string: [82, 101, 113, 117, 101, 115, 116, 32, 73, 68, 58, 32] }; // TBS\n    /* re-title */\n    this.rules[4].opcodes = [];\n    this.rules[4].opcodes[0] = { type: 6, string: [82, 101, 115, 111, 117, 114, 99, 101, 115, 58] }; // TBS\n    /* oscheme */\n    this.rules[5].opcodes = [];\n    this.rules[5].opcodes[0] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[5].opcodes[1] = { type: 2, children: [2, 3, 9] }; // CAT\n    this.rules[5].opcodes[2] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[5].opcodes[3] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[5].opcodes[4] = { type: 1, children: [5, 6, 7, 8] }; // ALT\n    this.rules[5].opcodes[5] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[5].opcodes[6] = { type: 4, index: 79 }; // RNM(DIGIT)\n    this.rules[5].opcodes[7] = { type: 6, string: [43] }; // TBS\n    this.rules[5].opcodes[8] = { type: 5, min: 45, max: 46 }; // TRG\n    this.rules[5].opcodes[9] = { type: 7, string: [58, 47, 47] }; // TLS\n    /* domain */\n    this.rules[6].opcodes = [];\n    this.rules[6].opcodes[0] = { type: 4, index: 52 }; // RNM(authority-d)\n    /* address */\n    this.rules[7].opcodes = [];\n    this.rules[7].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[7].opcodes[1] = { type: 7, string: [48, 120] }; // TLS\n    this.rules[7].opcodes[2] = { type: 3, min: 40, max: 40 }; // REP\n    this.rules[7].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* statement */\n    this.rules[8].opcodes = [];\n    this.rules[8].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[8].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] }; // ALT\n    this.rules[8].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[8].opcodes[3] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[8].opcodes[4] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[8].opcodes[5] = { type: 5, min: 32, max: 33 }; // TRG\n    this.rules[8].opcodes[6] = { type: 5, min: 35, max: 36 }; // TRG\n    this.rules[8].opcodes[7] = { type: 5, min: 38, max: 59 }; // TRG\n    this.rules[8].opcodes[8] = { type: 6, string: [61] }; // TBS\n    this.rules[8].opcodes[9] = { type: 5, min: 63, max: 64 }; // TRG\n    this.rules[8].opcodes[10] = { type: 6, string: [91] }; // TBS\n    this.rules[8].opcodes[11] = { type: 6, string: [93] }; // TBS\n    this.rules[8].opcodes[12] = { type: 6, string: [95] }; // TBS\n    this.rules[8].opcodes[13] = { type: 6, string: [126] }; // TBS\n    /* empty-statement */\n    this.rules[9].opcodes = [];\n    this.rules[9].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT\n    this.rules[9].opcodes[1] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[9].opcodes[2] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[9].opcodes[3] = { type: 4, index: 78 }; // RNM(LF)\n    /* version */\n    this.rules[10].opcodes = [];\n    this.rules[10].opcodes[0] = { type: 7, string: [49] }; // TLS\n    /* nonce */\n    this.rules[11].opcodes = [];\n    this.rules[11].opcodes[0] = { type: 3, min: 8, max: Infinity }; // REP\n    this.rules[11].opcodes[1] = { type: 1, children: [2, 3] }; // ALT\n    this.rules[11].opcodes[2] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[11].opcodes[3] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* issued-at */\n    this.rules[12].opcodes = [];\n    this.rules[12].opcodes[0] = { type: 4, index: 76 }; // RNM(date-time)\n    /* expiration-time */\n    this.rules[13].opcodes = [];\n    this.rules[13].opcodes[0] = { type: 4, index: 76 }; // RNM(date-time)\n    /* not-before */\n    this.rules[14].opcodes = [];\n    this.rules[14].opcodes[0] = { type: 4, index: 76 }; // RNM(date-time)\n    /* request-id */\n    this.rules[15].opcodes = [];\n    this.rules[15].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[15].opcodes[1] = { type: 4, index: 62 }; // RNM(pchar)\n    /* chain-id */\n    this.rules[16].opcodes = [];\n    this.rules[16].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[16].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* resources */\n    this.rules[17].opcodes = [];\n    this.rules[17].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[17].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[17].opcodes[2] = { type: 4, index: 78 }; // RNM(LF)\n    this.rules[17].opcodes[3] = { type: 4, index: 18 }; // RNM(resource)\n    /* resource */\n    this.rules[18].opcodes = [];\n    this.rules[18].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[18].opcodes[1] = { type: 7, string: [45, 32] }; // TLS\n    this.rules[18].opcodes[2] = { type: 4, index: 47 }; // RNM(URI-r)\n    /* URI */\n    this.rules[19].opcodes = [];\n    this.rules[19].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 8] }; // CAT\n    this.rules[19].opcodes[1] = { type: 4, index: 21 }; // RNM(scheme)\n    this.rules[19].opcodes[2] = { type: 7, string: [58] }; // TLS\n    this.rules[19].opcodes[3] = { type: 4, index: 20 }; // RNM(hier-part)\n    this.rules[19].opcodes[4] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[19].opcodes[5] = { type: 2, children: [6, 7] }; // CAT\n    this.rules[19].opcodes[6] = { type: 7, string: [63] }; // TLS\n    this.rules[19].opcodes[7] = { type: 4, index: 45 }; // RNM(query)\n    this.rules[19].opcodes[8] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[19].opcodes[9] = { type: 2, children: [10, 11] }; // CAT\n    this.rules[19].opcodes[10] = { type: 7, string: [35] }; // TLS\n    this.rules[19].opcodes[11] = { type: 4, index: 46 }; // RNM(fragment)\n    /* hier-part */\n    this.rules[20].opcodes = [];\n    this.rules[20].opcodes[0] = { type: 1, children: [1, 5, 6, 7] }; // ALT\n    this.rules[20].opcodes[1] = { type: 2, children: [2, 3, 4] }; // CAT\n    this.rules[20].opcodes[2] = { type: 7, string: [47, 47] }; // TLS\n    this.rules[20].opcodes[3] = { type: 4, index: 22 }; // RNM(authority)\n    this.rules[20].opcodes[4] = { type: 4, index: 23 }; // RNM(path-abempty)\n    this.rules[20].opcodes[5] = { type: 4, index: 24 }; // RNM(path-absolute)\n    this.rules[20].opcodes[6] = { type: 4, index: 25 }; // RNM(path-rootless)\n    this.rules[20].opcodes[7] = { type: 4, index: 26 }; // RNM(path-empty)\n    /* scheme */\n    this.rules[21].opcodes = [];\n    this.rules[21].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[21].opcodes[1] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[21].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[21].opcodes[3] = { type: 1, children: [4, 5, 6, 7] }; // ALT\n    this.rules[21].opcodes[4] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[21].opcodes[5] = { type: 4, index: 79 }; // RNM(DIGIT)\n    this.rules[21].opcodes[6] = { type: 6, string: [43] }; // TBS\n    this.rules[21].opcodes[7] = { type: 5, min: 45, max: 46 }; // TRG\n    /* authority */\n    this.rules[22].opcodes = [];\n    this.rules[22].opcodes[0] = { type: 2, children: [1, 3, 4] }; // CAT\n    this.rules[22].opcodes[1] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[22].opcodes[2] = { type: 4, index: 27 }; // RNM(userinfo-at)\n    this.rules[22].opcodes[3] = { type: 4, index: 29 }; // RNM(host)\n    this.rules[22].opcodes[4] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[22].opcodes[5] = { type: 2, children: [6, 7] }; // CAT\n    this.rules[22].opcodes[6] = { type: 7, string: [58] }; // TLS\n    this.rules[22].opcodes[7] = { type: 4, index: 44 }; // RNM(port)\n    /* path-abempty */\n    this.rules[23].opcodes = [];\n    this.rules[23].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[23].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[23].opcodes[2] = { type: 7, string: [47] }; // TLS\n    this.rules[23].opcodes[3] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-absolute */\n    this.rules[24].opcodes = [];\n    this.rules[24].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[24].opcodes[1] = { type: 7, string: [47] }; // TLS\n    this.rules[24].opcodes[2] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[24].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[24].opcodes[4] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[24].opcodes[5] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[24].opcodes[6] = { type: 2, children: [7, 8] }; // CAT\n    this.rules[24].opcodes[7] = { type: 7, string: [47] }; // TLS\n    this.rules[24].opcodes[8] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-rootless */\n    this.rules[25].opcodes = [];\n    this.rules[25].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[25].opcodes[1] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[25].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[25].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[25].opcodes[4] = { type: 7, string: [47] }; // TLS\n    this.rules[25].opcodes[5] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-empty */\n    this.rules[26].opcodes = [];\n    this.rules[26].opcodes[0] = { type: 7, string: [] }; // TLS\n    /* userinfo-at */\n    this.rules[27].opcodes = [];\n    this.rules[27].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[27].opcodes[1] = { type: 4, index: 28 }; // RNM(userinfo)\n    this.rules[27].opcodes[2] = { type: 6, string: [64] }; // TBS\n    /* userinfo */\n    this.rules[28].opcodes = [];\n    this.rules[28].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[28].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }; // ALT\n    this.rules[28].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[28].opcodes[3] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[28].opcodes[4] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[28].opcodes[5] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[28].opcodes[6] = { type: 6, string: [33] }; // TBS\n    this.rules[28].opcodes[7] = { type: 6, string: [36] }; // TBS\n    this.rules[28].opcodes[8] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[28].opcodes[9] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[28].opcodes[10] = { type: 6, string: [61] }; // TBS\n    this.rules[28].opcodes[11] = { type: 6, string: [95] }; // TBS\n    this.rules[28].opcodes[12] = { type: 6, string: [126] }; // TBS\n    /* host */\n    this.rules[29].opcodes = [];\n    this.rules[29].opcodes[0] = { type: 1, children: [1, 2, 6] }; // ALT\n    this.rules[29].opcodes[1] = { type: 4, index: 30 }; // RNM(IP-literal)\n    this.rules[29].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[29].opcodes[3] = { type: 4, index: 39 }; // RNM(IPv4address)\n    this.rules[29].opcodes[4] = { type: 13 }; // NOT\n    this.rules[29].opcodes[5] = { type: 4, index: 43 }; // RNM(reg-name-char)\n    this.rules[29].opcodes[6] = { type: 4, index: 42 }; // RNM(reg-name)\n    /* IP-literal */\n    this.rules[30].opcodes = [];\n    this.rules[30].opcodes[0] = { type: 2, children: [1, 2, 5] }; // CAT\n    this.rules[30].opcodes[1] = { type: 7, string: [91] }; // TLS\n    this.rules[30].opcodes[2] = { type: 1, children: [3, 4] }; // ALT\n    this.rules[30].opcodes[3] = { type: 4, index: 32 }; // RNM(IPv6address)\n    this.rules[30].opcodes[4] = { type: 4, index: 31 }; // RNM(IPvFuture)\n    this.rules[30].opcodes[5] = { type: 7, string: [93] }; // TLS\n    /* IPvFuture */\n    this.rules[31].opcodes = [];\n    this.rules[31].opcodes[0] = { type: 2, children: [1, 2, 4, 5] }; // CAT\n    this.rules[31].opcodes[1] = { type: 7, string: [118] }; // TLS\n    this.rules[31].opcodes[2] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[31].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[31].opcodes[4] = { type: 7, string: [46] }; // TLS\n    this.rules[31].opcodes[5] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[31].opcodes[6] = { type: 1, children: [7, 8, 9, 10, 11, 12, 13, 14, 15, 16] }; // ALT\n    this.rules[31].opcodes[7] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[31].opcodes[8] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[31].opcodes[9] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[31].opcodes[10] = { type: 6, string: [33] }; // TBS\n    this.rules[31].opcodes[11] = { type: 6, string: [36] }; // TBS\n    this.rules[31].opcodes[12] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[31].opcodes[13] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[31].opcodes[14] = { type: 6, string: [61] }; // TBS\n    this.rules[31].opcodes[15] = { type: 6, string: [95] }; // TBS\n    this.rules[31].opcodes[16] = { type: 6, string: [126] }; // TBS\n    /* IPv6address */\n    this.rules[32].opcodes = [];\n    this.rules[32].opcodes[0] = { type: 1, children: [1, 2] }; // ALT\n    this.rules[32].opcodes[1] = { type: 4, index: 33 }; // RNM(nodcolon)\n    this.rules[32].opcodes[2] = { type: 4, index: 34 }; // RNM(dcolon)\n    /* nodcolon */\n    this.rules[33].opcodes = [];\n    this.rules[33].opcodes[0] = { type: 2, children: [1, 5] }; // CAT\n    this.rules[33].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[33].opcodes[2] = { type: 4, index: 37 }; // RNM(h16n)\n    this.rules[33].opcodes[3] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[33].opcodes[4] = { type: 4, index: 38 }; // RNM(h16cn)\n    this.rules[33].opcodes[5] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[33].opcodes[6] = { type: 2, children: [7, 8] }; // CAT\n    this.rules[33].opcodes[7] = { type: 6, string: [58] }; // TBS\n    this.rules[33].opcodes[8] = { type: 4, index: 39 }; // RNM(IPv4address)\n    /* dcolon */\n    this.rules[34].opcodes = [];\n    this.rules[34].opcodes[0] = { type: 2, children: [1, 6, 7] }; // CAT\n    this.rules[34].opcodes[1] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[34].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[34].opcodes[3] = { type: 4, index: 35 }; // RNM(h16)\n    this.rules[34].opcodes[4] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[34].opcodes[5] = { type: 4, index: 36 }; // RNM(h16c)\n    this.rules[34].opcodes[6] = { type: 6, string: [58, 58] }; // TBS\n    this.rules[34].opcodes[7] = { type: 1, children: [8, 17] }; // ALT\n    this.rules[34].opcodes[8] = { type: 2, children: [9, 13] }; // CAT\n    this.rules[34].opcodes[9] = { type: 2, children: [10, 11] }; // CAT\n    this.rules[34].opcodes[10] = { type: 4, index: 37 }; // RNM(h16n)\n    this.rules[34].opcodes[11] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[34].opcodes[12] = { type: 4, index: 38 }; // RNM(h16cn)\n    this.rules[34].opcodes[13] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[34].opcodes[14] = { type: 2, children: [15, 16] }; // CAT\n    this.rules[34].opcodes[15] = { type: 6, string: [58] }; // TBS\n    this.rules[34].opcodes[16] = { type: 4, index: 39 }; // RNM(IPv4address)\n    this.rules[34].opcodes[17] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[34].opcodes[18] = { type: 4, index: 39 }; // RNM(IPv4address)\n    /* h16 */\n    this.rules[35].opcodes = [];\n    this.rules[35].opcodes[0] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[35].opcodes[1] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* h16c */\n    this.rules[36].opcodes = [];\n    this.rules[36].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[36].opcodes[1] = { type: 6, string: [58] }; // TBS\n    this.rules[36].opcodes[2] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[36].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* h16n */\n    this.rules[37].opcodes = [];\n    this.rules[37].opcodes[0] = { type: 2, children: [1, 3] }; // CAT\n    this.rules[37].opcodes[1] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[37].opcodes[2] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[37].opcodes[3] = { type: 13 }; // NOT\n    this.rules[37].opcodes[4] = { type: 6, string: [46] }; // TBS\n    /* h16cn */\n    this.rules[38].opcodes = [];\n    this.rules[38].opcodes[0] = { type: 2, children: [1, 2, 4] }; // CAT\n    this.rules[38].opcodes[1] = { type: 6, string: [58] }; // TBS\n    this.rules[38].opcodes[2] = { type: 3, min: 1, max: 4 }; // REP\n    this.rules[38].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[38].opcodes[4] = { type: 13 }; // NOT\n    this.rules[38].opcodes[5] = { type: 6, string: [46] }; // TBS\n    /* IPv4address */\n    this.rules[39].opcodes = [];\n    this.rules[39].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6, 7] }; // CAT\n    this.rules[39].opcodes[1] = { type: 4, index: 40 }; // RNM(dec-octet)\n    this.rules[39].opcodes[2] = { type: 7, string: [46] }; // TLS\n    this.rules[39].opcodes[3] = { type: 4, index: 40 }; // RNM(dec-octet)\n    this.rules[39].opcodes[4] = { type: 7, string: [46] }; // TLS\n    this.rules[39].opcodes[5] = { type: 4, index: 40 }; // RNM(dec-octet)\n    this.rules[39].opcodes[6] = { type: 7, string: [46] }; // TLS\n    this.rules[39].opcodes[7] = { type: 4, index: 40 }; // RNM(dec-octet)\n    /* dec-octet */\n    this.rules[40].opcodes = [];\n    this.rules[40].opcodes[0] = { type: 3, min: 0, max: 3 }; // REP\n    this.rules[40].opcodes[1] = { type: 4, index: 41 }; // RNM(dec-digit)\n    /* dec-digit */\n    this.rules[41].opcodes = [];\n    this.rules[41].opcodes[0] = { type: 5, min: 48, max: 57 }; // TRG\n    /* reg-name */\n    this.rules[42].opcodes = [];\n    this.rules[42].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[42].opcodes[1] = { type: 4, index: 43 }; // RNM(reg-name-char)\n    /* reg-name-char */\n    this.rules[43].opcodes = [];\n    this.rules[43].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] }; // ALT\n    this.rules[43].opcodes[1] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[43].opcodes[2] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[43].opcodes[3] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[43].opcodes[4] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[43].opcodes[5] = { type: 6, string: [33] }; // TBS\n    this.rules[43].opcodes[6] = { type: 6, string: [36] }; // TBS\n    this.rules[43].opcodes[7] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[43].opcodes[8] = { type: 6, string: [59] }; // TBS\n    this.rules[43].opcodes[9] = { type: 6, string: [61] }; // TBS\n    this.rules[43].opcodes[10] = { type: 6, string: [95] }; // TBS\n    this.rules[43].opcodes[11] = { type: 6, string: [126] }; // TBS\n    /* port */\n    this.rules[44].opcodes = [];\n    this.rules[44].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[44].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* query */\n    this.rules[45].opcodes = [];\n    this.rules[45].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[45].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[45].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[45].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[45].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* fragment */\n    this.rules[46].opcodes = [];\n    this.rules[46].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[46].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[46].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[46].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[46].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* URI-r */\n    this.rules[47].opcodes = [];\n    this.rules[47].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 8] }; // CAT\n    this.rules[47].opcodes[1] = { type: 4, index: 49 }; // RNM(scheme-r)\n    this.rules[47].opcodes[2] = { type: 7, string: [58] }; // TLS\n    this.rules[47].opcodes[3] = { type: 4, index: 48 }; // RNM(hier-part-r)\n    this.rules[47].opcodes[4] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[47].opcodes[5] = { type: 2, children: [6, 7] }; // CAT\n    this.rules[47].opcodes[6] = { type: 7, string: [63] }; // TLS\n    this.rules[47].opcodes[7] = { type: 4, index: 50 }; // RNM(query-r)\n    this.rules[47].opcodes[8] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[47].opcodes[9] = { type: 2, children: [10, 11] }; // CAT\n    this.rules[47].opcodes[10] = { type: 7, string: [35] }; // TLS\n    this.rules[47].opcodes[11] = { type: 4, index: 51 }; // RNM(fragment-r)\n    /* hier-part-r */\n    this.rules[48].opcodes = [];\n    this.rules[48].opcodes[0] = { type: 1, children: [1, 5, 6, 7] }; // ALT\n    this.rules[48].opcodes[1] = { type: 2, children: [2, 3, 4] }; // CAT\n    this.rules[48].opcodes[2] = { type: 7, string: [47, 47] }; // TLS\n    this.rules[48].opcodes[3] = { type: 4, index: 52 }; // RNM(authority-d)\n    this.rules[48].opcodes[4] = { type: 4, index: 56 }; // RNM(path-abempty-r)\n    this.rules[48].opcodes[5] = { type: 4, index: 57 }; // RNM(path-absolute-r)\n    this.rules[48].opcodes[6] = { type: 4, index: 58 }; // RNM(path-rootless-r)\n    this.rules[48].opcodes[7] = { type: 4, index: 59 }; // RNM(path-empty-r)\n    /* scheme-r */\n    this.rules[49].opcodes = [];\n    this.rules[49].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[49].opcodes[1] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[49].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[49].opcodes[3] = { type: 1, children: [4, 5, 6, 7] }; // ALT\n    this.rules[49].opcodes[4] = { type: 4, index: 77 }; // RNM(ALPHA)\n    this.rules[49].opcodes[5] = { type: 4, index: 79 }; // RNM(DIGIT)\n    this.rules[49].opcodes[6] = { type: 6, string: [43] }; // TBS\n    this.rules[49].opcodes[7] = { type: 5, min: 45, max: 46 }; // TRG\n    /* query-r */\n    this.rules[50].opcodes = [];\n    this.rules[50].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[50].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[50].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[50].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[50].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* fragment-r */\n    this.rules[51].opcodes = [];\n    this.rules[51].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[51].opcodes[1] = { type: 1, children: [2, 3, 4] }; // ALT\n    this.rules[51].opcodes[2] = { type: 4, index: 62 }; // RNM(pchar)\n    this.rules[51].opcodes[3] = { type: 6, string: [47] }; // TBS\n    this.rules[51].opcodes[4] = { type: 6, string: [63] }; // TBS\n    /* authority-d */\n    this.rules[52].opcodes = [];\n    this.rules[52].opcodes[0] = { type: 2, children: [1, 5, 6] }; // CAT\n    this.rules[52].opcodes[1] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[52].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[52].opcodes[3] = { type: 4, index: 53 }; // RNM(userinfo-d)\n    this.rules[52].opcodes[4] = { type: 6, string: [64] }; // TBS\n    this.rules[52].opcodes[5] = { type: 4, index: 54 }; // RNM(host-d)\n    this.rules[52].opcodes[6] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[52].opcodes[7] = { type: 2, children: [8, 9] }; // CAT\n    this.rules[52].opcodes[8] = { type: 7, string: [58] }; // TLS\n    this.rules[52].opcodes[9] = { type: 4, index: 55 }; // RNM(port-d)\n    /* userinfo-d */\n    this.rules[53].opcodes = [];\n    this.rules[53].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[53].opcodes[1] = { type: 1, children: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }; // ALT\n    this.rules[53].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[53].opcodes[3] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[53].opcodes[4] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[53].opcodes[5] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[53].opcodes[6] = { type: 6, string: [33] }; // TBS\n    this.rules[53].opcodes[7] = { type: 6, string: [36] }; // TBS\n    this.rules[53].opcodes[8] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[53].opcodes[9] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[53].opcodes[10] = { type: 6, string: [61] }; // TBS\n    this.rules[53].opcodes[11] = { type: 6, string: [95] }; // TBS\n    this.rules[53].opcodes[12] = { type: 6, string: [126] }; // TBS\n    /* host-d */\n    this.rules[54].opcodes = [];\n    this.rules[54].opcodes[0] = { type: 1, children: [1, 2, 6] }; // ALT\n    this.rules[54].opcodes[1] = { type: 4, index: 30 }; // RNM(IP-literal)\n    this.rules[54].opcodes[2] = { type: 2, children: [3, 4] }; // CAT\n    this.rules[54].opcodes[3] = { type: 4, index: 39 }; // RNM(IPv4address)\n    this.rules[54].opcodes[4] = { type: 13 }; // NOT\n    this.rules[54].opcodes[5] = { type: 4, index: 43 }; // RNM(reg-name-char)\n    this.rules[54].opcodes[6] = { type: 4, index: 42 }; // RNM(reg-name)\n    /* port-d */\n    this.rules[55].opcodes = [];\n    this.rules[55].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[55].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* path-abempty-r */\n    this.rules[56].opcodes = [];\n    this.rules[56].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[56].opcodes[1] = { type: 2, children: [2, 3] }; // CAT\n    this.rules[56].opcodes[2] = { type: 7, string: [47] }; // TLS\n    this.rules[56].opcodes[3] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-absolute-r */\n    this.rules[57].opcodes = [];\n    this.rules[57].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[57].opcodes[1] = { type: 7, string: [47] }; // TLS\n    this.rules[57].opcodes[2] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[57].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[57].opcodes[4] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[57].opcodes[5] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[57].opcodes[6] = { type: 2, children: [7, 8] }; // CAT\n    this.rules[57].opcodes[7] = { type: 7, string: [47] }; // TLS\n    this.rules[57].opcodes[8] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-rootless-r */\n    this.rules[58].opcodes = [];\n    this.rules[58].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[58].opcodes[1] = { type: 4, index: 61 }; // RNM(segment-nz)\n    this.rules[58].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[58].opcodes[3] = { type: 2, children: [4, 5] }; // CAT\n    this.rules[58].opcodes[4] = { type: 7, string: [47] }; // TLS\n    this.rules[58].opcodes[5] = { type: 4, index: 60 }; // RNM(segment)\n    /* path-empty-r */\n    this.rules[59].opcodes = [];\n    this.rules[59].opcodes[0] = { type: 7, string: [] }; // TLS\n    /* segment */\n    this.rules[60].opcodes = [];\n    this.rules[60].opcodes[0] = { type: 3, min: 0, max: Infinity }; // REP\n    this.rules[60].opcodes[1] = { type: 4, index: 62 }; // RNM(pchar)\n    /* segment-nz */\n    this.rules[61].opcodes = [];\n    this.rules[61].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[61].opcodes[1] = { type: 4, index: 62 }; // RNM(pchar)\n    /* pchar */\n    this.rules[62].opcodes = [];\n    this.rules[62].opcodes[0] = { type: 1, children: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] }; // ALT\n    this.rules[62].opcodes[1] = { type: 5, min: 97, max: 122 }; // TRG\n    this.rules[62].opcodes[2] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[62].opcodes[3] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[62].opcodes[4] = { type: 4, index: 63 }; // RNM(pct-encoded)\n    this.rules[62].opcodes[5] = { type: 6, string: [33] }; // TBS\n    this.rules[62].opcodes[6] = { type: 6, string: [36] }; // TBS\n    this.rules[62].opcodes[7] = { type: 5, min: 38, max: 46 }; // TRG\n    this.rules[62].opcodes[8] = { type: 5, min: 58, max: 59 }; // TRG\n    this.rules[62].opcodes[9] = { type: 6, string: [61] }; // TBS\n    this.rules[62].opcodes[10] = { type: 6, string: [64] }; // TBS\n    this.rules[62].opcodes[11] = { type: 6, string: [95] }; // TBS\n    this.rules[62].opcodes[12] = { type: 6, string: [126] }; // TBS\n    /* pct-encoded */\n    this.rules[63].opcodes = [];\n    this.rules[63].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT\n    this.rules[63].opcodes[1] = { type: 6, string: [37] }; // TBS\n    this.rules[63].opcodes[2] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    this.rules[63].opcodes[3] = { type: 4, index: 80 }; // RNM(HEXDIG)\n    /* date-fullyear */\n    this.rules[64].opcodes = [];\n    this.rules[64].opcodes[0] = { type: 3, min: 4, max: 4 }; // REP\n    this.rules[64].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* date-month */\n    this.rules[65].opcodes = [];\n    this.rules[65].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[65].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* date-mday */\n    this.rules[66].opcodes = [];\n    this.rules[66].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[66].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-hour */\n    this.rules[67].opcodes = [];\n    this.rules[67].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[67].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-minute */\n    this.rules[68].opcodes = [];\n    this.rules[68].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[68].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-second */\n    this.rules[69].opcodes = [];\n    this.rules[69].opcodes[0] = { type: 3, min: 2, max: 2 }; // REP\n    this.rules[69].opcodes[1] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-secfrac */\n    this.rules[70].opcodes = [];\n    this.rules[70].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[70].opcodes[1] = { type: 7, string: [46] }; // TLS\n    this.rules[70].opcodes[2] = { type: 3, min: 1, max: Infinity }; // REP\n    this.rules[70].opcodes[3] = { type: 4, index: 79 }; // RNM(DIGIT)\n    /* time-numoffset */\n    this.rules[71].opcodes = [];\n    this.rules[71].opcodes[0] = { type: 2, children: [1, 4, 5, 6] }; // CAT\n    this.rules[71].opcodes[1] = { type: 1, children: [2, 3] }; // ALT\n    this.rules[71].opcodes[2] = { type: 7, string: [43] }; // TLS\n    this.rules[71].opcodes[3] = { type: 7, string: [45] }; // TLS\n    this.rules[71].opcodes[4] = { type: 4, index: 67 }; // RNM(time-hour)\n    this.rules[71].opcodes[5] = { type: 7, string: [58] }; // TLS\n    this.rules[71].opcodes[6] = { type: 4, index: 68 }; // RNM(time-minute)\n    /* time-offset */\n    this.rules[72].opcodes = [];\n    this.rules[72].opcodes[0] = { type: 1, children: [1, 2] }; // ALT\n    this.rules[72].opcodes[1] = { type: 7, string: [122] }; // TLS\n    this.rules[72].opcodes[2] = { type: 4, index: 71 }; // RNM(time-numoffset)\n    /* partial-time */\n    this.rules[73].opcodes = [];\n    this.rules[73].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6] }; // CAT\n    this.rules[73].opcodes[1] = { type: 4, index: 67 }; // RNM(time-hour)\n    this.rules[73].opcodes[2] = { type: 7, string: [58] }; // TLS\n    this.rules[73].opcodes[3] = { type: 4, index: 68 }; // RNM(time-minute)\n    this.rules[73].opcodes[4] = { type: 7, string: [58] }; // TLS\n    this.rules[73].opcodes[5] = { type: 4, index: 69 }; // RNM(time-second)\n    this.rules[73].opcodes[6] = { type: 3, min: 0, max: 1 }; // REP\n    this.rules[73].opcodes[7] = { type: 4, index: 70 }; // RNM(time-secfrac)\n    /* full-date */\n    this.rules[74].opcodes = [];\n    this.rules[74].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5] }; // CAT\n    this.rules[74].opcodes[1] = { type: 4, index: 64 }; // RNM(date-fullyear)\n    this.rules[74].opcodes[2] = { type: 7, string: [45] }; // TLS\n    this.rules[74].opcodes[3] = { type: 4, index: 65 }; // RNM(date-month)\n    this.rules[74].opcodes[4] = { type: 7, string: [45] }; // TLS\n    this.rules[74].opcodes[5] = { type: 4, index: 66 }; // RNM(date-mday)\n    /* full-time */\n    this.rules[75].opcodes = [];\n    this.rules[75].opcodes[0] = { type: 2, children: [1, 2] }; // CAT\n    this.rules[75].opcodes[1] = { type: 4, index: 73 }; // RNM(partial-time)\n    this.rules[75].opcodes[2] = { type: 4, index: 72 }; // RNM(time-offset)\n    /* date-time */\n    this.rules[76].opcodes = [];\n    this.rules[76].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT\n    this.rules[76].opcodes[1] = { type: 4, index: 74 }; // RNM(full-date)\n    this.rules[76].opcodes[2] = { type: 7, string: [116] }; // TLS\n    this.rules[76].opcodes[3] = { type: 4, index: 75 }; // RNM(full-time)\n    /* ALPHA */\n    this.rules[77].opcodes = [];\n    this.rules[77].opcodes[0] = { type: 1, children: [1, 2] }; // ALT\n    this.rules[77].opcodes[1] = { type: 5, min: 65, max: 90 }; // TRG\n    this.rules[77].opcodes[2] = { type: 5, min: 97, max: 122 }; // TRG\n    /* LF */\n    this.rules[78].opcodes = [];\n    this.rules[78].opcodes[0] = { type: 6, string: [10] }; // TBS\n    /* DIGIT */\n    this.rules[79].opcodes = [];\n    this.rules[79].opcodes[0] = { type: 5, min: 48, max: 57 }; // TRG\n    /* HEXDIG */\n    this.rules[80].opcodes = [];\n    this.rules[80].opcodes[0] = { type: 1, children: [1, 2, 3] }; // ALT\n    this.rules[80].opcodes[1] = { type: 5, min: 48, max: 57 }; // TRG\n    this.rules[80].opcodes[2] = { type: 5, min: 65, max: 70 }; // TRG\n    this.rules[80].opcodes[3] = { type: 5, min: 97, max: 102 }; // TRG\n    // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n    this.toString = function toString() {\n        let str = \"\";\n        str += \"; LDT 05/06/2024 \\n\";\n        str += \"; modified in several significant ways\\n\";\n        str += \"; 1) Literal strings are replaced with numbers and ranges (%d32 & %d32-126, etc.) when possible.\\n\";\n        str += \";    TRB and especially TRG operators are much more efficient than TLS operators.\\n\";\n        str += \"; 2) Two rules, authority and URI, are used multiple times in different contexts. These rules will be reproduced and renamed\\n\";\n        str += \";    in order to a) recognize the context and b) remove unneccary callback functions for certain contexts.\\n\";\n        str += \";    This will simiplify recognizing contexts AND remove unneccesary callbacks\\n\";\n        str += \"; 2.a) domain is defined as authority-d which is identical to authority except that there will be no\\n\";\n        str += \";      callback functions defined on authority-d or any of its *-d components.\\n\";\n        str += \"; 2.b) The resource URI is defined as URI-r and its components defined as *-r.\\n\";\n        str += \";      In this way, callback functions can be defined on URI and is components while\\n\";\n        str += \";      leaving URI-r to be parsed identically with no unnecessary callback functions to slow it down.\\n\";\n        str += \"; 3) IPv6address does not work because of APG's \\\"first-success disambiguation\\\" and \\\"greedy\\\" repetitions.\\n\";\n        str += \";    IPv6address redefined and validations moved to callback functions (semantic vs syntactic validation)\\n\";\n        str += \";    Redefinition requires negative look-ahead operators, https://en.wikipedia.org/wiki/Syntactic_predicate\\n\";\n        str += \";    That is SABNF instead of simple ABNF.\\n\";\n        str += \"; 4) IPv4address fails because of \\\"first-success disambiguation\\\".\\n\";\n        str += \";    This could be fixed with rearrangement of the alternative terms. However, it would still not\\n\";\n        str += \";    accept zero-padded (leading zeros) decimal octets.\\n\";\n        str += \";    Therefore, IPv4address is also done with callback functions and semantic validation.\\n\";\n        str += \"; 5) The negative look-ahead operator is also needed in the definition of host to\\n\";\n        str += \";    prevent failure with a reg-name that begins with an IPv4 address.\\n\";\n        str += \"; 6) NOTE: host = 1.1.1.256 is a valid host name even though it is an invalid IPv4address.\\n\";\n        str += \";          The IPv4address alternative fails but the reg-name alternative succeeds.\\n\";\n        str += \"; 7) The Ethereum spec (https://eips.ethereum.org/EIPS/eip-4361) message format ABNF\\n\";\n        str += \";    allows for empty statements. Because of the \\\"first success disambiguation\\\" of APG\\n\";\n        str += \";    the an explicit \\\"empty-statement\\\" rule is required to match the spec's intent.\\n\";\n        str += \"\\n\";\n        str += \"\\n\";\n        str += \"sign-in-with-ethereum =\\n\";\n        str += \"    oscheme domain %s\\\" wants you to sign in with your Ethereum account:\\\" LF\\n\";\n        str += \"    address LF\\n\";\n        str += \"    ((LF statement LF LF) / empty-statement / (LF LF))\\n\";\n        str += \"    %s\\\"URI: \\\" URI LF\\n\";\n        str += \"    %s\\\"Version: \\\" version LF\\n\";\n        str += \"    %s\\\"Chain ID: \\\" chain-id LF\\n\";\n        str += \"    %s\\\"Nonce: \\\" nonce LF\\n\";\n        str += \"    %s\\\"Issued At: \\\" issued-at\\n\";\n        str += \"    [ LF ex-title expiration-time ]\\n\";\n        str += \"    [ LF nb-title not-before ]\\n\";\n        str += \"    [ LF ri-title request-id ]\\n\";\n        str += \"    [ LF re-title resources ]\\n\";\n        str += \"ex-title        = %s\\\"Expiration Time: \\\"\\n\";\n        str += \"nb-title        = %s\\\"Not Before: \\\"\\n\";\n        str += \"ri-title        = %s\\\"Request ID: \\\"\\n\";\n        str += \"re-title        = %s\\\"Resources:\\\"\\n\";\n        str += \"oscheme         = [ ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 ) \\\"://\\\" ]\\n\";\n        str += \"domain          = authority-d\\n\";\n        str += \"address         = \\\"0x\\\" 40*40HEXDIG\\n\";\n        str += \"    ; Must also conform to captilization\\n\";\n        str += \"    ; checksum encoding specified in EIP-55\\n\";\n        str += \"    ; where applicable (EOAs).\\n\";\n        str += \"\\n\";\n        str += \"statement       = 1*( %d97-122 / %d65-90 / %d48-57 / %d32-33 / %d35-36 / %d38-59 / %d61 / %d63-64 / %d91 / %d93 / %d95 / %d126)\\n\";\n        str += \"    ; The purpose is to exclude LF (line breaks).\\n\";\n        str += \"    ; LDT 10/04/2023: Do you mean %d32-126? All printing characters\\n\";\n        str += \"empty-statement = LF LF LF\\n\";\n        str += \"version         = \\\"1\\\"\\n\";\n        str += \"nonce           = 8*( ALPHA / DIGIT )\\n\";\n        str += \"issued-at       = date-time\\n\";\n        str += \"expiration-time = date-time\\n\";\n        str += \"not-before      = date-time\\n\";\n        str += \"request-id      = *pchar\\n\";\n        str += \"chain-id        = 1*DIGIT\\n\";\n        str += \"    ; See EIP-155 for valid CHAIN_IDs.\\n\";\n        str += \"resources       = *( LF resource )\\n\";\n        str += \"resource        = \\\"- \\\" URI-r\\n\";\n        str += \"\\n\";\n        str += \"; ------------------------------------------------------------------------------\\n\";\n        str += \"; RFC 3986\\n\";\n        str += \"\\n\";\n        str += \"URI           = scheme \\\":\\\" hier-part [ \\\"?\\\" query ] [ \\\"#\\\" fragment ]\\n\";\n        str += \"hier-part     = \\\"//\\\" authority path-abempty\\n\";\n        str += \"              / path-absolute\\n\";\n        str += \"              / path-rootless\\n\";\n        str += \"              / path-empty\\n\";\n        str += \"scheme        = ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 )\\n\";\n        str += \"authority     = [ userinfo-at ] host [ \\\":\\\" port ]\\n\";\n        str += \"path-abempty  = *( \\\"/\\\" segment )\\n\";\n        str += \"path-absolute = \\\"/\\\" [ segment-nz *( \\\"/\\\" segment ) ]\\n\";\n        str += \"path-rootless = segment-nz *( \\\"/\\\" segment )\\n\";\n        str += \"path-empty    = \\\"\\\"\\n\";\n        str += \"userinfo-at   = userinfo %d64\\n\";\n        str += \"                ; userinfo redefined to include the \\\"@\\\" so that it will fail without it\\n\";\n        str += \"                ; otherwise userinfo can match host and then the parser will backtrack\\n\";\n        str += \"                ; incorrectly keeping the captured userinfo phrase\\n\";\n        str += \"userinfo      = *(%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d58-59 / %d61 / %d95 / %d126)\\n\";\n        str += \"host          = IP-literal / (IPv4address !reg-name-char) / reg-name\\n\";\n        str += \"                ; negative look-ahead required to prevent IPv4address from being recognized as first part of reg-name\\n\";\n        str += \"                ; same fix as https://github.com/garycourt/uri-js/issues/4\\n\";\n        str += \"IP-literal    = \\\"[\\\" ( IPv6address / IPvFuture  ) \\\"]\\\"\\n\";\n        str += \"IPvFuture     = \\\"v\\\" 1*HEXDIG \\\".\\\" 1*( %d97-122 / %d65-90 / %d48-57 / %d33 / %d36 /%d38-46 / %d58-59 /%d61 /%d95 / %d126 )\\n\";\n        str += \"IPv6address   = nodcolon / dcolon\\n\";\n        str += \"nodcolon      = (h16n *h16cn) [%d58 IPv4address]\\n\";\n        str += \"dcolon        = [h16 *h16c] %d58.58 (((h16n *h16cn) [%d58 IPv4address]) / [IPv4address])\\n\";\n        str += \"h16           = 1*4HEXDIG\\n\";\n        str += \"h16c          = %d58 1*4HEXDIG\\n\";\n        str += \"h16n          = 1*4HEXDIG !%d46\\n\";\n        str += \"h16cn         = %d58 1*4HEXDIG !%d46\\n\";\n        str += \"IPv4address   = dec-octet \\\".\\\" dec-octet \\\".\\\" dec-octet \\\".\\\" dec-octet\\n\";\n        str += \"; Here we will will use callback functions to evaluate and validate the (possibly zero-padded) dec-octet.\\n\";\n        str += \"dec-octet     =  *3dec-digit\\n\";\n        str += \"dec-digit     = %d48-57\\n\";\n        str += \"reg-name      = *reg-name-char\\n\";\n        str += \"reg-name-char = %d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d59 / %d61 /%d95 / %d126\\n\";\n        str += \"port          = *DIGIT\\n\";\n        str += \"query         = *(pchar / %d47 / %d63)\\n\";\n        str += \"fragment      = *(pchar / %d47 / %d63)\\n\";\n        str += \"\\n\";\n        str += \"; URI-r is a redefiniton of URI but without the callback functions attached to it\\n\";\n        str += \"; it reuses athority-d from domain \\n\";\n        str += \"URI-r         = scheme-r \\\":\\\" hier-part-r [ \\\"?\\\" query-r ] [ \\\"#\\\" fragment-r ]\\n\";\n        str += \"hier-part-r   = \\\"//\\\" authority-d path-abempty-r\\n\";\n        str += \"              / path-absolute-r\\n\";\n        str += \"              / path-rootless-r\\n\";\n        str += \"              / path-empty-r\\n\";\n        str += \"scheme-r      = ALPHA *( ALPHA / DIGIT / %d43 / %d45-46 )\\n\";\n        str += \"query-r       = *(pchar / %d47 / %d63)\\n\";\n        str += \"fragment-r    = *(pchar / %d47 / %d63)\\n\";\n        str += \"\\n\";\n        str += \"; authority-d is a redefinition of authority for capturing the domian phrase\\n\";\n        str += \"; but without callback functions \\n\";\n        str += \"; it is reused for URI- for the same reason               \\n\";\n        str += \"authority-d   = [ userinfo-d %d64 ] host-d [ \\\":\\\" port-d ]\\n\";\n        str += \"userinfo-d    = *(%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 / %d58-59 / %d61 / %d95 / %d126)\\n\";\n        str += \"host-d        = IP-literal / (IPv4address !reg-name-char) / reg-name\\n\";\n        str += \"port-d        = *DIGIT\\n\";\n        str += \"\\n\";\n        str += \"; for use with URI-r\\n\";\n        str += \"path-abempty-r  = *( \\\"/\\\" segment )\\n\";\n        str += \"path-absolute-r = \\\"/\\\" [ segment-nz *( \\\"/\\\" segment ) ]\\n\";\n        str += \"path-rootless-r = segment-nz *( \\\"/\\\" segment )\\n\";\n        str += \"path-empty-r    = \\\"\\\"\\n\";\n        str += \"segment       = *pchar\\n\";\n        str += \"segment-nz    = 1*pchar\\n\";\n        str += \"pchar         = (%d97-122 / %d65-90 / %d48-57 / pct-encoded / %d33 / %d36 / %d38-46 /%d58-59 / %d61 / %d64 / %d95 / %d126)\\n\";\n        str += \"pct-encoded   = %d37 HEXDIG HEXDIG\\n\";\n        str += \"\\n\";\n        str += \"; no longer needed - expanded for all usage for fewer branches in the parse there\\n\";\n        str += \"; and more efficient use of the TBS & TRG operators in place of TLS and rule names\\n\";\n        str += \"; does not work with APG probably because of \\\"first-success disambiguation\\\" and greedy repetitions.\\n\";\n        str += \"; will replace with semantic checking of valid number of h16s\\n\";\n        str += \";IPv6address   =                            6( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              /                       \\\"::\\\" 5( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [               h16 ] \\\"::\\\" 4( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [ *1( h16 \\\":\\\" ) h16 ] \\\"::\\\" 3( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [ *2( h16 \\\":\\\" ) h16 ] \\\"::\\\" 2( h16 \\\":\\\" ) ls32\\n\";\n        str += \";              / [ *3( h16 \\\":\\\" ) h16 ] \\\"::\\\"    h16 \\\":\\\"   ls32\\n\";\n        str += \";              / [ *4( h16 \\\":\\\" ) h16 ] \\\"::\\\"              ls32\\n\";\n        str += \";              / [ *5( h16 \\\":\\\" ) h16 ] \\\"::\\\"              h16\\n\";\n        str += \";              / [ *6( h16 \\\":\\\" ) h16 ] \\\"::\\\"\\n\";\n        str += \";ls32          = ( h16 \\\":\\\" h16 ) / IPv4address\\n\";\n        str += \"; dec-octet does not work because of \\\"first-success disambiguation\\\".\\n\";\n        str += \"; Must have the longest (3-digit) numbers first.\\n\";\n        str += \"; Even so, this form does not accept leading zeros.\\n\";\n        str += \"; There does not seem to be a clear standard for this (https://en.wikipedia.org/wiki/Dot-decimal_notation)\\n\";\n        str += \"; however and early RFC 790 did show leading-zero padding of the three digits.\\n\";\n        str += \";dec-octet     = DIGIT                 ; 0-9\\n\";\n        str += \";                 / %x31-39 DIGIT         ; 10-99\\n\";\n        str += \";                 / \\\"1\\\" 2DIGIT            ; 100-199\\n\";\n        str += \";                 / \\\"2\\\" %x30-34 DIGIT     ; 200-249\\n\";\n        str += \";                 / \\\"25\\\" %x30-35          ; 250-255\\n\";\n        str += \";statement = 1*( reserved / unreserved / \\\" \\\" )\\n\";\n        str += \";scheme        = ALPHA *( ALPHA / DIGIT / \\\"+\\\" / \\\"-\\\" / \\\".\\\" )\\n\";\n        str += \";authority     = [ userinfo \\\"@\\\" ] host [ \\\":\\\" port ]\\n\";\n        str += \";userinfo      = *( unreserved / pct-encoded / sub-delims / \\\":\\\" )\\n\";\n        str += \";query         = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n\";\n        str += \";fragment      = *( pchar / \\\"/\\\" / \\\"?\\\" )\\n\";\n        str += \";IPvFuture     = \\\"v\\\" 1*HEXDIG \\\".\\\" 1*( unreserved / sub-delims / \\\":\\\" )\\n\";\n        str += \";reg-name      = *( unreserved / pct-encoded / sub-delims )\\n\";\n        str += \";pct-encoded   = \\\"%\\\" HEXDIG HEXDIG\\n\";\n        str += \";pchar         = unreserved / pct-encoded / sub-delims / \\\":\\\" / \\\"@\\\"\\n\";\n        str += \";path-empty    = 0pchar; deprecated - empty literal string, \\\"\\\", is more efficient \\n\";\n        str += \";unreserved    = ALPHA / DIGIT / \\\"-\\\" / \\\".\\\" / \\\"_\\\" / \\\"~\\\"\\n\";\n        str += \";reserved      = gen-delims / sub-delims\\n\";\n        str += \";gen-delims    = \\\":\\\" / \\\"/\\\" / \\\"?\\\" / \\\"#\\\" / \\\"[\\\" / \\\"]\\\" / \\\"@\\\"\\n\";\n        str += \";sub-delims    = \\\"!\\\" / \\\"$\\\" / \\\"&\\\" / \\\"'\\\" / \\\"(\\\" / \\\")\\\"\\n\";\n        str += \";              / \\\"*\\\" / \\\"+\\\" / \\\",\\\" / \\\";\\\" / \\\"=\\\"\\n\";\n        str += \";HEXDIG         =  DIGIT / \\\"A\\\" / \\\"B\\\" / \\\"C\\\" / \\\"D\\\" / \\\"E\\\" / \\\"F\\\"\\n\";\n        str += \"\\n\";\n        str += \"; ------------------------------------------------------------------------------\\n\";\n        str += \"; RFC 3339\\n\";\n        str += \"\\n\";\n        str += \"date-fullyear   = 4DIGIT\\n\";\n        str += \"date-month      = 2DIGIT  ; 01-12\\n\";\n        str += \"date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\\n\";\n        str += \"                          ; month/year\\n\";\n        str += \"time-hour       = 2DIGIT  ; 00-23\\n\";\n        str += \"time-minute     = 2DIGIT  ; 00-59\\n\";\n        str += \"time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\\n\";\n        str += \"                          ; rules\\n\";\n        str += \"time-secfrac    = \\\".\\\" 1*DIGIT\\n\";\n        str += \"time-numoffset  = (\\\"+\\\" / \\\"-\\\") time-hour \\\":\\\" time-minute\\n\";\n        str += \"time-offset     = \\\"Z\\\" / time-numoffset\\n\";\n        str += \"\\n\";\n        str += \"partial-time    = time-hour \\\":\\\" time-minute \\\":\\\" time-second\\n\";\n        str += \"                  [time-secfrac]\\n\";\n        str += \"full-date       = date-fullyear \\\"-\\\" date-month \\\"-\\\" date-mday\\n\";\n        str += \"full-time       = partial-time time-offset\\n\";\n        str += \"\\n\";\n        str += \"date-time       = full-date \\\"T\\\" full-time\\n\";\n        str += \"\\n\";\n        str += \"; ------------------------------------------------------------------------------\\n\";\n        str += \"; RFC 5234\\n\";\n        str += \"\\n\";\n        str += \"ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\\n\";\n        str += \"LF             =  %x0A\\n\";\n        str += \"                  ; linefeed\\n\";\n        str += \"DIGIT          =  %x30-39\\n\";\n        str += \"                  ; 0-9\\n\";\n        str += \"HEXDIG         = %d48-57 / %d65-70 / %d97-102\\n\";\n        str += \"\\n\";\n        return str;\n    };\n}\nexports.grammar = grammar;\n", "/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes a list of named identifiers, shared across the parser generator\n// and the parsers that are generated.\n\nmodule.exports = {\n  // Identifies the operator type. Used by the generator\n  // to indicate operator types in the grammar object.\n  // Used by the [parser](./parser.html) when interpreting the grammar object.\n  /* the original ABNF operators */\n  ALT: 1 /* alternation */,\n  CAT: 2 /* concatenation */,\n  REP: 3 /* repetition */,\n  RNM: 4 /* rule name */,\n  TRG: 5 /* terminal range */,\n  TBS: 6 /* terminal binary string, case sensitive */,\n  TLS: 7 /* terminal literal string, case insensitive */,\n  /* the super set, SABNF operators */\n  UDT: 11 /* user-defined terminal */,\n  AND: 12 /* positive look ahead */,\n  NOT: 13 /* negative look ahead */,\n  BKR: 14 /* back reference to a previously matched rule name */,\n  BKA: 15 /* positive look behind */,\n  BKN: 16 /* negative look behind */,\n  ABG: 17 /* anchor - begin of string */,\n  AEN: 18 /* anchor - end of string */,\n  // Used by the parser and the user's `RNM` and `UDT` callback functions.\n  // Identifies the parser state as it traverses the parse tree nodes.\n  // - *ACTIVE* - indicates the downward direction through the parse tree node.\n  // - *MATCH* - indicates the upward direction and a phrase, of length \\> 0, has been successfully matched\n  // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched\n  // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all\n  ACTIVE: 100,\n  MATCH: 101,\n  EMPTY: 102,\n  NOMATCH: 103,\n  // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions\n  // to indicate the direction of flow through the `AST` nodes.\n  // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.\n  // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.\n  SEM_PRE: 200,\n  SEM_POST: 201,\n  // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.\n  // - *SEM_OK* - normal return value\n  // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,\n  // the translator will skip processing all `AST` nodes in the branch below the current node.\n  // Ignored if returned from the SEM_POST state.\n  SEM_OK: 300,\n  SEM_SKIP: 301,\n  // Used in attribute generation to distinguish the necessary attribute categories.\n  // - *ATTR_N* - non-recursive\n  // - *ATTR_R* - recursive\n  // - *ATTR_MR* - belongs to a mutually-recursive set\n  ATTR_N: 400,\n  ATTR_R: 401,\n  ATTR_MR: 402,\n  // Look around values indicate whether the parser is in look ahead or look behind mode.\n  // Used by the tracing facility to indicate the look around mode in the trace records display.\n  // - *LOOKAROUND_NONE* - the parser is in normal parsing mode\n  // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`\n  // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`\n  LOOKAROUND_NONE: 500,\n  LOOKAROUND_AHEAD: 501,\n  LOOKAROUND_BEHIND: 502,\n  // Back reference rule mode indicators\n  // - *BKR_MODE_UM* - the back reference is using universal mode\n  // - *BKR_MODE_PM* - the back reference is using parent frame mode\n  // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching\n  // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching\n  BKR_MODE_UM: 601,\n  BKR_MODE_PM: 602,\n  BKR_MODE_CS: 603,\n  BKR_MODE_CI: 604,\n};\n", "module.exports = {\n\n  // Generated by apglib/style.js \n  CLASS_MONOSPACE: 'apg-mono',\n  CLASS_ACTIVE: 'apg-active',\n  CLASS_EMPTY: 'apg-empty',\n  CLASS_MATCH: 'apg-match',\n  CLASS_NOMATCH: 'apg-nomatch',\n  CLASS_LOOKAHEAD: 'apg-lh-match',\n  CLASS_LOOKBEHIND: 'apg-lb-match',\n  CLASS_REMAINDER: 'apg-remainder',\n  CLASS_CTRLCHAR: 'apg-ctrl-char',\n  CLASS_LINEEND: 'apg-line-end',\n  CLASS_ERROR: 'apg-error',\n  CLASS_PHRASE: 'apg-phrase',\n  CLASS_EMPTYPHRASE: 'apg-empty-phrase',\n  CLASS_STATE: 'apg-state',\n  CLASS_STATS: 'apg-stats',\n  CLASS_TRACE: 'apg-trace',\n  CLASS_GRAMMAR: 'apg-grammar',\n  CLASS_RULES: 'apg-rules',\n  CLASS_RULESLINK: 'apg-rules-link',\n  CLASS_ATTRIBUTES: 'apg-attrs',\n}\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n", "/* eslint-disable prefer-destructuring */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-bitwise */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module contains the actual encoding and decoding algorithms.\n// Throws \"RangeError\" exceptions on characters or bytes out of range for the given encoding.\n\n'use strict;';\n\nconst { Buffer } = require('buffer');\n\n/* decoding error codes */\nconst NON_SHORTEST = 0xfffffffc;\nconst TRAILING = 0xfffffffd;\nconst RANGE = 0xfffffffe;\nconst ILL_FORMED = 0xffffffff;\n\n/* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */\nconst mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];\n\n/* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */\nconst ascii = [\n  '00',\n  '01',\n  '02',\n  '03',\n  '04',\n  '05',\n  '06',\n  '07',\n  '08',\n  '09',\n  '0A',\n  '0B',\n  '0C',\n  '0D',\n  '0E',\n  '0F',\n  '10',\n  '11',\n  '12',\n  '13',\n  '14',\n  '15',\n  '16',\n  '17',\n  '18',\n  '19',\n  '1A',\n  '1B',\n  '1C',\n  '1D',\n  '1E',\n  '1F',\n  '20',\n  '21',\n  '22',\n  '23',\n  '24',\n  '25',\n  '26',\n  '27',\n  '28',\n  '29',\n  '2A',\n  '2B',\n  '2C',\n  '2D',\n  '2E',\n  '2F',\n  '30',\n  '31',\n  '32',\n  '33',\n  '34',\n  '35',\n  '36',\n  '37',\n  '38',\n  '39',\n  '3A',\n  '3B',\n  '3C',\n  '3D',\n  '3E',\n  '3F',\n  '40',\n  '41',\n  '42',\n  '43',\n  '44',\n  '45',\n  '46',\n  '47',\n  '48',\n  '49',\n  '4A',\n  '4B',\n  '4C',\n  '4D',\n  '4E',\n  '4F',\n  '50',\n  '51',\n  '52',\n  '53',\n  '54',\n  '55',\n  '56',\n  '57',\n  '58',\n  '59',\n  '5A',\n  '5B',\n  '5C',\n  '5D',\n  '5E',\n  '5F',\n  '60',\n  '61',\n  '62',\n  '63',\n  '64',\n  '65',\n  '66',\n  '67',\n  '68',\n  '69',\n  '6A',\n  '6B',\n  '6C',\n  '6D',\n  '6E',\n  '6F',\n  '70',\n  '71',\n  '72',\n  '73',\n  '74',\n  '75',\n  '76',\n  '77',\n  '78',\n  '79',\n  '7A',\n  '7B',\n  '7C',\n  '7D',\n  '7E',\n  '7F',\n  '80',\n  '81',\n  '82',\n  '83',\n  '84',\n  '85',\n  '86',\n  '87',\n  '88',\n  '89',\n  '8A',\n  '8B',\n  '8C',\n  '8D',\n  '8E',\n  '8F',\n  '90',\n  '91',\n  '92',\n  '93',\n  '94',\n  '95',\n  '96',\n  '97',\n  '98',\n  '99',\n  '9A',\n  '9B',\n  '9C',\n  '9D',\n  '9E',\n  '9F',\n  'A0',\n  'A1',\n  'A2',\n  'A3',\n  'A4',\n  'A5',\n  'A6',\n  'A7',\n  'A8',\n  'A9',\n  'AA',\n  'AB',\n  'AC',\n  'AD',\n  'AE',\n  'AF',\n  'B0',\n  'B1',\n  'B2',\n  'B3',\n  'B4',\n  'B5',\n  'B6',\n  'B7',\n  'B8',\n  'B9',\n  'BA',\n  'BB',\n  'BC',\n  'BD',\n  'BE',\n  'BF',\n  'C0',\n  'C1',\n  'C2',\n  'C3',\n  'C4',\n  'C5',\n  'C6',\n  'C7',\n  'C8',\n  'C9',\n  'CA',\n  'CB',\n  'CC',\n  'CD',\n  'CE',\n  'CF',\n  'D0',\n  'D1',\n  'D2',\n  'D3',\n  'D4',\n  'D5',\n  'D6',\n  'D7',\n  'D8',\n  'D9',\n  'DA',\n  'DB',\n  'DC',\n  'DD',\n  'DE',\n  'DF',\n  'E0',\n  'E1',\n  'E2',\n  'E3',\n  'E4',\n  'E5',\n  'E6',\n  'E7',\n  'E8',\n  'E9',\n  'EA',\n  'EB',\n  'EC',\n  'ED',\n  'EE',\n  'EF',\n  'F0',\n  'F1',\n  'F2',\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'FA',\n  'FB',\n  'FC',\n  'FD',\n  'FE',\n  'FF',\n];\n\n/* vector of base 64 characters */\nconst base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split('');\n\n/* vector of base 64 character codes */\nconst base64codes = [];\nbase64chars.forEach((char) => {\n  base64codes.push(char.charCodeAt(0));\n});\n\n// The UTF8 algorithms.\nexports.utf8 = {\n  encode(chars) {\n    const bytes = [];\n    chars.forEach((char) => {\n      if (char >= 0 && char <= 0x7f) {\n        bytes.push(char);\n      } else if (char <= 0x7ff) {\n        bytes.push(0xc0 + ((char >> 6) & mask[5]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char < 0xd800 || (char > 0xdfff && char <= 0xffff)) {\n        bytes.push(0xe0 + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        const u = (char >> 16) & mask[5];\n        bytes.push(0xf0 + (u >> 2));\n        bytes.push(0x80 + ((u & mask[2]) << 4) + ((char >> 12) & mask[4]));\n        bytes.push(0x80 + ((char >> 6) & mask[6]));\n        bytes.push(0x80 + (char & mask[6]));\n      } else {\n        throw new RangeError(`utf8.encode: character out of range: char: ${char}`);\n      }\n    });\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* bytes functions return error for non-shortest forms & values out of range */\n    function bytes2(b1, b2) {\n      /* U+0080..U+07FF */\n      /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */\n      if ((b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);\n      if (x < 0x80) {\n        return NON_SHORTEST;\n      }\n      return x;\n    }\n    function bytes3(b1, b2, b3) {\n      /* U+0800..U+FFFF */\n      /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */\n      if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);\n      if (x < 0x800) {\n        return NON_SHORTEST;\n      }\n      if (x >= 0xd800 && x <= 0xdfff) {\n        return RANGE;\n      }\n      return x;\n    }\n    function bytes4(b1, b2, b3, b4) {\n      /* U+10000..U+10FFFF */\n      /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */\n      if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {\n        return TRAILING;\n      }\n      const x =\n        ((((b1 & mask[3]) << 2) + ((b2 >> 4) & mask[2])) << 16) +\n        ((b2 & mask[4]) << 12) +\n        ((b3 & mask[6]) << 6) +\n        (b4 & mask[6]);\n      if (x < 0x10000) {\n        return NON_SHORTEST;\n      }\n      if (x > 0x10ffff) {\n        return RANGE;\n      }\n      return x;\n    }\n    let c;\n    let b1;\n    let i1;\n    let i2;\n    let i3;\n    let inc;\n    const len = buf.length;\n    let i = bom ? 3 : 0;\n    const chars = [];\n    while (i < len) {\n      b1 = buf[i];\n      c = ILL_FORMED;\n      const TRUE = true;\n      while (TRUE) {\n        if (b1 >= 0 && b1 <= 0x7f) {\n          /* U+0000..U+007F 00..7F */\n          c = b1;\n          inc = 1;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {\n          /* U+0080..U+07FF C2..DF 80..BF */\n          c = bytes2(b1, buf[i1]);\n          inc = 2;\n          break;\n        }\n        i2 = i + 2;\n        if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {\n          /* U+0800..U+FFFF */\n          c = bytes3(b1, buf[i1], buf[i2]);\n          inc = 3;\n          break;\n        }\n        i3 = i + 3;\n        if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {\n          /* U+10000..U+10FFFF */\n          c = bytes4(b1, buf[i1], buf[i2], buf[i3]);\n          inc = 4;\n          break;\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        break;\n      }\n      if (c > 0x10ffff) {\n        const at = `byte[${i}]`;\n        if (c === ILL_FORMED) {\n          throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);\n        }\n        if (c === TRAILING) {\n          throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);\n        }\n        if (c === RANGE) {\n          throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);\n        }\n        if (c === NON_SHORTEST) {\n          throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);\n        }\n        throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);\n      }\n      chars.push(c);\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16BE algorithms.\nexports.utf16be = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push((char >> 8) & mask[8]);\n        bytes.push(char & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(h & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n      } else {\n        throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i] << 8) + buf[i1];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i + 2] << 8) + buf[i3];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF16LE algorithms.\nexports.utf16le = {\n  encode(chars) {\n    const bytes = [];\n    let char;\n    let h;\n    let l;\n    for (let i = 0; i < chars.length; i += 1) {\n      char = chars[i];\n      if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {\n        bytes.push(char & mask[8]);\n        bytes.push((char >> 8) & mask[8]);\n      } else if (char >= 0x10000 && char <= 0x10ffff) {\n        l = char - 0x10000;\n        h = 0xd800 + (l >> 10);\n        l = 0xdc00 + (l & mask[10]);\n        bytes.push(h & mask[8]);\n        bytes.push((h >> 8) & mask[8]);\n        bytes.push(l & mask[8]);\n        bytes.push((l >> 8) & mask[8]);\n      } else {\n        throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  decode(buf, bom) {\n    /* assumes caller has insured that buf is a Buffer of bytes */\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    const len = buf.length;\n    let i = bom ? 2 : 0;\n    let j = 0;\n    let c;\n    let inc;\n    let i1;\n    let i3;\n    let high;\n    let low;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        i1 = i + 1;\n        if (i1 < len) {\n          high = (buf[i1] << 8) + buf[i];\n          if (high < 0xd800 || high > 0xdfff) {\n            c = high;\n            inc = 2;\n            break;\n          }\n          i3 = i + 3;\n          if (i3 < len) {\n            low = (buf[i3] << 8) + buf[i + 2];\n            if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {\n              c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);\n              inc = 4;\n              break;\n            }\n          }\n        }\n        /* if we fall through to here, it is an ill-formed sequence */\n        throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);\n      }\n      chars[j++] = c;\n      i += inc;\n    }\n    return chars;\n  },\n};\n\n// The UTF32BE algorithms.\nexports.utf32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UTF32LE algorithms.\nexports.utf32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf, bom) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    let i = bom ? 4 : 0;\n    for (; i < buf.length; i += 4) {\n      const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];\n      if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {\n        throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);\n      }\n      chars.push(char);\n    }\n    return chars;\n  },\n};\n\n// The UINT7 algorithms. ASCII or 7-bit unsigned integers.\nexports.uint7 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0x7f) {\n        throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      if (buf[i] > 0x7f) {\n        throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);\n      }\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.\nexports.uint8 = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length);\n    for (let i = 0; i < chars.length; i += 1) {\n      if (chars[i] > 0xff) {\n        throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);\n      }\n      buf[i] = chars[i];\n    }\n    return buf;\n  },\n  decode(buf) {\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 1) {\n      chars[i] = buf[i];\n    }\n    return chars;\n  },\n};\n\n// The UINT16BE algorithms. Big-endian 16-bit unsigned integers.\nexports.uint16be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i] << 8) + buf[i + 1]);\n    }\n    return chars;\n  },\n};\n\n// The UINT16LE algorithms. Little-endian 16-bit unsigned integers.\nexports.uint16le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 2);\n    let i = 0;\n    chars.forEach((char) => {\n      if (char > 0xffff) {\n        throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);\n      }\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 2 > 0) {\n      throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 2) {\n      chars.push((buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32BE algorithms. Big-endian 32-bit unsigned integers.\nexports.uint32be = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = (char >> 24) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = char & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);\n    }\n    return chars;\n  },\n};\n\n// The UINT32LE algorithms. Little-endian 32-bit unsigned integers.\nexports.uint32le = {\n  encode(chars) {\n    const buf = Buffer.alloc(chars.length * 4);\n    let i = 0;\n    chars.forEach((char) => {\n      buf[i++] = char & mask[8];\n      buf[i++] = (char >> 8) & mask[8];\n      buf[i++] = (char >> 16) & mask[8];\n      buf[i++] = (char >> 24) & mask[8];\n    });\n    return buf;\n  },\n  decode(buf) {\n    /* caller to insure buf is a Buffer of bytes */\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);\n    }\n    const chars = [];\n    for (let i = 0; i < buf.length; i += 4) {\n      chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);\n    }\n    return chars;\n  },\n};\n\n// The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.\n// Uses the node.js Buffer's native \"utf16le\" capabilites.\nexports.string = {\n  encode(chars) {\n    return exports.utf16le.encode(chars).toString('utf16le');\n  },\n  decode(str) {\n    return exports.utf16le.decode(Buffer.from(str, 'utf16le'), 0);\n  },\n};\n\n// The ESCAPED algorithms.\n// Note that ESCAPED format contains only ASCII characters.\n// The characters are always in the form of a Buffer of bytes.\nexports.escaped = {\n  // Encodes an Array of 32-bit integers into ESCAPED format.\n  encode(chars) {\n    const bytes = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      const char = chars[i];\n      if (char === 96) {\n        bytes.push(char);\n        bytes.push(char);\n      } else if (char === 10) {\n        bytes.push(char);\n      } else if (char >= 32 && char <= 126) {\n        bytes.push(char);\n      } else {\n        let str = '';\n        if (char >= 0 && char <= 31) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 127 && char <= 255) {\n          str += `\\`x${ascii[char]}`;\n        } else if (char >= 0x100 && char <= 0xffff) {\n          str += `\\`u${ascii[(char >> 8) & mask[8]]}${ascii[char & mask[8]]}`;\n        } else if (char >= 0x10000 && char <= 0xffffffff) {\n          str += '`u{';\n          const digit = (char >> 24) & mask[8];\n          if (digit > 0) {\n            str += ascii[digit];\n          }\n          str += `${ascii[(char >> 16) & mask[8]] + ascii[(char >> 8) & mask[8]] + ascii[char & mask[8]]}}`;\n        } else {\n          throw new Error('escape.encode(char): char > 0xffffffff not allowed');\n        }\n        const buf = Buffer.from(str);\n        buf.forEach((b) => {\n          bytes.push(b);\n        });\n      }\n    }\n    return Buffer.from(bytes);\n  },\n  // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.\n  decode(buf) {\n    function isHex(hex) {\n      if ((hex >= 48 && hex <= 57) || (hex >= 65 && hex <= 70) || (hex >= 97 && hex <= 102)) {\n        return true;\n      }\n      return false;\n    }\n    function getx(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 2, error: true };\n      if (i + 1 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getu(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      if (i + 3 < len) {\n        if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {\n          const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);\n          ret.char = parseInt(str, 16);\n          if (!Number.isNaN(ret.char)) {\n            ret.error = false;\n          }\n        }\n      }\n      return ret;\n    }\n    function getU(i, len, bufArg) {\n      const ret = { char: null, nexti: i + 4, error: true };\n      let str = '';\n      while (i < len && isHex(bufArg[i])) {\n        str += String.fromCodePoint(bufArg[i]);\n        // eslint-disable-next-line no-param-reassign\n        i += 1;\n      }\n      ret.char = parseInt(str, 16);\n      if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {\n        ret.error = false;\n      }\n      ret.nexti = i + 1;\n      return ret;\n    }\n    const chars = [];\n    const len = buf.length;\n    let i1;\n    let ret;\n    let error;\n    let i = 0;\n    while (i < len) {\n      const TRUE = true;\n      while (TRUE) {\n        error = true;\n        if (buf[i] !== 96) {\n          /* unescaped character */\n          chars.push(buf[i]);\n          i += 1;\n          error = false;\n          break;\n        }\n        i1 = i + 1;\n        if (i1 >= len) {\n          break;\n        }\n        if (buf[i1] === 96) {\n          /* escaped grave accent */\n          chars.push(96);\n          i += 2;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 120) {\n          ret = getx(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped hex */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        if (buf[i1] === 117) {\n          if (buf[i1 + 1] === 123) {\n            ret = getU(i1 + 2, len, buf);\n            if (ret.error) {\n              break;\n            }\n            /* escaped utf-32 */\n            chars.push(ret.char);\n            i = ret.nexti;\n            error = false;\n            break;\n          }\n          ret = getu(i1 + 1, len, buf);\n          if (ret.error) {\n            break;\n          }\n          /* escaped utf-16 */\n          chars.push(ret.char);\n          i = ret.nexti;\n          error = false;\n          break;\n        }\n        break;\n      }\n      if (error) {\n        throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);\n      }\n    }\n    return chars;\n  },\n};\n\n// The line end conversion algorigthms.\nconst CR = 13;\nconst LF = 10;\nexports.lineEnds = {\n  crlf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(CR);\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(CR);\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(CR);\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n  lf(chars) {\n    const lfchars = [];\n    let i = 0;\n    while (i < chars.length) {\n      switch (chars[i]) {\n        case CR:\n          if (i + 1 < chars.length && chars[i + 1] === LF) {\n            i += 2;\n          } else {\n            i += 1;\n          }\n          lfchars.push(LF);\n          break;\n        case LF:\n          lfchars.push(LF);\n          i += 1;\n          break;\n        default:\n          lfchars.push(chars[i]);\n          i += 1;\n          break;\n      }\n    }\n    if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {\n      lfchars.push(LF);\n    }\n    return lfchars;\n  },\n};\n\n// The base 64 algorithms.\nexports.base64 = {\n  encode(buf) {\n    if (buf.length === 0) {\n      return Buffer.alloc(0);\n    }\n    let i;\n    let j;\n    let n;\n    let tail = buf.length % 3;\n    tail = tail > 0 ? 3 - tail : 0;\n    let units = (buf.length + tail) / 3;\n    const base64 = Buffer.alloc(units * 4);\n    if (tail > 0) {\n      units -= 1;\n    }\n    i = 0;\n    j = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = buf[i++] << 16;\n      n += buf[i++] << 8;\n      n += buf[i++];\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j++] = base64codes[n & mask[6]];\n    }\n    if (tail === 0) {\n      return base64;\n    }\n    if (tail === 1) {\n      n = buf[i++] << 16;\n      n += buf[i] << 8;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[(n >> 6) & mask[6]];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    if (tail === 2) {\n      n = buf[i] << 16;\n      base64[j++] = base64codes[(n >> 18) & mask[6]];\n      base64[j++] = base64codes[(n >> 12) & mask[6]];\n      base64[j++] = base64codes[64];\n      base64[j] = base64codes[64];\n      return base64;\n    }\n    return undefined;\n  },\n  decode(codes) {\n    /* remove white space and ctrl characters, validate & translate characters */\n    function validate(buf) {\n      const chars = [];\n      let tail = 0;\n      for (let i = 0; i < buf.length; i += 1) {\n        const char = buf[i];\n        const TRUE = true;\n        while (TRUE) {\n          if (char === 32 || char === 9 || char === 10 || char === 13) {\n            break;\n          }\n          if (char >= 65 && char <= 90) {\n            chars.push(char - 65);\n            break;\n          }\n          if (char >= 97 && char <= 122) {\n            chars.push(char - 71);\n            break;\n          }\n          if (char >= 48 && char <= 57) {\n            chars.push(char + 4);\n            break;\n          }\n          if (char === 43) {\n            chars.push(62);\n            break;\n          }\n          if (char === 47) {\n            chars.push(63);\n            break;\n          }\n          if (char === 61) {\n            chars.push(64);\n            tail += 1;\n            break;\n          }\n          /* invalid character */\n          throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);\n        }\n      }\n      /* validate length */\n      if (chars.length % 4 > 0) {\n        throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);\n      }\n      /* validate tail */\n      switch (tail) {\n        case 0:\n          break;\n        case 1:\n          if (chars[chars.length - 1] !== 64) {\n            throw new RangeError('base64.decode: one tail character found: not last character');\n          }\n          break;\n        case 2:\n          if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {\n            throw new RangeError('base64.decode: two tail characters found: not last characters');\n          }\n          break;\n        default:\n          throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);\n      }\n      return { tail, buf: Buffer.from(chars) };\n    }\n\n    if (codes.length === 0) {\n      return Buffer.alloc(0);\n    }\n    const val = validate(codes);\n    const { tail } = val;\n    const base64 = val.buf;\n    let i;\n    let j;\n    let n;\n    let units = base64.length / 4;\n    const buf = Buffer.alloc(units * 3 - tail);\n    if (tail > 0) {\n      units -= 1;\n    }\n    j = 0;\n    i = 0;\n    for (let u = 0; u < units; u += 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i++] << 6;\n      n += base64[i++];\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j++] = (n >> 8) & mask[8];\n      buf[j++] = n & mask[8];\n    }\n    if (tail === 1) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      n += base64[i] << 6;\n      buf[j++] = (n >> 16) & mask[8];\n      buf[j] = (n >> 8) & mask[8];\n    }\n    if (tail === 2) {\n      n = base64[i++] << 18;\n      n += base64[i++] << 12;\n      buf[j] = (n >> 16) & mask[8];\n    }\n    return buf;\n  },\n  // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.\n  toString(buf) {\n    if (buf.length % 4 > 0) {\n      throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);\n    }\n    let str = '';\n    let lineLen = 0;\n    function buildLine(c1, c2, c3, c4) {\n      switch (lineLen) {\n        case 76:\n          str += `\\r\\n${c1}${c2}${c3}${c4}`;\n          lineLen = 4;\n          break;\n        case 75:\n          str += `${c1}\\r\\n${c2}${c3}${c4}`;\n          lineLen = 3;\n          break;\n        case 74:\n          str += `${c1 + c2}\\r\\n${c3}${c4}`;\n          lineLen = 2;\n          break;\n        case 73:\n          str += `${c1 + c2 + c3}\\r\\n${c4}`;\n          lineLen = 1;\n          break;\n        default:\n          str += c1 + c2 + c3 + c4;\n          lineLen += 4;\n          break;\n      }\n    }\n    function validate(c) {\n      if (c >= 65 && c <= 90) {\n        return true;\n      }\n      if (c >= 97 && c <= 122) {\n        return true;\n      }\n      if (c >= 48 && c <= 57) {\n        return true;\n      }\n      if (c === 43) {\n        return true;\n      }\n      if (c === 47) {\n        return true;\n      }\n      if (c === 61) {\n        return true;\n      }\n      return false;\n    }\n    for (let i = 0; i < buf.length; i += 4) {\n      for (let j = i; j < i + 4; j += 1) {\n        if (!validate(buf[j])) {\n          throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);\n        }\n      }\n      buildLine(\n        String.fromCharCode(buf[i]),\n        String.fromCharCode(buf[i + 1]),\n        String.fromCharCode(buf[i + 2]),\n        String.fromCharCode(buf[i + 3])\n      );\n    }\n    return str;\n  },\n};\n", "/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exposes the public encoding, decoding and conversion functions.\n// Its private functions provide the disassembling and interpetation of the source and destination encoding types.\n// In the case of Unicode encodings, private functions determine the presence of Byte Order Marks (BOMs), if any.\n//\n// Throws \"TypeError\" exceptions on input errors.\n//\n\n'use strict;';\n\nconst { Buffer } = require('buffer');\n\nconst trans = require('./transformers');\n\n/* types */\nconst UTF8 = 'UTF8';\nconst UTF16 = 'UTF16';\nconst UTF16BE = 'UTF16BE';\nconst UTF16LE = 'UTF16LE';\nconst UTF32 = 'UTF32';\nconst UTF32BE = 'UTF32BE';\nconst UTF32LE = 'UTF32LE';\nconst UINT7 = 'UINT7';\nconst ASCII = 'ASCII';\nconst BINARY = 'BINARY';\nconst UINT8 = 'UINT8';\nconst UINT16 = 'UINT16';\nconst UINT16LE = 'UINT16LE';\nconst UINT16BE = 'UINT16BE';\nconst UINT32 = 'UINT32';\nconst UINT32LE = 'UINT32LE';\nconst UINT32BE = 'UINT32BE';\nconst ESCAPED = 'ESCAPED';\nconst STRING = 'STRING';\n\n/* private functions */\n// Find the UTF8 BOM, if any.\nconst bom8 = function bom8(src) {\n  src.type = UTF8;\n  const buf = src.data;\n  src.bom = 0;\n  if (buf.length >= 3) {\n    if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {\n      src.bom = 3;\n    }\n  }\n};\n// Find the UTF16 BOM, if any, and determine the UTF16 type.\n// Defaults to UTF16BE.\n// Throws TypeError exception if BOM does not match the specified type.\nconst bom16 = function bom16(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF16:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.type = UTF16LE;\n          src.bom = 2;\n        }\n      }\n      break;\n    case UTF16BE:\n      src.type = UTF16BE;\n      if (buf.length >= 2) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          src.bom = 2;\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          throw new TypeError(`src type: \"${UTF16BE}\" specified but BOM is for \"${UTF16LE}\"`);\n        }\n      }\n      break;\n    case UTF16LE:\n      src.type = UTF16LE;\n      if (buf.length >= 0) {\n        if (buf[0] === 0xfe && buf[1] === 0xff) {\n          throw new TypeError(`src type: \"${UTF16LE}\" specified but BOM is for \"${UTF16BE}\"`);\n        } else if (buf[0] === 0xff && buf[1] === 0xfe) {\n          src.bom = 2;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF16 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Find the UTF32 BOM, if any, and determine the UTF32 type.\n// Defaults to UTF32BE.\n// Throws exception if BOM does not match the specified type.\nconst bom32 = function bom32(src) {\n  const buf = src.data;\n  src.bom = 0;\n  switch (src.type) {\n    case UTF32:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.type = UTF32LE;\n          src.bom = 4;\n        }\n      }\n      break;\n    case UTF32BE:\n      src.type = UTF32BE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          src.bom = 4;\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}\"`);\n        }\n      }\n      break;\n    case UTF32LE:\n      src.type = UTF32LE;\n      if (buf.length >= 4) {\n        if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {\n          throw new TypeError(`src type: \"${UTF32LE}\" specified but BOM is for \"${UTF32BE}\"`);\n        }\n        if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {\n          src.bom = 4;\n        }\n      }\n      break;\n    default:\n      throw new TypeError(`UTF32 BOM: src type \"${src.type}\" unrecognized`);\n  }\n};\n// Validates the source encoding type and matching data.\n// If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.\n// - For type STRING, data must be a JavaScript string.\n// - For type BASE64:*, data may be a string or Buffer.\n// - For all other types, data must be a Buffer.\n// - The BASE64: prefix is not allowed for type STRING.\nconst validateSrc = function validateSrc(type, data) {\n  function getType(typeArg) {\n    const ret = {\n      type: '',\n      base64: false,\n    };\n    const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;\n    const result = rx.exec(typeArg);\n    if (result) {\n      if (result[2]) {\n        ret.type = result[2].toUpperCase();\n      }\n      if (result[1]) {\n        ret.base64 = true;\n      }\n    }\n    return ret;\n  }\n  const ret = getType(type.toUpperCase());\n  if (ret.base64) {\n    /* handle base 64 */\n    if (ret.type === STRING) {\n      throw new TypeError(`type: \"${type} \"BASE64:\" prefix not allowed with type ${STRING}`);\n    }\n    if (Buffer.isBuffer(data)) {\n      ret.data = trans.base64.decode(data);\n    } else if (typeof data === 'string') {\n      const buf = Buffer.from(data, 'ascii');\n      ret.data = trans.base64.decode(buf);\n    } else {\n      throw new TypeError(`type: \"${type} unrecognized data type: typeof(data): ${typeof data}`);\n    }\n  } else {\n    ret.data = data;\n  }\n  switch (ret.type) {\n    case UTF8:\n      bom8(ret);\n      break;\n    case UTF16:\n    case UTF16BE:\n    case UTF16LE:\n      bom16(ret);\n      break;\n    case UTF32:\n    case UTF32BE:\n    case UTF32LE:\n      bom32(ret);\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case STRING:\n    case ESCAPED:\n      break;\n    default:\n      throw new TypeError(`type: \"${type}\" not recognized`);\n  }\n  if (ret.type === STRING) {\n    if (typeof ret.data !== 'string') {\n      throw new TypeError(`type: \"${type}\" but data is not a string`);\n    }\n  } else if (!Buffer.isBuffer(ret.data)) {\n    throw new TypeError(`type: \"${type}\" but data is not a Buffer`);\n  }\n  return ret;\n};\n// Disassembles and validates the destination type.\n// `chars` must be an Array of integers.\n// The :BASE64 suffix is not allowed for type STRING.\nconst validateDst = function validateDst(type, chars) {\n  function getType(typeArg) {\n    let fix;\n    let rem;\n    const ret = {\n      crlf: false,\n      lf: false,\n      base64: false,\n      type: '',\n    };\n    /* prefix, if any */\n    const TRUE = true;\n    while (TRUE) {\n      rem = typeArg;\n      fix = typeArg.slice(0, 5);\n      if (fix === 'CRLF:') {\n        ret.crlf = true;\n        rem = typeArg.slice(5);\n        break;\n      }\n      fix = typeArg.slice(0, 3);\n      if (fix === 'LF:') {\n        ret.lf = true;\n        rem = typeArg.slice(3);\n        break;\n      }\n      break;\n    }\n    /* suffix, if any */\n    fix = rem.split(':');\n    if (fix.length === 1) {\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    } else if (fix.length === 2 && fix[1] === 'BASE64') {\n      ret.base64 = true;\n      // eslint-disable-next-line prefer-destructuring\n      ret.type = fix[0];\n    }\n    return ret;\n  }\n  if (!Array.isArray(chars)) {\n    throw new TypeError(`dst chars: not array: \"${typeof chars}`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`dst type: not string: \"${typeof type}`);\n  }\n  const ret = getType(type.toUpperCase());\n  switch (ret.type) {\n    case UTF8:\n    case UTF16BE:\n    case UTF16LE:\n    case UTF32BE:\n    case UTF32LE:\n    case UINT7:\n    case UINT8:\n    case UINT16LE:\n    case UINT16BE:\n    case UINT32LE:\n    case UINT32BE:\n    case ESCAPED:\n      break;\n    case STRING:\n      if (ret.base64) {\n        throw new TypeError(`\":BASE64\" suffix not allowed with type ${STRING}`);\n      }\n      break;\n    case ASCII:\n      ret.type = UINT7;\n      break;\n    case BINARY:\n      ret.type = UINT8;\n      break;\n    case UTF16:\n      ret.type = UTF16BE;\n      break;\n    case UTF32:\n      ret.type = UTF32BE;\n      break;\n    case UINT16:\n      ret.type = UINT16BE;\n      break;\n    case UINT32:\n      ret.type = UINT32BE;\n      break;\n    default:\n      throw new TypeError(`dst type unrecognized: \"${type}\" : must have form [crlf:|lf:]type[:base64]`);\n  }\n  return ret;\n};\n// Select and call the requested encoding function.\nconst encode = function encode(type, chars) {\n  switch (type) {\n    case UTF8:\n      return trans.utf8.encode(chars);\n    case UTF16BE:\n      return trans.utf16be.encode(chars);\n    case UTF16LE:\n      return trans.utf16le.encode(chars);\n    case UTF32BE:\n      return trans.utf32be.encode(chars);\n    case UTF32LE:\n      return trans.utf32le.encode(chars);\n    case UINT7:\n      return trans.uint7.encode(chars);\n    case UINT8:\n      return trans.uint8.encode(chars);\n    case UINT16BE:\n      return trans.uint16be.encode(chars);\n    case UINT16LE:\n      return trans.uint16le.encode(chars);\n    case UINT32BE:\n      return trans.uint32be.encode(chars);\n    case UINT32LE:\n      return trans.uint32le.encode(chars);\n    case STRING:\n      return trans.string.encode(chars);\n    case ESCAPED:\n      return trans.escaped.encode(chars);\n    default:\n      throw new TypeError(`encode type \"${type}\" not recognized`);\n  }\n};\n// Select and call the requested decoding function.\n// `src` contains BOM information as well as the source type and data.\nconst decode = function decode(src) {\n  switch (src.type) {\n    case UTF8:\n      return trans.utf8.decode(src.data, src.bom);\n    case UTF16LE:\n      return trans.utf16le.decode(src.data, src.bom);\n    case UTF16BE:\n      return trans.utf16be.decode(src.data, src.bom);\n    case UTF32BE:\n      return trans.utf32be.decode(src.data, src.bom);\n    case UTF32LE:\n      return trans.utf32le.decode(src.data, src.bom);\n    case UINT7:\n      return trans.uint7.decode(src.data);\n    case UINT8:\n      return trans.uint8.decode(src.data);\n    case UINT16BE:\n      return trans.uint16be.decode(src.data);\n    case UINT16LE:\n      return trans.uint16le.decode(src.data);\n    case UINT32BE:\n      return trans.uint32be.decode(src.data);\n    case UINT32LE:\n      return trans.uint32le.decode(src.data);\n    case STRING:\n      return trans.string.decode(src.data);\n    case ESCAPED:\n      return trans.escaped.decode(src.data);\n    default:\n      throw new TypeError(`decode type \"${src.type}\" not recognized`);\n  }\n};\n\n// The public decoding function. Returns an array of integers.\nexports.decode = function exportsDecode(type, data) {\n  const src = validateSrc(type, data);\n  return decode(src);\n};\n// The public encoding function. Returns a Buffer-typed byte array.\nexports.encode = function exportsEncode(type, chars) {\n  let c;\n  let buf;\n  const dst = validateDst(type, chars);\n  if (dst.crlf) {\n    /* prefix with CRLF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.crlf(chars);\n    buf = encode(dst.type, c);\n  } else if (dst.lf) {\n    /* prefix with LF line end conversion, don't contaminate caller's chars array */\n    c = trans.lineEnds.lf(chars);\n    buf = encode(dst.type, c);\n  } else {\n    buf = encode(dst.type, chars);\n  }\n  if (dst.base64) {\n    /* post base 64 encoding */\n    buf = trans.base64.encode(buf);\n  }\n  return buf;\n};\n// Converts data of type `srcType` to data of type `dstType`.\n// `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.\nconst convert = function convert(srcType, srcData, dstType) {\n  return exports.encode(dstType, exports.decode(srcType, srcData));\n};\nexports.convert = convert;\n", "// This module has been developed programmatically in the `apg-lib` build process.\n// It is used to build web pages programatically on the fly without the need for <script> or <style> tags.\n\nmodule.exports = function emittcss(){\nreturn '/* This file automatically generated by jsonToless() and LESS. */\\n.apg-mono {\\n  font-family: monospace;\\n}\\n.apg-active {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-match {\\n  font-weight: bold;\\n  color: #264BFF;\\n}\\n.apg-empty {\\n  font-weight: bold;\\n  color: #0fbd0f;\\n}\\n.apg-nomatch {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-lh-match {\\n  font-weight: bold;\\n  color: #1A97BA;\\n}\\n.apg-lb-match {\\n  font-weight: bold;\\n  color: #5F1687;\\n}\\n.apg-remainder {\\n  font-weight: bold;\\n  color: #999999;\\n}\\n.apg-ctrl-char {\\n  font-weight: bolder;\\n  font-style: italic;\\n  font-size: 0.6em;\\n}\\n.apg-line-end {\\n  font-weight: bold;\\n  color: #000000;\\n}\\n.apg-error {\\n  font-weight: bold;\\n  color: #FF4000;\\n}\\n.apg-phrase {\\n  color: #000000;\\n  background-color: #8caae6;\\n}\\n.apg-empty-phrase {\\n  color: #0fbd0f;\\n}\\ntable.apg-state {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th,\\ntable.apg-state td {\\n  text-align: left;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-state th:nth-last-child(2),\\ntable.apg-state td:nth-last-child(2) {\\n  text-align: right;\\n}\\ntable.apg-state caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-stats {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats th,\\ntable.apg-stats td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-stats caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-trace th,\\ntable.apg-trace td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-trace th:last-child,\\ntable.apg-trace th:nth-last-child(2),\\ntable.apg-trace td:last-child,\\ntable.apg-trace td:nth-last-child(2) {\\n  text-align: left;\\n}\\ntable.apg-grammar {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-grammar th,\\ntable.apg-grammar td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-grammar th:last-child,\\ntable.apg-grammar td:last-child {\\n  text-align: left;\\n}\\ntable.apg-rules {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-rules th,\\ntable.apg-rules td {\\n  text-align: right;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-rules a {\\n  color: #003399 !important;\\n}\\ntable.apg-rules a:hover {\\n  color: #8caae6 !important;\\n}\\ntable.apg-attrs {\\n  font-family: monospace;\\n  margin-top: 5px;\\n  font-size: 11px;\\n  line-height: 130%;\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs caption {\\n  font-size: 125%;\\n  line-height: 130%;\\n  font-weight: bold;\\n  text-align: left;\\n}\\ntable.apg-attrs th,\\ntable.apg-attrs td {\\n  text-align: center;\\n  border: 1px solid black;\\n  border-collapse: collapse;\\n}\\ntable.apg-attrs th:nth-child(1),\\ntable.apg-attrs th:nth-child(2),\\ntable.apg-attrs th:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs td:nth-child(1),\\ntable.apg-attrs td:nth-child(2),\\ntable.apg-attrs td:nth-child(3) {\\n  text-align: right;\\n}\\ntable.apg-attrs a {\\n  color: #003399 !important;\\n}\\ntable.apg-attrs a:hover {\\n  color: #8caae6 !important;\\n}\\n';\n}\n", "/* eslint-disable func-names */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module exports a variety of utility functions that support\n// [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)\n// and the generated parser applications.\n\nconst style = require('./style');\nconst converter = require('../apg-conv-api/converter');\nconst emitCss = require('./emitcss');\nconst id = require('./identifiers');\n\nconst thisFileName = 'utilities.js: ';\n\n/* translate (implied) phrase beginning character and length to actual first and last character indexes */\n/* used by multiple phrase handling functions */\nconst getBounds = function (length, begArg, len) {\n  let end;\n  let beg = begArg;\n  const TRUE = true;\n  while (TRUE) {\n    if (length <= 0) {\n      beg = 0;\n      end = 0;\n      break;\n    }\n    if (typeof beg !== 'number') {\n      beg = 0;\n      end = length;\n      break;\n    }\n    if (beg >= length) {\n      beg = length;\n      end = length;\n      break;\n    }\n    if (typeof len !== 'number') {\n      end = length;\n      break;\n    }\n    end = beg + len;\n    if (end > length) {\n      end = length;\n      break;\n    }\n    break;\n  }\n  return {\n    beg,\n    end,\n  };\n};\n// Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.\n// - *html* - the page text in HTML format\n// - *title* - the HTML page `<title>` - defaults to `htmlToPage`.\nexports.htmlToPage = function (html, titleArg) {\n  let title;\n  if (typeof html !== 'string') {\n    throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);\n  }\n  if (typeof titleArg !== 'string') {\n    title = 'htmlToPage';\n  } else {\n    title = titleArg;\n  }\n  let page = '';\n  page += '<!DOCTYPE html>\\n';\n  page += '<html lang=\"en\">\\n';\n  page += '<head>\\n';\n  page += '<meta charset=\"utf-8\">\\n';\n  page += `<title>${title}</title>\\n`;\n  page += '<style>\\n';\n  page += emitCss();\n  page += '</style>\\n';\n  page += '</head>\\n<body>\\n';\n  page += `<p>${new Date()}</p>\\n`;\n  page += html;\n  page += '</body>\\n</html>\\n';\n  return page;\n};\n// Formats the returned object from `parser.parse()`\n// into an HTML table.\n// ```\n// return {\n//   success : sysData.success,\n//   state : sysData.state,\n//   length : charsLength,\n//   matched : sysData.phraseLength,\n//   maxMatched : maxMatched,\n//   maxTreeDepth : maxTreeDepth,\n//   nodeHits : nodeHits,\n//   inputLength : chars.length,\n//   subBegin : charsBegin,\n//   subEnd : charsEnd,\n//   subLength : charsLength\n// };\n// ```\nexports.parserResultToHtml = function (result, caption) {\n  let cap = null;\n  if (typeof caption === 'string' && caption !== '') {\n    cap = caption;\n  }\n  let success;\n  let state;\n  if (result.success === true) {\n    success = `<span class=\"${style.CLASS_MATCH}\">true</span>`;\n  } else {\n    success = `<span class=\"${style.CLASS_NOMATCH}\">false</span>`;\n  }\n  if (result.state === id.EMPTY) {\n    state = `<span class=\"${style.CLASS_EMPTY}\">EMPTY</span>`;\n  } else if (result.state === id.MATCH) {\n    state = `<span class=\"${style.CLASS_MATCH}\">MATCH</span>`;\n  } else if (result.state === id.NOMATCH) {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span>`;\n  } else {\n    state = `<span class=\"${style.CLASS_NOMATCH}\">unrecognized</span>`;\n  }\n  let html = '';\n  html += `<table class=\"${style.CLASS_STATE}\">\\n`;\n  if (cap) {\n    html += `<caption>${cap}</caption>\\n`;\n  }\n  html += '<tr><th>state item</th><th>value</th><th>description</th></tr>\\n';\n  html += `<tr><td>parser success</td><td>${success}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_MATCH}\">true</span> if the parse succeeded,\\n`;\n  html += ` <span class=\"${style.CLASS_NOMATCH}\">false</span> otherwise`;\n  html += '<br><i>NOTE: for success, entire string must be matched</i></td></tr>\\n';\n  html += `<tr><td>parser state</td><td>${state}</td>\\n`;\n  html += `<td><span class=\"${style.CLASS_EMPTY}\">EMPTY</span>, `;\n  html += `<span class=\"${style.CLASS_MATCH}\">MATCH</span> or \\n`;\n  html += `<span class=\"${style.CLASS_NOMATCH}\">NOMATCH</span></td></tr>\\n`;\n  html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\\n`;\n  html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\\n`;\n  html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\\n`;\n  html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\\n`;\n  html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\\n`;\n  html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\\n`;\n  html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\\n`;\n  html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\\n`;\n  html += '</table>\\n';\n  return html;\n};\n// Translates a sub-array of integer character codes into a string.\n// Very useful in callback functions to translate the matched phrases into strings.\nexports.charsToString = function (chars, phraseIndex, phraseLength) {\n  let beg;\n  let end;\n  if (typeof phraseIndex === 'number') {\n    if (phraseIndex >= chars.length) {\n      return '';\n    }\n    beg = phraseIndex < 0 ? 0 : phraseIndex;\n  } else {\n    beg = 0;\n  }\n  if (typeof phraseLength === 'number') {\n    if (phraseLength <= 0) {\n      return '';\n    }\n    end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;\n  } else {\n    end = chars.length;\n  }\n  if (beg < end) {\n    return converter.encode('UTF16LE', chars.slice(beg, end)).toString('utf16le');\n  }\n  return '';\n};\n// Translates a string into an array of integer character codes.\nexports.stringToChars = function (string) {\n  return converter.decode('STRING', string);\n};\n// Translates an opcode identifier into a human-readable string.\nexports.opcodeToString = function (type) {\n  let ret = 'unknown';\n  switch (type) {\n    case id.ALT:\n      ret = 'ALT';\n      break;\n    case id.CAT:\n      ret = 'CAT';\n      break;\n    case id.RNM:\n      ret = 'RNM';\n      break;\n    case id.UDT:\n      ret = 'UDT';\n      break;\n    case id.AND:\n      ret = 'AND';\n      break;\n    case id.NOT:\n      ret = 'NOT';\n      break;\n    case id.REP:\n      ret = 'REP';\n      break;\n    case id.TRG:\n      ret = 'TRG';\n      break;\n    case id.TBS:\n      ret = 'TBS';\n      break;\n    case id.TLS:\n      ret = 'TLS';\n      break;\n    case id.BKR:\n      ret = 'BKR';\n      break;\n    case id.BKA:\n      ret = 'BKA';\n      break;\n    case id.BKN:\n      ret = 'BKN';\n      break;\n    case id.ABG:\n      ret = 'ABG';\n      break;\n    case id.AEN:\n      ret = 'AEN';\n      break;\n    default:\n      throw new Error('unrecognized opcode');\n  }\n  return ret;\n};\n// Translates an state identifier into a human-readable string.\nexports.stateToString = function (state) {\n  let ret = 'unknown';\n  switch (state) {\n    case id.ACTIVE:\n      ret = 'ACTIVE';\n      break;\n    case id.MATCH:\n      ret = 'MATCH';\n      break;\n    case id.EMPTY:\n      ret = 'EMPTY';\n      break;\n    case id.NOMATCH:\n      ret = 'NOMATCH';\n      break;\n    default:\n      throw new Error('unrecognized state');\n  }\n  return ret;\n};\n// Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.\nexports.asciiChars = [\n  'NUL',\n  'SOH',\n  'STX',\n  'ETX',\n  'EOT',\n  'ENQ',\n  'ACK',\n  'BEL',\n  'BS',\n  'TAB',\n  'LF',\n  'VT',\n  'FF',\n  'CR',\n  'SO',\n  'SI',\n  'DLE',\n  'DC1',\n  'DC2',\n  'DC3',\n  'DC4',\n  'NAK',\n  'SYN',\n  'ETB',\n  'CAN',\n  'EM',\n  'SUB',\n  'ESC',\n  'FS',\n  'GS',\n  'RS',\n  'US',\n  '&nbsp;',\n  '!',\n  '&#34;',\n  '#',\n  '$',\n  '%',\n  '&#38;',\n  '&#39;',\n  '(',\n  ')',\n  '*',\n  '+',\n  ',',\n  '-',\n  '.',\n  '/',\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  ':',\n  ';',\n  '&#60;',\n  '=',\n  '&#62;',\n  '?',\n  '@',\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '[',\n  '&#92;',\n  ']',\n  '^',\n  '_',\n  '`',\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z',\n  '{',\n  '|',\n  '}',\n  '~',\n  'DEL',\n];\n// Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.\nexports.charToHex = function (char) {\n  let ch = char.toString(16).toUpperCase();\n  switch (ch.length) {\n    case 1:\n    case 3:\n    case 7:\n      ch = `0${ch}`;\n      break;\n    case 2:\n    case 6:\n      ch = `00${ch}`;\n      break;\n    case 4:\n      break;\n    case 5:\n      ch = `000${ch}`;\n      break;\n    default:\n      throw new Error('unrecognized option');\n  }\n  return ch;\n};\n// Translates a sub-array of character codes to decimal display format.\nexports.charsToDec = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += chars[bounds.beg];\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,${chars[i]}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to hexadecimal display format.\nexports.charsToHex = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\x${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\x${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\nexports.charsToHtmlEntities = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      ret += `&#x${chars[i].toString(16)};`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to Unicode display format.\nfunction isUnicode(char) {\n  if (char >= 0xd800 && char <= 0xdfff) {\n    return false;\n  }\n  if (char > 0x10ffff) {\n    return false;\n  }\n  return true;\n}\nexports.charsToUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    for (let i = bounds.beg; i < bounds.end; i += 1) {\n      if (isUnicode(chars[i])) {\n        ret += `&#${chars[i]};`;\n      } else {\n        ret += ` U+${exports.charToHex(chars[i])}`;\n      }\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to JavaScript Unicode display format (`\\uXXXX`).\nexports.charsToJsUnicode = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  if (bounds.end > bounds.beg) {\n    ret += `\\\\u${exports.charToHex(chars[bounds.beg])}`;\n    for (let i = bounds.beg + 1; i < bounds.end; i += 1) {\n      ret += `,\\\\u${exports.charToHex(chars[i])}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to printing ASCII character display format.\nexports.charsToAscii = function (chars, beg, len) {\n  let ret = '';\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);\n  }\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    const char = chars[i];\n    if (char >= 32 && char <= 126) {\n      ret += String.fromCharCode(char);\n    } else {\n      ret += `\\\\x${exports.charToHex(char)}`;\n    }\n  }\n  return ret;\n};\n// Translates a sub-array of character codes to HTML display format.\nexports.charsToAsciiHtml = function (chars, beg, len) {\n  if (!Array.isArray(chars)) {\n    throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);\n  }\n  let html = '';\n  let char;\n  const bounds = getBounds(chars.length, beg, len);\n  for (let i = bounds.beg; i < bounds.end; i += 1) {\n    char = chars[i];\n    if (char < 32 || char === 127) {\n      /* control characters */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">${exports.asciiChars[char]}</span>`;\n    } else if (char > 127) {\n      /* non-ASCII */\n      html += `<span class=\"${style.CLASS_CTRLCHAR}\">U+${exports.charToHex(char)}</span>`;\n    } else {\n      /* printing ASCII, 32 <= char <= 126 */\n      html += exports.asciiChars[char];\n    }\n  }\n  return html;\n};\n// Translates a JavaScript string to HTML display format.\nexports.stringToAsciiHtml = function (str) {\n  const chars = converter.decode('STRING', str);\n  return this.charsToAsciiHtml(chars);\n};\n", "/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-syntax */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).\n// The AST can be thought of as a subset of the full parse tree.\n// Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.\n// It is built as the parser successfully matches phrases to the rule names\n// (`RNM` operators) and `UDT`s as it parses an input string.\n// The user controls which `RNM` or `UDT` names to keep on the AST.\n// The user can also associate callback functions with some or all of the retained\n// AST nodes to be used to translate the node phrases. That is, associate semantic\n// actions to the matched phrases.\n// Translating the AST rather that attempting to apply semantic actions during\n// the parsing process, has the advantage that there is no backtracking and that the phrases\n// are known while traversing down tree as will as up.\n//\n// Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:\n// ```\n// ast.callbacks[\"rulename\"] = true; (all nodes default to false)\n// ```\n// To associate a callback function with a node:\n// ```\n// ast.callbacks[\"rulename\"] = fn\n// ```\n// `rulename` is any `RNM` or `UDT` name defined by the associated grammar\n// and `fn` is a user-written callback function.\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,\n// define the nodes and callback functions and attach it to a parser.)\nmodule.exports = function exportsAst() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n\n  const thisFileName = 'ast.js: ';\n  const that = this;\n  let rules = null;\n  let udts = null;\n  let chars = null;\n  let nodeCount = 0;\n  const nodesDefined = [];\n  const nodeCallbacks = [];\n  const stack = [];\n  const records = [];\n  this.callbacks = [];\n  this.astObject = 'astObject';\n  /* called by the parser to initialize the AST with the rules, UDTs and the input characters */\n  this.init = function init(rulesIn, udtsIn, charsIn) {\n    stack.length = 0;\n    records.length = 0;\n    nodesDefined.length = 0;\n    nodeCount = 0;\n    rules = rulesIn;\n    udts = udtsIn;\n    chars = charsIn;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    nodeCount = rules.length + udts.length;\n    for (i = 0; i < nodeCount; i += 1) {\n      nodesDefined[i] = false;\n      nodeCallbacks[i] = null;\n    }\n    for (const index in that.callbacks) {\n      const lower = index.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);\n      }\n      if (typeof that.callbacks[index] === 'function') {\n        nodesDefined[i] = true;\n        nodeCallbacks[i] = that.callbacks[index];\n      }\n      if (that.callbacks[index] === true) {\n        nodesDefined[i] = true;\n      }\n    }\n  };\n  /* AST node definitions - called by the parser's `RNM` operator */\n  this.ruleDefined = function ruleDefined(index) {\n    return nodesDefined[index] !== false;\n  };\n  /* AST node definitions - called by the parser's `UDT` operator */\n  this.udtDefined = function udtDefined(index) {\n    return nodesDefined[rules.length + index] !== false;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the downward traversal of the node */\n  this.down = function down(callbackIndex, name) {\n    const thisIndex = records.length;\n    stack.push(thisIndex);\n    records.push({\n      name,\n      thisIndex,\n      thatIndex: null,\n      state: id.SEM_PRE,\n      callbackIndex,\n      phraseIndex: null,\n      phraseLength: null,\n      stack: stack.length,\n    });\n    return thisIndex;\n  };\n  /* called by the parser's `RNM` & `UDT` operators */\n  /* builds a record for the upward traversal of the node */\n  this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {\n    const thisIndex = records.length;\n    const thatIndex = stack.pop();\n    records.push({\n      name,\n      thisIndex,\n      thatIndex,\n      state: id.SEM_POST,\n      callbackIndex,\n      phraseIndex,\n      phraseLength,\n      stack: stack.length,\n    });\n    records[thatIndex].thatIndex = thisIndex;\n    records[thatIndex].phraseIndex = phraseIndex;\n    records[thatIndex].phraseLength = phraseLength;\n    return thisIndex;\n  };\n  // Called by the user to translate the AST.\n  // Translate means to associate or apply some semantic action to the\n  // phrases that were syntactically matched to the AST nodes according\n  // to the defining grammar.\n  // ```\n  // data - optional user-defined data\n  //        passed to the callback functions by the translator\n  // ```\n  this.translate = function translate(data) {\n    let ret;\n    let callback;\n    let record;\n    for (let i = 0; i < records.length; i += 1) {\n      record = records[i];\n      callback = nodeCallbacks[record.callbackIndex];\n      if (record.state === id.SEM_PRE) {\n        if (callback !== null) {\n          ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);\n          if (ret === id.SEM_SKIP) {\n            i = record.thatIndex;\n          }\n        }\n      } else if (callback !== null) {\n        callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);\n      }\n    }\n  };\n  /* called by the parser to reset the length of the records array */\n  /* necessary on backtracking */\n  this.setLength = function setLength(length) {\n    records.length = length;\n    if (length > 0) {\n      stack.length = records[length - 1].stack;\n    } else {\n      stack.length = 0;\n    }\n  };\n  /* called by the parser to get the length of the records array */\n  this.getLength = function getLength() {\n    return records.length;\n  };\n  /* helper for XML display */\n  function indent(n) {\n    let ret = '';\n    for (let i = 0; i < n; i += 1) {\n      ret += ' ';\n    }\n    return ret;\n  }\n  // Generate an `XML` version of the AST.\n  // Useful if you want to use a special or favorite XML parser to translate the\n  // AST.\n  // ```\n  // mode - the display mode of the captured phrases\n  //      - default mode is \"ascii\"\n  //      - can be: \"ascii\"\n  //                \"decimal\"\n  //                \"hexadecimal\"\n  //                \"unicode\"\n  // ```\n  this.toXml = function toSml(modeArg) {\n    let display = utils.charsToDec;\n    let caption = 'decimal integer character codes';\n    if (typeof modeArg === 'string' && modeArg.length >= 3) {\n      const mode = modeArg.slice(0, 3).toLowerCase();\n      if (mode === 'asc') {\n        display = utils.charsToAscii;\n        caption = 'ASCII for printing characters, hex for non-printing';\n      } else if (mode === 'hex') {\n        display = utils.charsToHex;\n        caption = 'hexadecimal integer character codes';\n      } else if (mode === 'uni') {\n        display = utils.charsToUnicode;\n        caption = 'Unicode UTF-32 integer character codes';\n      }\n    }\n    let xml = '';\n    let depth = 0;\n    xml += '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n';\n    xml += `<root nodes=\"${records.length / 2}\" characters=\"${chars.length}\">\\n`;\n    xml += `<!-- input string, ${caption} -->\\n`;\n    xml += indent(depth + 2);\n    xml += display(chars);\n    xml += '\\n';\n    records.forEach((rec) => {\n      if (rec.state === id.SEM_PRE) {\n        depth += 1;\n        xml += indent(depth);\n        xml += `<node name=\"${rec.name}\" index=\"${rec.phraseIndex}\" length=\"${rec.phraseLength}\">\\n`;\n        xml += indent(depth + 2);\n        xml += display(chars, rec.phraseIndex, rec.phraseLength);\n        xml += '\\n';\n      } else {\n        xml += indent(depth);\n        xml += `</node><!-- name=\"${rec.name}\" -->\\n`;\n        depth -= 1;\n      }\n    });\n\n    xml += '</root>\\n';\n    return xml;\n  };\n  /* generate a JavaScript object version of the AST */\n  /* for the phrase-matching engine apg-exp */\n  this.phrases = function phrases() {\n    const obj = {};\n    let i;\n    let record;\n    for (i = 0; i < records.length; i += 1) {\n      record = records[i];\n      if (record.state === id.SEM_PRE) {\n        if (!Array.isArray(obj[record.name])) {\n          obj[record.name] = [];\n        }\n        obj[record.name].push({\n          index: record.phraseIndex,\n          length: record.phraseLength,\n        });\n      }\n    }\n    return obj;\n  };\n};\n", "/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module acts as a \"circular buffer\". It is used to keep track\n// only the last N records in an array of records. If more than N records\n// are saved, each additional record overwrites the previously oldest record.\n// This module deals only with the record indexes and does not save\n// any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of\n// trace records saved.\nmodule.exports = function exportsCircularBuffer() {\n  'use strict;';\n\n  const thisFileName = 'circular-buffer.js: ';\n  let itemIndex = -1;\n  let maxListSize = 0;\n  // Initialize buffer.<br>\n  // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.\n  this.init = function init(size) {\n    if (typeof size !== 'number' || size <= 0) {\n      throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);\n    }\n    maxListSize = Math.ceil(size);\n    itemIndex = -1;\n  };\n  // Call this to increment the number of records collected.<br>\n  // Returns the array index number to store the next record in.\n  this.increment = function increment() {\n    itemIndex += 1;\n    return (itemIndex + maxListSize) % maxListSize;\n  };\n  // Returns `maxListSize` - the maximum number of records to keep in the buffer.\n  this.maxSize = function maxSize() {\n    return maxListSize;\n  };\n  // Returns the highest number of items saved.<br>\n  // (The number of items is the actual number of records processed\n  // even though only `maxListSize` records are actually retained.)\n  this.items = function items() {\n    return itemIndex + 1;\n  };\n  // Returns the record number associated with this item index.\n  this.getListIndex = function getListIndex(item) {\n    if (itemIndex === -1) {\n      return -1;\n    }\n    if (item < 0 || item > itemIndex) {\n      return -1;\n    }\n    if (itemIndex - item >= maxListSize) {\n      return -1;\n    }\n    return (item + maxListSize) % maxListSize;\n  };\n  // The iterator over the circular buffer.\n  // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`\n  // where `listIndex` is the saved record index and `itemIndex` is the actual item index.\n  this.forEach = function forEach(fn) {\n    if (itemIndex === -1) {\n      /* no records have been collected */\n      return;\n    }\n    if (itemIndex < maxListSize) {\n      /* fewer than maxListSize records have been collected - number of items = number of records */\n      for (let i = 0; i <= itemIndex; i += 1) {\n        fn(i, i);\n      }\n      return;\n    }\n    /* start with the oldest record saved and finish with the most recent record saved */\n    for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {\n      const listIndex = (i + maxListSize) % maxListSize;\n      fn(listIndex, i);\n    }\n  };\n};\n", "/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable new-cap */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This is the primary object of `apg-lib`. Calling its `parse()` member function\n// walks the parse tree of opcodes, matching phrases from the input string as it goes.\n// The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.\nmodule.exports = function parser() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n\n  const thisFileName = 'parser.js: ';\n  const thisThis = this;\n  let opExecute;\n  this.ast = null;\n  this.stats = null;\n  this.trace = null;\n  this.callbacks = [];\n  let opcodes = null;\n  let chars = null;\n  let charsBegin;\n  let charsLength;\n  let charsEnd;\n  let lookAround;\n  let treeDepth = 0;\n  let maxTreeDepth = 0;\n  let nodeHits = 0;\n  let ruleCallbacks = null;\n  let udtCallbacks = null;\n  let rules = null;\n  let udts = null;\n  let syntaxData = null;\n  let maxMatched = 0;\n  let limitTreeDepth = Infinity;\n  let limitNodeHits = Infinity;\n  // Evaluates any given rule. This can be called from the syntax callback\n  // functions to evaluate any rule in the grammar's rule list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateRule(): `;\n    if (ruleIndex >= rules.length) {\n      throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.RNM,\n      index: ruleIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  // Evaluates any given UDT. This can be called from the syntax callback\n  // functions to evaluate any UDT in the grammar's UDT list. Great caution\n  // should be used. Use of this function will alter the language that the\n  // parser accepts.\n  const evaluateUdt = function (udtIndex, phraseIndex, sysData) {\n    const functionName = `${thisFileName}evaluateUdt(): `;\n    if (udtIndex >= udts.length) {\n      throw new Error(`${functionName}udt index: ${udtIndex} out of range`);\n    }\n    if (phraseIndex >= charsEnd) {\n      throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);\n    }\n    const { length } = opcodes;\n    opcodes.push({\n      type: id.UDT,\n      empty: udts[udtIndex].empty,\n      index: udtIndex,\n    });\n    opExecute(length, phraseIndex, sysData);\n    opcodes.pop();\n  };\n  /* Clears this object of any/all data that has been initialized or added to it. */\n  /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */\n  const clear = function () {\n    treeDepth = 0;\n    maxTreeDepth = 0;\n    nodeHits = 0;\n    maxMatched = 0;\n    lookAround = [\n      {\n        lookAround: id.LOOKAROUND_NONE,\n        anchor: 0,\n        charsEnd: 0,\n        charsLength: 0,\n      },\n    ];\n    rules = null;\n    udts = null;\n    chars = null;\n    charsBegin = 0;\n    charsLength = 0;\n    charsEnd = 0;\n    ruleCallbacks = null;\n    udtCallbacks = null;\n    syntaxData = null;\n    opcodes = null;\n  };\n  /* object for maintaining a stack of back reference frames */\n  const backRef = function () {\n    const stack = [];\n    const init = function () {\n      const obj = {};\n      rules.forEach((rule) => {\n        if (rule.isBkr) {\n          obj[rule.lower] = null;\n        }\n      });\n      if (udts.length > 0) {\n        udts.forEach((udt) => {\n          if (udt.isBkr) {\n            obj[udt.lower] = null;\n          }\n        });\n      }\n      stack.push(obj);\n    };\n    const copy = function () {\n      const top = stack[stack.length - 1];\n      const obj = {};\n      /* // eslint-disable-next-line no-restricted-syntax */\n      for (const name in top) {\n        obj[name] = top[name];\n      }\n      return obj;\n    };\n    this.push = function push() {\n      stack.push(copy());\n    };\n    this.pop = function pop(lengthArg) {\n      let length = lengthArg;\n      if (!length) {\n        length = stack.length - 1;\n      }\n      if (length < 1 || length > stack.length) {\n        throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);\n      }\n      stack.length = length;\n      return stack[stack.length - 1];\n    };\n    this.length = function length() {\n      return stack.length;\n    };\n    this.savePhrase = function savePhrase(name, index, length) {\n      stack[stack.length - 1][name] = {\n        phraseIndex: index,\n        phraseLength: length,\n      };\n    };\n    this.getPhrase = function (name) {\n      return stack[stack.length - 1][name];\n    };\n    /* constructor */\n    init();\n  };\n  // The system data structure that relays system information to and from the rule and UDT callback functions.\n  // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in\n  // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))\n  // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY\n  // - *lookaround* - the top of the stack holds the current look around state,\n  // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,\n  // - *uFrame* - the \"universal\" back reference frame.\n  // Holds the last matched phrase for each of the back referenced rules and UDTs.\n  // - *pFrame* - the stack of \"parent\" back reference frames.\n  // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.\n  // - *evaluateRule* - a reference to this object's `evaluateRule()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.\n  // Can be called from a callback function (use with extreme caution!)\n  const systemData = function systemData() {\n    const thisData = this;\n    this.state = id.ACTIVE;\n    this.phraseLength = 0;\n    this.ruleIndex = 0;\n    this.udtIndex = 0;\n    this.lookAround = lookAround[lookAround.length - 1];\n    this.uFrame = new backRef();\n    this.pFrame = new backRef();\n    this.evaluateRule = evaluateRule;\n    this.evaluateUdt = evaluateUdt;\n    /* refresh the parser state for the next operation */\n    this.refresh = function refresh() {\n      thisData.state = id.ACTIVE;\n      thisData.phraseLength = 0;\n      thisData.lookAround = lookAround[lookAround.length - 1];\n    };\n  };\n  /* some look around helper functions */\n  const lookAroundValue = function lookAroundValue() {\n    return lookAround[lookAround.length - 1];\n  };\n  /* return true if parser is in look around (ahead or behind) state */\n  const inLookAround = function inLookAround() {\n    return lookAround.length > 1;\n  };\n  /* return true if parser is in look behind state */\n  const inLookBehind = function () {\n    return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;\n  };\n  /* called by parse() to initialize the AST object, if one has been defined */\n  const initializeAst = function () {\n    const functionName = `${thisFileName}initializeAst(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.ast === undefined) {\n        thisThis.ast = null;\n        break;\n      }\n      if (thisThis.ast === null) {\n        break;\n      }\n      if (thisThis.ast.astObject !== 'astObject') {\n        throw new Error(`${functionName}ast object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.ast !== null) {\n      thisThis.ast.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the trace object, if one has been defined */\n  const initializeTrace = function () {\n    const functionName = `${thisFileName}initializeTrace(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.trace === undefined) {\n        thisThis.trace = null;\n        break;\n      }\n      if (thisThis.trace === null) {\n        break;\n      }\n      if (thisThis.trace.traceObject !== 'traceObject') {\n        throw new Error(`${functionName}trace object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.trace !== null) {\n      thisThis.trace.init(rules, udts, chars);\n    }\n  };\n  /* called by parse() to initialize the statistics object, if one has been defined */\n  const initializeStats = function () {\n    const functionName = `${thisFileName}initializeStats(): `;\n    const TRUE = true;\n    while (TRUE) {\n      if (thisThis.stats === undefined) {\n        thisThis.stats = null;\n        break;\n      }\n      if (thisThis.stats === null) {\n        break;\n      }\n      if (thisThis.stats.statsObject !== 'statsObject') {\n        throw new Error(`${functionName}stats object not recognized`);\n      }\n      break;\n    }\n    if (thisThis.stats !== null) {\n      thisThis.stats.init(rules, udts);\n    }\n  };\n  /* called by parse() to initialize the rules & udts from the grammar object */\n  /* (the grammar object generated previously by apg) */\n  const initializeGrammar = function (grammar) {\n    const functionName = `${thisFileName}initializeGrammar(): `;\n    if (!grammar) {\n      throw new Error(`${functionName}grammar object undefined`);\n    }\n    if (grammar.grammarObject !== 'grammarObject') {\n      throw new Error(`${functionName}bad grammar object`);\n    }\n    rules = grammar.rules;\n    udts = grammar.udts;\n  };\n  /* called by parse() to initialize the start rule */\n  const initializeStartRule = function (startRule) {\n    const functionName = `${thisFileName}initializeStartRule(): `;\n    let start = null;\n    if (typeof startRule === 'number') {\n      if (startRule >= rules.length) {\n        throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);\n      }\n      start = startRule;\n    } else if (typeof startRule === 'string') {\n      const lower = startRule.toLowerCase();\n      for (let i = 0; i < rules.length; i += 1) {\n        if (lower === rules[i].lower) {\n          start = rules[i].index;\n          break;\n        }\n      }\n      if (start === null) {\n        throw new Error(`${functionName}start rule name '${startRule}' not recognized`);\n      }\n    } else {\n      throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);\n    }\n    return start;\n  };\n  /* called by parse() to initialize the array of characters codes representing the input string */\n  const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {\n    const functionName = `${thisFileName}initializeInputChars(): `;\n    /* varify and normalize input */\n    let input = inputArg;\n    let beg = begArg;\n    let len = lenArg;\n    if (input === undefined) {\n      throw new Error(`${functionName}input string is undefined`);\n    }\n    if (input === null) {\n      throw new Error(`${functionName}input string is null`);\n    }\n    if (typeof input === 'string') {\n      input = utils.stringToChars(input);\n    } else if (!Array.isArray(input)) {\n      throw new Error(`${functionName}input string is not a string or array`);\n    }\n    if (input.length > 0) {\n      if (typeof input[0] !== 'number') {\n        throw new Error(`${functionName}input string not an array of integers`);\n      }\n    }\n    /* verify and normalize beginning index */\n    if (typeof beg !== 'number') {\n      beg = 0;\n    } else {\n      beg = Math.floor(beg);\n      if (beg < 0 || beg > input.length) {\n        throw new Error(`${functionName}input beginning index out of range: ${beg}`);\n      }\n    }\n    /* verify and normalize input length */\n    if (typeof len !== 'number') {\n      len = input.length - beg;\n    } else {\n      len = Math.floor(len);\n      if (len < 0 || len > input.length - beg) {\n        throw new Error(`${functionName}input length out of range: ${len}`);\n      }\n    }\n    chars = input;\n    charsBegin = beg;\n    charsLength = len;\n    charsEnd = charsBegin + charsLength;\n  };\n  /* called by parse() to initialize the user-written, syntax callback functions, if any */\n  const initializeCallbacks = function () {\n    const functionName = `${thisFileName}initializeCallbacks(): `;\n    let i;\n    ruleCallbacks = [];\n    udtCallbacks = [];\n    for (i = 0; i < rules.length; i += 1) {\n      ruleCallbacks[i] = null;\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      udtCallbacks[i] = null;\n    }\n    let func;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    for (const index in thisThis.callbacks) {\n      i = list.indexOf(index.toLowerCase());\n      if (i < 0) {\n        throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);\n      }\n      func = thisThis.callbacks[index];\n      if (!func) {\n        func = null;\n      }\n      if (typeof func === 'function' || func === null) {\n        if (i < rules.length) {\n          ruleCallbacks[i] = func;\n        } else {\n          udtCallbacks[i - rules.length] = func;\n        }\n      } else {\n        throw new Error(\n          `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`\n        );\n      }\n    }\n    /* make sure all udts have been defined - the parser can't work without them */\n    for (i = 0; i < udts.length; i += 1) {\n      if (udtCallbacks[i] === null) {\n        throw new Error(\n          `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`\n        );\n      }\n    }\n  };\n  // Set the maximum parse tree depth allowed. The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // depth - max allowed parse tree depth. An exception is thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxTreeDepth = function (depth) {\n    if (typeof depth !== 'number') {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n    limitTreeDepth = Math.floor(depth);\n    if (limitTreeDepth <= 0) {\n      throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);\n    }\n  };\n  // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.\n  // The default is `Infinity`.\n  // A limit is not normally needed, but can be used to protect against an\n  // exponentual or \"catastrophically backtracking\" grammar.\n  // <ul>\n  // <li>\n  // hits - maximum number of node hits or parser unit steps allowed.\n  // An exception thrown if exceeded.\n  // </li>\n  // </ul>\n  this.setMaxNodeHits = function (hits) {\n    if (typeof hits !== 'number') {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n    limitNodeHits = Math.floor(hits);\n    if (limitNodeHits <= 0) {\n      throw new Error(`parser: max node hits must be integer > 0: ${hits}`);\n    }\n  };\n  /* the main parser function */\n  const privateParse = function (grammar, startRuleArg, callbackData) {\n    let success;\n    const functionName = `${thisFileName}parse(): `;\n    initializeGrammar(grammar);\n    const startRule = initializeStartRule(startRuleArg);\n    initializeCallbacks();\n    initializeTrace();\n    initializeStats();\n    initializeAst();\n    const sysData = new systemData();\n    if (!(callbackData === undefined || callbackData === null)) {\n      syntaxData = callbackData;\n    }\n    /* create a dummy opcode for the start rule */\n    opcodes = [\n      {\n        type: id.RNM,\n        index: startRule,\n      },\n    ];\n    /* execute the start rule */\n    opExecute(0, charsBegin, sysData);\n    opcodes = null;\n    /* test and return the sysData */\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${functionName}final state should never be 'ACTIVE'`);\n      case id.NOMATCH:\n        success = false;\n        break;\n      case id.EMPTY:\n      case id.MATCH:\n        if (sysData.phraseLength === charsLength) {\n          success = true;\n        } else {\n          success = false;\n        }\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    return {\n      success,\n      state: sysData.state,\n      length: charsLength,\n      matched: sysData.phraseLength,\n      maxMatched,\n      maxTreeDepth,\n      nodeHits,\n      inputLength: chars.length,\n      subBegin: charsBegin,\n      subEnd: charsEnd,\n      subLength: charsLength,\n    };\n  };\n\n  // This form allows parsing of a sub-string of the full input string.\n  // <ul>\n  // <li>*inputIndex* - index of the first character in the sub-string</li>\n  // <li>*inputLength* - length of the sub-string</li>\n  // </ul>\n  // All other parameters as for the above function `parse()`.\n  this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {\n    clear();\n    initializeInputChars(inputChars, inputIndex, inputLength);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // This is the main function, called to parse an input string.\n  // <ul>\n  // <li>*grammar* - an instantiated grammar object - the output of `apg` for a\n  // specific SABNF grammar</li>\n  // <li>*startRule* - the rule name or rule index to be used as the root of the\n  // parse tree. This is usually the first rule, index = 0, of the grammar\n  // but can be any rule defined in the above grammar object.</li>\n  // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the\n  // string.</li>\n  // <li>*callbackData* - user-defined data object to be passed to the user's\n  // callback functions.\n  // This is not used by the parser in any way, merely passed on to the user.\n  // May be `null` or omitted.</li>\n  // </ul>\n  this.parse = function parse(grammar, startRule, inputChars, callbackData) {\n    clear();\n    initializeInputChars(inputChars, 0, inputChars.length);\n    return privateParse(grammar, startRule, callbackData);\n  };\n  // The `ALT` operator.<br>\n  // Executes its child nodes, from left to right, until it finds a match.\n  // Fails if *all* of its child nodes fail.\n  const opALT = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], phraseIndex, sysData);\n      if (sysData.state !== id.NOMATCH) {\n        break;\n      }\n    }\n  };\n  // The `CAT` operator.<br>\n  // Executes all of its child nodes, from left to right,\n  // concatenating the matched phrases.\n  // Fails if *any* child nodes fail.\n  const opCAT = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catPhrase;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catPhrase = 0;\n    for (let i = 0; i < op.children.length; i += 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      } else {\n        catCharIndex += sysData.phraseLength;\n        catPhrase += sysData.phraseLength;\n      }\n    }\n    if (success) {\n      sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The `REP` operator.<br>\n  // Repeatedly executes its single child node,\n  // concatenating each of the matched phrases found.\n  // The number of repetitions executed and its final sysData depends\n  // on its `min` & `max` repetition values.\n  const opREP = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    if (op.max === 0) {\n      // this is an empty-string acceptor\n      // deprecated: use the TLS empty string operator, \"\", instead\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex >= charsEnd) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex += sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      /* reset the back referencing frames on failure */\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get them right\n  // but `RNM` fails if not.\n  const validateRnmCallbackResult = function (rule, sysData, charsLeft, down) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        if (down !== true) {\n          throw new Error(\n            `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`\n          );\n        }\n        break;\n      case id.EMPTY:\n        sysData.phraseLength = 0;\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          sysData.state = id.EMPTY;\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `RNM` operator.<br>\n  // This operator will acts as a root node for a parse tree branch below and\n  // returns the matched phrase to its parent.\n  // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.\n  // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.\n  // See [`ast.js`](./ast.html) for usage.\n  const opRNM = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astDefined;\n    let savedOpcodes;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const rule = rules[op.index];\n    const callback = ruleCallbacks[rule.index];\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back references */\n      astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);\n      if (astDefined) {\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(op.index, rules[op.index].name);\n      }\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    if (callback === null) {\n      /* no callback - just execute the rule */\n      savedOpcodes = opcodes;\n      opcodes = rule.opcodes;\n      opExecute(0, phraseIndex, sysData);\n      opcodes = savedOpcodes;\n    } else {\n      /* call user's callback */\n      const charsLeft = charsEnd - phraseIndex;\n      sysData.ruleIndex = rule.index;\n      callback(sysData, chars, phraseIndex, syntaxData);\n      validateRnmCallbackResult(rule, sysData, charsLeft, true);\n      if (sysData.state === id.ACTIVE) {\n        savedOpcodes = opcodes;\n        opcodes = rule.opcodes;\n        opExecute(0, phraseIndex, sysData);\n        opcodes = savedOpcodes;\n        sysData.ruleIndex = rule.index;\n        callback(sysData, chars, phraseIndex, syntaxData);\n        validateRnmCallbackResult(rule, sysData, charsLeft, false);\n      } /* implied else clause: just accept the callback sysData - RNM acting as UDT */\n    }\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (rule.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // Validate the callback function's returned sysData values.\n  // It's the user's responsibility to get it right but `UDT` fails if not.\n  const validateUdtCallbackResult = function (udt, sysData, charsLeft) {\n    if (sysData.phraseLength > charsLeft) {\n      let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;\n      str += `sysData.phraseLength: ${sysData.phraseLength}`;\n      str += ` must be <= remaining chars: ${charsLeft}`;\n      throw new Error(str);\n    }\n    switch (sysData.state) {\n      case id.ACTIVE:\n        throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);\n      case id.EMPTY:\n        if (udt.empty === false) {\n          throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n        } else {\n          sysData.phraseLength = 0;\n        }\n        break;\n      case id.MATCH:\n        if (sysData.phraseLength === 0) {\n          if (udt.empty === false) {\n            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);\n          } else {\n            sysData.state = id.EMPTY;\n          }\n        }\n        break;\n      case id.NOMATCH:\n        sysData.phraseLength = 0;\n        break;\n      default:\n        throw new Error(\n          `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`\n        );\n    }\n  };\n  // The `UDT` operator.<br>\n  // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`\n  // and back referencing.\n  // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules\n  // for `AST` nodes and back referencing.\n  // See [`ast.js`](./ast.html) for usage.\n  const opUDT = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let astIndex;\n    let astDefined;\n    let ulen;\n    let plen;\n    let saveFrame;\n    const op = opcodes[opIndex];\n    const udt = udts[op.index];\n    sysData.UdtIndex = udt.index;\n\n    const notLookAround = !inLookAround();\n    /* ignore AST and back references in lookaround */\n    if (notLookAround) {\n      /* begin AST and back reference */\n      astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);\n      if (astDefined) {\n        astIndex = rules.length + op.index;\n        astLength = thisThis.ast.getLength();\n        thisThis.ast.down(astIndex, udt.name);\n      }\n      /* NOTE: push and pop of the back reference frame is normally not necessary */\n      /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */\n      ulen = sysData.uFrame.length();\n      plen = sysData.pFrame.length();\n      sysData.uFrame.push();\n      sysData.pFrame.push();\n      saveFrame = sysData.pFrame;\n      sysData.pFrame = new backRef();\n    }\n    /* call the UDT */\n    const charsLeft = charsEnd - phraseIndex;\n    udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);\n    validateUdtCallbackResult(udt, sysData, charsLeft);\n    if (notLookAround) {\n      /* end AST */\n      if (astDefined) {\n        if (sysData.state === id.NOMATCH) {\n          thisThis.ast.setLength(astLength);\n        } else {\n          thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);\n        }\n      }\n      /* end back reference */\n      sysData.pFrame = saveFrame;\n      if (sysData.state === id.NOMATCH) {\n        sysData.uFrame.pop(ulen);\n        sysData.pFrame.pop(plen);\n      } else if (udt.isBkr) {\n        /* save phrase on both the parent and universal frames */\n        /* BKR operator will decide which to use later */\n        sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n        sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);\n      }\n    }\n  };\n  // The `AND` operator.<br>\n  // This is the positive `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it succeedsand NOMATCH if it fails.\n  // *Always* backtracks on any matched phrase and returns EMPTY on success.\n  const opAND = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opAND: invalid state ${sysData.state}`);\n    }\n  };\n  // The `NOT` operator.<br>\n  // This is the negative `look ahead` operator.\n  // Executes its single child node, returning the EMPTY state\n  // if it *fails* and NOMATCH if it succeeds.\n  // *Always* backtracks on any matched phrase and returns EMPTY\n  // on success (failure of its child node).\n  const opNOT = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_AHEAD,\n      anchor: phraseIndex,\n      charsEnd,\n      charsLength,\n    });\n    charsEnd = chars.length;\n    charsLength = chars.length - charsBegin;\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    const pop = lookAround.pop();\n    charsEnd = pop.charsEnd;\n    charsLength = pop.charsLength;\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opNOT: invalid state ${sysData.state}`);\n    }\n  };\n  // The `TRG` operator.<br>\n  // Succeeds if the single first character of the phrase is\n  // within the `min - max` range.\n  const opTRG = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (phraseIndex < charsEnd) {\n      if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The `TBS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // All characters must match exactly.\n  // Case-sensitive literal strings (`'string'` & `%s\"string\"`) are translated to `TBS`\n  // operators by `apg`.\n  // Phrase length of zero is not allowed.\n  // Empty phrases can only be defined with `TLS` operators.\n  const opTBS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    const len = op.string.length;\n    sysData.state = id.NOMATCH;\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[phraseIndex + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `TLS` operator.<br>\n  // Matches its pre-defined phrase against the input string.\n  // A case-insensitive match is attempted for ASCII alphbetical characters.\n  // `TLS` is the only operator that explicitly allows empty phrases.\n  // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or\n  // zero repetitions (`0*0RuleName` or `0RuleName`).\n  const opTLS = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      for (i = 0; i < len; i += 1) {\n        code = chars[phraseIndex + i];\n        if (code >= 65 && code <= 90) {\n          code += 32;\n        }\n        if (code !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    } /* implied else NOMATCH */\n  };\n  // The `ABG` operator.<br>\n  // This is an \"anchor\" for the beginning of the string, similar to the familiar regex `^` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.\n  const opABG = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;\n  };\n  // The `AEN` operator.<br>\n  // This is an \"anchor\" for the end of the string, similar to the familiar regex `$` anchor.\n  // An anchor matches a position rather than a phrase.\n  // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.\n  const opAEN = function (opIndex, phraseIndex, sysData) {\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;\n  };\n  // The `BKR` operator.<br>\n  // The back reference operator.\n  // Matches the last matched phrase of the named rule or UDT against the input string.\n  // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),\n  // depending on the back reference definition.\n  // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.\n  // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.\n  const opBKR = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      return;\n    }\n    if (phraseIndex + len <= charsEnd) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[phraseIndex + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The `BKA` operator.<br>\n  // This is the positive `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKA = function (opIndex, phraseIndex, sysData) {\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n        sysData.state = id.EMPTY;\n        break;\n      case id.MATCH:\n        sysData.state = id.EMPTY;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      default:\n        throw new Error(`opBKA: invalid state ${sysData.state}`);\n    }\n  };\n  // The `BKN` operator.<br>\n  // This is the negative `look behind` operator.\n  // It's child node is parsed right-to-left.\n  // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.\n  // Like the look ahead operators, it always backtracks to `phraseIndex`.\n  const opBKN = function (opIndex, phraseIndex, sysData) {\n    // let op;\n    // op = opcodes[opIndex];\n    lookAround.push({\n      lookAround: id.LOOKAROUND_BEHIND,\n      anchor: phraseIndex,\n    });\n    opExecute(opIndex + 1, phraseIndex, sysData);\n    lookAround.pop();\n    sysData.phraseLength = 0;\n    switch (sysData.state) {\n      case id.EMPTY:\n      case id.MATCH:\n        sysData.state = id.NOMATCH;\n        break;\n      case id.NOMATCH:\n        sysData.state = id.EMPTY;\n        break;\n      default:\n        throw new Error(`opBKN: invalid state ${sysData.state}`);\n    }\n  };\n  // The right-to-left `CAT` operator.<br>\n  // Called for `CAT` operators when in look behind mode.\n  // Calls its child nodes from right to left concatenating matched phrases right to left.\n  const opCATBehind = function (opIndex, phraseIndex, sysData) {\n    let success;\n    let astLength;\n    let catCharIndex;\n    let catMatched;\n    const op = opcodes[opIndex];\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    success = true;\n    catCharIndex = phraseIndex;\n    catMatched = 0;\n    // catPhrase = 0;\n    for (let i = op.children.length - 1; i >= 0; i -= 1) {\n      opExecute(op.children[i], catCharIndex, sysData);\n      catCharIndex -= sysData.phraseLength;\n      catMatched += sysData.phraseLength;\n      // catPhrase += sysData.phraseLength;\n      if (sysData.state === id.NOMATCH) {\n        success = false;\n        break;\n      }\n    }\n    if (success) {\n      sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = catMatched;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `REP` operator.<br>\n  // Called for `REP` operators in look behind mode.\n  // Makes repeated calls to its child node, concatenating matched phrases right to left.\n  const opREPBehind = function (opIndex, phraseIndex, sysData) {\n    let astLength;\n    let repCharIndex;\n    let repPhrase;\n    let repCount;\n    const op = opcodes[opIndex];\n    repCharIndex = phraseIndex;\n    repPhrase = 0;\n    repCount = 0;\n    const ulen = sysData.uFrame.length();\n    const plen = sysData.pFrame.length();\n    if (thisThis.ast) {\n      astLength = thisThis.ast.getLength();\n    }\n    const TRUE = true;\n    while (TRUE) {\n      if (repCharIndex <= 0) {\n        /* exit on end of input string */\n        break;\n      }\n      opExecute(opIndex + 1, repCharIndex, sysData);\n      if (sysData.state === id.NOMATCH) {\n        /* always end if the child node fails */\n        break;\n      }\n      if (sysData.state === id.EMPTY) {\n        /* REP always succeeds when the child node returns an empty phrase */\n        /* this may not seem obvious, but that's the way it works out */\n        break;\n      }\n      repCount += 1;\n      repPhrase += sysData.phraseLength;\n      repCharIndex -= sysData.phraseLength;\n      if (repCount === op.max) {\n        /* end on maxed out reps */\n        break;\n      }\n    }\n    /* evaluate the match count according to the min, max values */\n    if (sysData.state === id.EMPTY) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else if (repCount >= op.min) {\n      sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;\n      sysData.phraseLength = repPhrase;\n    } else {\n      sysData.state = id.NOMATCH;\n      sysData.phraseLength = 0;\n      sysData.uFrame.pop(ulen);\n      sysData.pFrame.pop(plen);\n      if (thisThis.ast) {\n        thisThis.ast.setLength(astLength);\n      }\n    }\n  };\n  // The right-to-left `TRG` operator.<br>\n  // Called for `TRG` operators in look behind mode.\n  // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.\n  const opTRGBehind = function (opIndex, phraseIndex, sysData) {\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (phraseIndex > 0) {\n      const char = chars[phraseIndex - 1];\n      if (op.min <= char && char <= op.max) {\n        sysData.state = id.MATCH;\n        sysData.phraseLength = 1;\n      }\n    }\n  };\n  // The right-to-left `TBS` operator.<br>\n  // Called for `TBS` operators in look behind mode.\n  // Matches the `TBS` phrase to the left of `phraseIndex`.\n  const opTBSBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (i = 0; i < len; i += 1) {\n        if (chars[beg + i] !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left `TLS` operator.<br>\n  // Called for `TLS` operators in look behind mode.\n  // Matches the `TLS` phrase to the left of `phraseIndex`.\n  const opTLSBehind = function (opIndex, phraseIndex, sysData) {\n    let char;\n    const op = opcodes[opIndex];\n    sysData.state = id.NOMATCH;\n    const len = op.string.length;\n    if (len === 0) {\n      /* EMPTY match allowed for TLS */\n      sysData.state = id.EMPTY;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      for (let i = 0; i < len; i += 1) {\n        char = chars[beg + i];\n        if (char >= 65 && char <= 90) {\n          char += 32;\n        }\n        if (char !== op.string[i]) {\n          return;\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // The right-to-left back reference operator.<br>\n  // Matches the back referenced phrase to the left of `phraseIndex`.\n  const opBKRBehind = function (opIndex, phraseIndex, sysData) {\n    let i;\n    let code;\n    let lmcode;\n    let lower;\n    const op = opcodes[opIndex];\n    /* NOMATCH default */\n    sysData.state = id.NOMATCH;\n    sysData.phraseLength = 0;\n    if (op.index < rules.length) {\n      lower = rules[op.index].lower;\n    } else {\n      lower = udts[op.index - rules.length].lower;\n    }\n    const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);\n    const insensitive = op.bkrCase === id.BKR_MODE_CI;\n    if (frame === null) {\n      return;\n    }\n    const lmIndex = frame.phraseIndex;\n    const len = frame.phraseLength;\n    if (len === 0) {\n      sysData.state = id.EMPTY;\n      sysData.phraseLength = 0;\n      return;\n    }\n    const beg = phraseIndex - len;\n    if (beg >= 0) {\n      if (insensitive) {\n        /* case-insensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code >= 65 && code <= 90) {\n            code += 32;\n          }\n          if (lmcode >= 65 && lmcode <= 90) {\n            lmcode += 32;\n          }\n          if (code !== lmcode) {\n            return;\n          }\n        }\n        sysData.state = id.MATCH;\n        sysData.phraseLength = len;\n      } else {\n        /* case-sensitive match */\n        for (i = 0; i < len; i += 1) {\n          code = chars[beg + i];\n          lmcode = chars[lmIndex + i];\n          if (code !== lmcode) {\n            return;\n          }\n        }\n      }\n      sysData.state = id.MATCH;\n      sysData.phraseLength = len;\n    }\n  };\n  // Generalized execution function.<br>\n  // Having a single, generalized function, allows a single location\n  // for tracing and statistics gathering functions to be called.\n  // Tracing and statistics are handled in separate objects.\n  // However, the parser calls their API to build the object data records.\n  // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their\n  // usage.\n  opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {\n    let ret = true;\n    const op = opcodes[opIndex];\n    nodeHits += 1;\n    if (nodeHits > limitNodeHits) {\n      throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);\n    }\n    treeDepth += 1;\n    if (treeDepth > maxTreeDepth) {\n      maxTreeDepth = treeDepth;\n      if (maxTreeDepth > limitTreeDepth) {\n        throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);\n      }\n    }\n    sysData.refresh();\n    if (thisThis.trace !== null) {\n      /* collect the trace record for down the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    if (inLookBehind()) {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCATBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREPBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRGBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLSBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKRBehind(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    } else {\n      switch (op.type) {\n        case id.ALT:\n          opALT(opIndex, phraseIndex, sysData);\n          break;\n        case id.CAT:\n          opCAT(opIndex, phraseIndex, sysData);\n          break;\n        case id.REP:\n          opREP(opIndex, phraseIndex, sysData);\n          break;\n        case id.RNM:\n          opRNM(opIndex, phraseIndex, sysData);\n          break;\n        case id.UDT:\n          opUDT(opIndex, phraseIndex, sysData);\n          break;\n        case id.AND:\n          opAND(opIndex, phraseIndex, sysData);\n          break;\n        case id.NOT:\n          opNOT(opIndex, phraseIndex, sysData);\n          break;\n        case id.TRG:\n          opTRG(opIndex, phraseIndex, sysData);\n          break;\n        case id.TBS:\n          opTBS(opIndex, phraseIndex, sysData);\n          break;\n        case id.TLS:\n          opTLS(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKR:\n          opBKR(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKA:\n          opBKA(opIndex, phraseIndex, sysData);\n          break;\n        case id.BKN:\n          opBKN(opIndex, phraseIndex, sysData);\n          break;\n        case id.ABG:\n          opABG(opIndex, phraseIndex, sysData);\n          break;\n        case id.AEN:\n          opAEN(opIndex, phraseIndex, sysData);\n          break;\n        default:\n          ret = false;\n          break;\n      }\n    }\n    if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {\n      maxMatched = phraseIndex + sysData.phraseLength;\n    }\n    if (thisThis.stats !== null) {\n      /* collect the statistics */\n      thisThis.stats.collect(op, sysData);\n    }\n    if (thisThis.trace !== null) {\n      /* collect the trace record for up the parse tree */\n      const lk = lookAroundValue();\n      thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);\n    }\n    treeDepth -= 1;\n    return ret;\n  };\n};\n", "/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module is the constructor for the statistics gathering object.\n// The statistics are nothing more than keeping a count of the\n// number of times each node in the parse tree is traversed.\n//\n// Counts are collected for each of the individual types of operators.\n// Additionally, counts are collected for each of the individually named\n// `RNM` and `UDT` operators.\nmodule.exports = function statsFunc() {\n  const id = require('./identifiers');\n  const utils = require('./utilities');\n  const style = require('./style');\n\n  const thisFileName = 'stats.js: ';\n  let rules = [];\n  let udts = [];\n  const stats = [];\n  let totals;\n  const ruleStats = [];\n  const udtStats = [];\n  this.statsObject = 'statsObject';\n  const nameId = 'stats';\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */\n  const sortAlpha = function sortAlpha(lhs, rhs) {\n    if (lhs.lower < rhs.lower) {\n      return -1;\n    }\n    if (lhs.lower > rhs.lower) {\n      return 1;\n    }\n    return 0;\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */\n  const sortHits = function sortHits(lhs, rhs) {\n    if (lhs.total < rhs.total) {\n      return 1;\n    }\n    if (lhs.total > rhs.total) {\n      return -1;\n    }\n    return sortAlpha(lhs, rhs);\n  };\n  /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */\n  /* (in the order in which they appear in the SABNF grammar). */\n  const sortIndex = function sortIndex(lhs, rhs) {\n    if (lhs.index < rhs.index) {\n      return -1;\n    }\n    if (lhs.index > rhs.index) {\n      return 1;\n    }\n    return 0;\n  };\n  const EmptyStat = function EmptyStat() {\n    this.empty = 0;\n    this.match = 0;\n    this.nomatch = 0;\n    this.total = 0;\n  };\n  /* Zero out all stats */\n  const clear = function clear() {\n    stats.length = 0;\n    totals = new EmptyStat();\n    stats[id.ALT] = new EmptyStat();\n    stats[id.CAT] = new EmptyStat();\n    stats[id.REP] = new EmptyStat();\n    stats[id.RNM] = new EmptyStat();\n    stats[id.TRG] = new EmptyStat();\n    stats[id.TBS] = new EmptyStat();\n    stats[id.TLS] = new EmptyStat();\n    stats[id.UDT] = new EmptyStat();\n    stats[id.AND] = new EmptyStat();\n    stats[id.NOT] = new EmptyStat();\n    stats[id.BKR] = new EmptyStat();\n    stats[id.BKA] = new EmptyStat();\n    stats[id.BKN] = new EmptyStat();\n    stats[id.ABG] = new EmptyStat();\n    stats[id.AEN] = new EmptyStat();\n    ruleStats.length = 0;\n    for (let i = 0; i < rules.length; i += 1) {\n      ruleStats.push({\n        empty: 0,\n        match: 0,\n        nomatch: 0,\n        total: 0,\n        name: rules[i].name,\n        lower: rules[i].lower,\n        index: rules[i].index,\n      });\n    }\n    if (udts.length > 0) {\n      udtStats.length = 0;\n      for (let i = 0; i < udts.length; i += 1) {\n        udtStats.push({\n          empty: 0,\n          match: 0,\n          nomatch: 0,\n          total: 0,\n          name: udts[i].name,\n          lower: udts[i].lower,\n          index: udts[i].index,\n        });\n      }\n    }\n  };\n  /* increment the designated operator hit count by one */\n  const incStat = function incStat(stat, state) {\n    stat.total += 1;\n    switch (state) {\n      case id.EMPTY:\n        stat.empty += 1;\n        break;\n      case id.MATCH:\n        stat.match += 1;\n        break;\n      case id.NOMATCH:\n        stat.nomatch += 1;\n        break;\n      default:\n        throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);\n    }\n  };\n  /* helper for toHtml() */\n  const displayRow = function displayRow(name, stat) {\n    let html = '';\n    html += '<tr>';\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${name}</td>`;\n    html += `<td class=\"${style.CLASS_EMPTY}\">${stat.empty}</td>`;\n    html += `<td class=\"${style.CLASS_MATCH}\">${stat.match}</td>`;\n    html += `<td class=\"${style.CLASS_NOMATCH}\">${stat.nomatch}</td>`;\n    html += `<td class=\"${style.CLASS_ACTIVE}\">${stat.total}</td>`;\n    html += '</tr>\\n';\n    return html;\n  };\n  const displayOpsOnly = function displayOpsOnly() {\n    let html = '';\n    html += displayRow('ALT', stats[id.ALT]);\n    html += displayRow('CAT', stats[id.CAT]);\n    html += displayRow('REP', stats[id.REP]);\n    html += displayRow('RNM', stats[id.RNM]);\n    html += displayRow('TRG', stats[id.TRG]);\n    html += displayRow('TBS', stats[id.TBS]);\n    html += displayRow('TLS', stats[id.TLS]);\n    html += displayRow('UDT', stats[id.UDT]);\n    html += displayRow('AND', stats[id.AND]);\n    html += displayRow('NOT', stats[id.NOT]);\n    html += displayRow('BKR', stats[id.BKR]);\n    html += displayRow('BKA', stats[id.BKA]);\n    html += displayRow('BKN', stats[id.BKN]);\n    html += displayRow('ABG', stats[id.ABG]);\n    html += displayRow('AEN', stats[id.AEN]);\n    html += displayRow('totals', totals);\n    return html;\n  };\n  /* helper for toHtml() */\n  const displayRules = function displayRules() {\n    let html = '';\n    html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n    html += '<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\\n';\n    for (let i = 0; i < rules.length; i += 1) {\n      if (ruleStats[i].total > 0) {\n        html += '<tr>';\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].name}</td>`;\n        html += `<td class=\"${style.CLASS_EMPTY}\">${ruleStats[i].empty}</td>`;\n        html += `<td class=\"${style.CLASS_MATCH}\">${ruleStats[i].match}</td>`;\n        html += `<td class=\"${style.CLASS_NOMATCH}\">${ruleStats[i].nomatch}</td>`;\n        html += `<td class=\"${style.CLASS_ACTIVE}\">${ruleStats[i].total}</td>`;\n        html += '</tr>\\n';\n      }\n    }\n    if (udts.length > 0) {\n      html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\\n';\n      html += '<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\\n';\n      for (let i = 0; i < udts.length; i += 1) {\n        if (udtStats[i].total > 0) {\n          html += '<tr>';\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].name}</td>`;\n          html += `<td class=\"${style.CLASS_EMPTY}\">${udtStats[i].empty}</td>`;\n          html += `<td class=\"${style.CLASS_MATCH}\">${udtStats[i].match}</td>`;\n          html += `<td class=\"${style.CLASS_NOMATCH}\">${udtStats[i].nomatch}</td>`;\n          html += `<td class=\"${style.CLASS_ACTIVE}\">${udtStats[i].total}</td>`;\n          html += '</tr>\\n';\n        }\n      }\n    }\n    return html;\n  };\n  /* called only by the parser to validate a stats object */\n  this.validate = function validate(name) {\n    let ret = false;\n    if (typeof name === 'string' && nameId === name) {\n      ret = true;\n    }\n    return ret;\n  };\n  /* no verification of input - only called by parser() */\n  this.init = function init(inputRules, inputUdts) {\n    rules = inputRules;\n    udts = inputUdts;\n    clear();\n  };\n  /* This function is the main interaction with the parser. */\n  /* The parser calls it after each node has been traversed. */\n  this.collect = function collect(op, result) {\n    incStat(totals, result.state, result.phraseLength);\n    incStat(stats[op.type], result.state, result.phraseLength);\n    if (op.type === id.RNM) {\n      incStat(ruleStats[op.index], result.state, result.phraseLength);\n    }\n    if (op.type === id.UDT) {\n      incStat(udtStats[op.index], result.state, result.phraseLength);\n    }\n  };\n  // Display the statistics as an HTML table.\n  // - *type*\n  //   - \"ops\" - (default) display only the total hit counts for all operator types.\n  //   - \"index\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.\n  //   - \"hits\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.\n  //   - \"alpha\" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.\n  // - *caption* - optional caption for the table\n  this.toHtml = function toHtml(type, caption) {\n    let html = '';\n    html += `<table class=\"${style.CLASS_STATS}\">\\n`;\n    if (typeof caption === 'string') {\n      html += `<caption>${caption}</caption>\\n`;\n    }\n    html += `<tr><th class=\"${style.CLASS_ACTIVE}\">ops</th>\\n`;\n    html += `<th class=\"${style.CLASS_EMPTY}\">EMPTY</th>\\n`;\n    html += `<th class=\"${style.CLASS_MATCH}\">MATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_NOMATCH}\">NOMATCH</th>\\n`;\n    html += `<th class=\"${style.CLASS_ACTIVE}\">totals</th></tr>\\n`;\n    const test = true;\n    while (test) {\n      if (type === undefined) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === null) {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'ops') {\n        html += displayOpsOnly();\n        break;\n      }\n      if (type === 'index') {\n        ruleStats.sort(sortIndex);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'hits') {\n        ruleStats.sort(sortHits);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortIndex);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      if (type === 'alpha') {\n        ruleStats.sort(sortAlpha);\n        if (udtStats.length > 0) {\n          udtStats.sort(sortAlpha);\n        }\n        html += displayOpsOnly();\n        html += displayRules();\n        break;\n      }\n      break;\n    }\n    html += '</table>\\n';\n    return html;\n  };\n  // Display the stats table in a complete HTML5 page.\n  this.toHtmlPage = function toHtmlPage(type, caption, title) {\n    return utils.htmlToPage(this.toHtml(type, caption), title);\n  };\n};\n", "/* eslint-disable func-names */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable guard-for-in */\n/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module provides a means of tracing the parser through the parse tree as it goes.\n// It is the primary debugging facility for debugging both the SABNF grammar syntax\n// and the input strings that are supposed to be valid grammar sentences.\n// It is also a very informative and educational tool for understanding\n// how a parser actually operates for a given language.\n//\n// Tracing is the process of generating and saving a record of information for each passage\n// of the parser through a parse tree node. And since it traverses each node twice, once down the tree\n// and once coming back up, there are two records for each node.\n// This, obviously, has the potential of generating lots of records.\n// And since these records are normally displayed on a web page\n// it is important to have a means to limit the actual number of records generated to\n// probably no more that a few thousand. This is almost always enough to find any errors.\n// The problem is to get the *right* few thousand records.\n// Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.\n// Considerable effort has been made to make this filtering of the trace output as simple\n// and intuitive as possible.\n//\n// However, the ability to filter the trace records, or for that matter even understand what they are\n// and the information they contain, does require a minimum amount of understanding of the APG parsing\n// method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.\n// - The `RNM` operators and `UDT` operators are named phrases.\n// These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.\n// - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.\n//\n// There are separate means of filtering which of these operators in each of these two groups get traced.\n// Let `trace` be an instantiated `trace.js` object.\n// Prior to parsing the string, filtering the rules and UDTs can be defined as follows:\n// ```\n// trace.filter.rules[\"rulename\"] = true;\n//     /* trace rule name \"rulename\" */\n// trace.filter.rules[\"udtname\"]  = true;\n//     /* trace UDT name \"udtname\" */\n// trace.filter.rules[\"<ALL>\"]    = true;\n//     /* trace all rules and UDTs (the default) */\n// trace.filter.rules[\"<NONE>\"]   = true;\n//     /* trace no rules or UDTS */\n// ```\n// If any rule or UDT name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.\n//\n// Filtering of the other operators follows a similar procedure.\n// ```\n// trace.filter.operators[\"TRG\"] = true;\n//     /* trace the terminal range, TRG, operators */\n// trace.filter.operators[\"CAT\"]  = true;\n//     /* trace the concatenations, CAT, operators */\n// trace.filter.operators[\"<ALL>\"]    = true;\n//     /* trace all operators */\n// trace.filter.operators[\"<NONE>\"]   = true;\n//     /* trace no operators (the default) */\n// ```\n// If any operator name other than \"&lt;ALL>\" or \"&lt;NONE>\" is specified, all other names are turned off.\n// Therefore, to be selective of operator names, a filter statement is required for each name desired.\n//\n// There is, additionally, a means for limiting the total number of filtered or saved trace records.\n// See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.\n//\n// (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)\nmodule.exports = function exportTrace() {\n  const utils = require('./utilities');\n  const style = require('./style');\n  const circular = new (require('./circular-buffer'))();\n  const id = require('./identifiers');\n\n  const thisFileName = 'trace.js: ';\n  const that = this;\n  const MODE_HEX = 16;\n  const MODE_DEC = 10;\n  const MODE_ASCII = 8;\n  const MODE_UNICODE = 32;\n  const MAX_PHRASE = 80;\n  const MAX_TLS = 5;\n  const records = [];\n  let maxRecords = 5000;\n  let lastRecord = -1;\n  let filteredRecords = 0;\n  let treeDepth = 0;\n  const recordStack = [];\n  let chars = null;\n  let rules = null;\n  let udts = null;\n  const operatorFilter = [];\n  const ruleFilter = [];\n  /* special trace table phrases */\n  const PHRASE_END = `<span class=\"${style.CLASS_LINEEND}\">&bull;</span>`;\n  const PHRASE_CONTINUE = `<span class=\"${style.CLASS_LINEEND}\">&hellip;</span>`;\n  const PHRASE_EMPTY = `<span class=\"${style.CLASS_EMPTY}\">&#120634;</span>`;\n  /* filter the non-RNM & non-UDT operators */\n  const initOperatorFilter = function () {\n    const setOperators = function (set) {\n      operatorFilter[id.ALT] = set;\n      operatorFilter[id.CAT] = set;\n      operatorFilter[id.REP] = set;\n      operatorFilter[id.TLS] = set;\n      operatorFilter[id.TBS] = set;\n      operatorFilter[id.TRG] = set;\n      operatorFilter[id.AND] = set;\n      operatorFilter[id.NOT] = set;\n      operatorFilter[id.BKR] = set;\n      operatorFilter[id.BKA] = set;\n      operatorFilter[id.BKN] = set;\n      operatorFilter[id.ABG] = set;\n      operatorFilter[id.AEN] = set;\n    };\n    let items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.operators) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: no operators specified: default: do not trace any operators */\n      setOperators(false);\n      return;\n    }\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      if (upper === '<ALL>') {\n        /* case 2: <all> operators specified: trace all operators ignore all other operator commands */\n        setOperators(true);\n        return;\n      }\n      if (upper === '<NONE>') {\n        /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */\n        setOperators(false);\n        return;\n      }\n    }\n    setOperators(false);\n    for (const name in that.filter.operators) {\n      const upper = name.toUpperCase();\n      /* case 4: one or more individual operators specified: trace 'true' operators only */\n      if (upper === 'ALT') {\n        operatorFilter[id.ALT] = that.filter.operators[name] === true;\n      } else if (upper === 'CAT') {\n        operatorFilter[id.CAT] = that.filter.operators[name] === true;\n      } else if (upper === 'REP') {\n        operatorFilter[id.REP] = that.filter.operators[name] === true;\n      } else if (upper === 'AND') {\n        operatorFilter[id.AND] = that.filter.operators[name] === true;\n      } else if (upper === 'NOT') {\n        operatorFilter[id.NOT] = that.filter.operators[name] === true;\n      } else if (upper === 'TLS') {\n        operatorFilter[id.TLS] = that.filter.operators[name] === true;\n      } else if (upper === 'TBS') {\n        operatorFilter[id.TBS] = that.filter.operators[name] === true;\n      } else if (upper === 'TRG') {\n        operatorFilter[id.TRG] = that.filter.operators[name] === true;\n      } else if (upper === 'BKR') {\n        operatorFilter[id.BKR] = that.filter.operators[name] === true;\n      } else if (upper === 'BKA') {\n        operatorFilter[id.BKA] = that.filter.operators[name] === true;\n      } else if (upper === 'BKN') {\n        operatorFilter[id.BKN] = that.filter.operators[name] === true;\n      } else if (upper === 'ABG') {\n        operatorFilter[id.ABG] = that.filter.operators[name] === true;\n      } else if (upper === 'AEN') {\n        operatorFilter[id.AEN] = that.filter.operators[name] === true;\n      } else {\n        throw new Error(\n          `${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` +\n            ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`\n        );\n      }\n    }\n  };\n  /* filter the rule and `UDT` named operators */\n  const initRuleFilter = function () {\n    const setRules = function (set) {\n      operatorFilter[id.RNM] = set;\n      operatorFilter[id.UDT] = set;\n      const count = rules.length + udts.length;\n      ruleFilter.length = 0;\n      for (let i = 0; i < count; i += 1) {\n        ruleFilter.push(set);\n      }\n    };\n    let items;\n    let i;\n    const list = [];\n    for (i = 0; i < rules.length; i += 1) {\n      list.push(rules[i].lower);\n    }\n    for (i = 0; i < udts.length; i += 1) {\n      list.push(udts[i].lower);\n    }\n    ruleFilter.length = 0;\n    items = 0;\n    // eslint-disable-next-line no-unused-vars\n    for (const name in that.filter.rules) {\n      items += 1;\n    }\n    if (items === 0) {\n      /* case 1: default to all rules & udts */\n      setRules(true);\n      return;\n    }\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      if (lower === '<all>') {\n        /* case 2: trace all rules ignore all other rule commands */\n        setRules(true);\n        return;\n      }\n      if (lower === '<none>') {\n        /* case 3: trace no rules */\n        setRules(false);\n        return;\n      }\n    }\n    /* case 4: trace only individually specified rules */\n    setRules(false);\n    operatorFilter[id.RNM] = true;\n    operatorFilter[id.UDT] = true;\n    for (const name in that.filter.rules) {\n      const lower = name.toLowerCase();\n      i = list.indexOf(lower);\n      if (i < 0) {\n        throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);\n      }\n      ruleFilter[i] = that.filter.rules[name] === true;\n    }\n  };\n  /* used by other APG components to verify that they have a valid trace object */\n  this.traceObject = 'traceObject';\n  this.filter = {\n    operators: [],\n    rules: [],\n  };\n  // Set the maximum number of records to keep (default = 5000).\n  // Each record number larger than `maxRecords`\n  // will result in deleting the previously oldest record.\n  // - `max`: maximum number of records to retain (default = 5000)\n  // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)\n  this.setMaxRecords = function (max, last) {\n    lastRecord = -1;\n    if (typeof max === 'number' && max > 0) {\n      maxRecords = Math.ceil(max);\n    } else {\n      maxRecords = 0;\n      return;\n    }\n    if (typeof last === 'number') {\n      lastRecord = Math.floor(last);\n      if (lastRecord < 0) {\n        lastRecord = -1;\n      }\n    }\n  };\n  // Returns `maxRecords` to the caller.\n  this.getMaxRecords = function () {\n    return maxRecords;\n  };\n  // Returns `lastRecord` to the caller.\n  this.getLastRecord = function () {\n    return lastRecord;\n  };\n  /* Called only by the `parser.js` object. No verification of input. */\n  this.init = function (rulesIn, udtsIn, charsIn) {\n    records.length = 0;\n    recordStack.length = 0;\n    filteredRecords = 0;\n    treeDepth = 0;\n    chars = charsIn;\n    rules = rulesIn;\n    udts = udtsIn;\n    initOperatorFilter();\n    initRuleFilter();\n    circular.init(maxRecords);\n  };\n  /* returns true if this records passes through the designated filter, false if the record is to be skipped */\n  const filterOps = function (op) {\n    let ret = false;\n    if (op.type === id.RNM) {\n      if (operatorFilter[op.type] && ruleFilter[op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else if (op.type === id.UDT) {\n      if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {\n        ret = true;\n      } else {\n        ret = false;\n      }\n    } else {\n      ret = operatorFilter[op.type];\n    }\n    return ret;\n  };\n  const filterRecords = function (record) {\n    if (lastRecord === -1) {\n      return true;\n    }\n    if (record <= lastRecord) {\n      return true;\n    }\n    return false;\n  };\n  /* Collect the \"down\" record. */\n  this.down = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      recordStack.push(filteredRecords);\n      records[circular.increment()] = {\n        dirUp: false,\n        depth: treeDepth,\n        thisLine: filteredRecords,\n        thatLine: undefined,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n      treeDepth += 1;\n    }\n  };\n  /* Collect the \"up\" record. */\n  this.up = function (op, state, offset, length, anchor, lookAround) {\n    if (filterRecords(filteredRecords) && filterOps(op)) {\n      const thisLine = filteredRecords;\n      const thatLine = recordStack.pop();\n      const thatRecord = circular.getListIndex(thatLine);\n      if (thatRecord !== -1) {\n        records[thatRecord].thatLine = thisLine;\n      }\n      treeDepth -= 1;\n      records[circular.increment()] = {\n        dirUp: true,\n        depth: treeDepth,\n        thisLine,\n        thatLine,\n        opcode: op,\n        state,\n        phraseIndex: offset,\n        phraseLength: length,\n        lookAnchor: anchor,\n        lookAround,\n      };\n      filteredRecords += 1;\n    }\n  };\n  /* convert the trace records to a tree of nodes */\n  const toTreeObj = function () {\n    /* private helper functions */\n    function nodeOpcode(node, opcode) {\n      let name;\n      let casetype;\n      let modetype;\n      if (opcode) {\n        node.op = { id: opcode.type, name: utils.opcodeToString(opcode.type) };\n        node.opData = undefined;\n        switch (opcode.type) {\n          case id.RNM:\n            node.opData = rules[opcode.index].name;\n            break;\n          case id.UDT:\n            node.opData = udts[opcode.index].name;\n            break;\n          case id.BKR:\n            if (opcode.index < rules.length) {\n              name = rules[opcode.index].name;\n            } else {\n              name = udts[opcode.index - rules.length].name;\n            }\n            casetype = opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n            modetype = opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n            node.opData = `\\\\\\\\${casetype}${modetype}${name}`;\n            break;\n          case id.TLS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TBS:\n            node.opData = [];\n            for (let i = 0; i < opcode.string.length; i += 1) {\n              node.opData.push(opcode.string[i]);\n            }\n            break;\n          case id.TRG:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          case id.REP:\n            node.opData = [opcode.min, opcode.max];\n            break;\n          default:\n            throw new Error('unrecognized opcode');\n        }\n      } else {\n        node.op = { id: undefined, name: undefined };\n        node.opData = undefined;\n      }\n    }\n    function nodePhrase(state, index, length) {\n      if (state === id.MATCH) {\n        return {\n          index,\n          length,\n        };\n      }\n      if (state === id.NOMATCH) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      if (state === id.EMPTY) {\n        return {\n          index,\n          length: 0,\n        };\n      }\n      return null;\n    }\n    let nodeId = -1;\n    function nodeDown(parent, record, depth) {\n      const node = {\n        // eslint-disable-next-line no-plusplus\n        id: nodeId++,\n        branch: -1,\n        parent,\n        up: false,\n        down: false,\n        depth,\n        children: [],\n      };\n      if (record) {\n        node.down = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = null;\n        nodeOpcode(node, record.opcode);\n      } else {\n        node.state = { id: undefined, name: undefined };\n        node.phrase = nodePhrase();\n        nodeOpcode(node, undefined);\n      }\n      return node;\n    }\n    function nodeUp(node, record) {\n      if (record) {\n        node.up = true;\n        node.state = { id: record.state, name: utils.stateToString(record.state) };\n        node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);\n        if (!node.down) {\n          nodeOpcode(node, record.opcode);\n        }\n      }\n    }\n    /* walk the final tree: label branches and count leaf nodes */\n    let leafNodes = 0;\n    let depth = -1;\n    let branchCount = 1;\n    function walk(node) {\n      depth += 1;\n      node.branch = branchCount;\n      if (depth > treeDepth) {\n        treeDepth = depth;\n      }\n      if (node.children.length === 0) {\n        leafNodes += 1;\n      } else {\n        for (let i = 0; i < node.children.length; i += 1) {\n          if (i > 0) {\n            branchCount += 1;\n          }\n          node.children[i].leftMost = false;\n          node.children[i].rightMost = false;\n          if (node.leftMost) {\n            node.children[i].leftMost = i === 0;\n          }\n          if (node.rightMost) {\n            node.children[i].rightMost = i === node.children.length - 1;\n          }\n          walk(node.children[i]);\n        }\n      }\n      depth -= 1;\n    }\n    function display(node, offset) {\n      let name;\n      const obj = {};\n      obj.id = node.id;\n      obj.branch = node.branch;\n      obj.leftMost = node.leftMost;\n      obj.rightMost = node.rightMost;\n      name = node.state.name ? node.state.name : 'ACTIVE';\n      obj.state = { id: node.state.id, name };\n      name = node.op.name ? node.op.name : '?';\n      obj.op = { id: node.op.id, name };\n      if (typeof node.opData === 'string') {\n        obj.opData = node.opData;\n      } else if (Array.isArray(node.opData)) {\n        obj.opData = [];\n        for (let i = 0; i < node.opData.length; i += 1) {\n          obj.opData[i] = node.opData[i];\n        }\n      } else {\n        obj.opData = undefined;\n      }\n      if (node.phrase) {\n        obj.phrase = { index: node.phrase.index, length: node.phrase.length };\n      } else {\n        obj.phrase = null;\n      }\n      obj.depth = node.depth;\n      obj.children = [];\n      for (let i = 0; i < node.children.length; i += 1) {\n        const c = i !== node.children.length - 1;\n        obj.children[i] = display(node.children[i], offset, c);\n      }\n      return obj;\n    }\n\n    /* construct the tree beginning here */\n    const branch = [];\n    let root;\n    let node;\n    let parent;\n    let record;\n    let firstRecord = true;\n    /* push a dummy node so the root node will have a non-null parent */\n    const dummy = nodeDown(null, null, -1);\n    branch.push(dummy);\n    node = dummy;\n    circular.forEach((lineIndex) => {\n      record = records[lineIndex];\n      if (firstRecord) {\n        firstRecord = false;\n        if (record.depth > 0) {\n          /* push some dummy nodes to fill in for missing records */\n          const num = record.dirUp ? record.depth + 1 : record.depth;\n          for (let i = 0; i < num; i += 1) {\n            parent = node;\n            node = nodeDown(node, null, i);\n            branch.push(node);\n            parent.children.push(node);\n          }\n        }\n      }\n      if (record.dirUp) {\n        /* handle the next record up */\n        node = branch.pop();\n        nodeUp(node, record);\n        node = branch[branch.length - 1];\n      } else {\n        /* handle the next record down */\n        parent = node;\n        node = nodeDown(node, record, record.depth);\n        branch.push(node);\n        parent.children.push(node);\n      }\n    });\n\n    /* if not at root, walk it up to root */\n    while (branch.length > 1) {\n      node = branch.pop();\n      nodeUp(node, null);\n    }\n    /* maybe redundant or paranoid tests: these should never happen */\n    if (dummy.children.length === 0) {\n      throw new Error('trace.toTree(): parse tree has no nodes');\n    }\n    if (branch.length === 0) {\n      throw new Error('trace.toTree(): integrity check: dummy root node disappeared?');\n    }\n\n    /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */\n    root = dummy.children[0];\n    let prev = root;\n    while (root && !root.down && !root.up) {\n      prev = root;\n      root = root.children[0];\n    }\n    root = prev;\n\n    /* walk the tree of nodes: label brances and count leaves */\n    root.leftMost = true;\n    root.rightMost = true;\n    walk(root);\n    root.branch = 0;\n\n    /* generate the exported object */\n    const obj = {};\n    obj.string = [];\n    for (let i = 0; i < chars.length; i += 1) {\n      obj.string[i] = chars[i];\n    }\n    /* generate the exported rule names */\n    obj.rules = [];\n    for (let i = 0; i < rules.length; i += 1) {\n      obj.rules[i] = rules[i].name;\n    }\n    /* generate the exported UDT names */\n    obj.udts = [];\n    for (let i = 0; i < udts.length; i += 1) {\n      obj.udts[i] = udts[i].name;\n    }\n    /* generate the ids */\n    obj.id = {};\n    obj.id.ALT = { id: id.ALT, name: 'ALT' };\n    obj.id.CAT = { id: id.CAT, name: 'CAT' };\n    obj.id.REP = { id: id.REP, name: 'REP' };\n    obj.id.RNM = { id: id.RNM, name: 'RNM' };\n    obj.id.TLS = { id: id.TLS, name: 'TLS' };\n    obj.id.TBS = { id: id.TBS, name: 'TBS' };\n    obj.id.TRG = { id: id.TRG, name: 'TRG' };\n    obj.id.UDT = { id: id.UDT, name: 'UDT' };\n    obj.id.AND = { id: id.AND, name: 'AND' };\n    obj.id.NOT = { id: id.NOT, name: 'NOT' };\n    obj.id.BKR = { id: id.BKR, name: 'BKR' };\n    obj.id.BKA = { id: id.BKA, name: 'BKA' };\n    obj.id.BKN = { id: id.BKN, name: 'BKN' };\n    obj.id.ABG = { id: id.ABG, name: 'ABG' };\n    obj.id.AEN = { id: id.AEN, name: 'AEN' };\n    obj.id.ACTIVE = { id: id.ACTIVE, name: 'ACTIVE' };\n    obj.id.MATCH = { id: id.MATCH, name: 'MATCH' };\n    obj.id.EMPTY = { id: id.EMPTY, name: 'EMPTY' };\n    obj.id.NOMATCH = { id: id.NOMATCH, name: 'NOMATCH' };\n    /* generate the max tree depth */\n    obj.treeDepth = treeDepth;\n    /* generate the number of leaf nodes (branches) */\n    obj.leafNodes = leafNodes;\n    /* generate the types of the left- and right-most branches */\n    let branchesIncomplete;\n    if (root.down) {\n      if (root.up) {\n        branchesIncomplete = 'none';\n      } else {\n        branchesIncomplete = 'right';\n      }\n    } else if (root.up) {\n      branchesIncomplete = 'left';\n    } else {\n      branchesIncomplete = 'both';\n    }\n    obj.branchesIncomplete = branchesIncomplete;\n    obj.tree = display(root, root.depth, false);\n    return obj;\n  };\n  // Returns the trace records as JSON parse tree object.\n  // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.\n  this.toTree = function (stringify) {\n    const obj = toTreeObj();\n    if (stringify) {\n      return JSON.stringify(obj);\n    }\n    return obj;\n  };\n  // Translate the trace records to HTML format and create a complete HTML page for browser display.\n  this.toHtmlPage = function (mode, caption, title) {\n    return utils.htmlToPage(this.toHtml(mode, caption), title);\n  };\n\n  /* From here on down, these are just helper functions for `toHtml()`. */\n  const htmlHeader = function (mode, caption) {\n    /* open the page */\n    /* write the HTML5 header with table style */\n    /* open the <table> tag */\n    let modeName;\n    switch (mode) {\n      case MODE_HEX:\n        modeName = 'hexadecimal';\n        break;\n      case MODE_DEC:\n        modeName = 'decimal';\n        break;\n      case MODE_ASCII:\n        modeName = 'ASCII';\n        break;\n      case MODE_UNICODE:\n        modeName = 'UNICODE';\n        break;\n      default:\n        throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);\n    }\n    let header = '';\n    header += `<p>display mode: ${modeName}</p>\\n`;\n    header += `<table class=\"${style.CLASS_TRACE}\">\\n`;\n    if (typeof caption === 'string') {\n      header += `<caption>${caption}</caption>`;\n    }\n    return header;\n  };\n  const htmlFooter = function () {\n    let footer = '';\n    /* close the </table> tag */\n    footer += '</table>\\n';\n    /* display a table legend */\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">legend:<br>\\n`;\n    footer += '(a)&nbsp;-&nbsp;line number<br>\\n';\n    footer += '(b)&nbsp;-&nbsp;matching line number<br>\\n';\n    footer += '(c)&nbsp;-&nbsp;phrase offset<br>\\n';\n    footer += '(d)&nbsp;-&nbsp;phrase length<br>\\n';\n    footer += '(e)&nbsp;-&nbsp;tree depth<br>\\n';\n    footer += '(f)&nbsp;-&nbsp;operator state<br>\\n';\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_ACTIVE}\">&darr;</span>&nbsp;&nbsp;phrase opened<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">&uarr;M</span> phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span> empty phrase matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span> phrase not matched<br>\\n`;\n    footer +=\n      'operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\\n';\n    footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_MATCH}\">matched characters</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKAHEAD}\">matched characters in look ahead mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_LOOKBEHIND}\">matched characters in look behind mode</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_REMAINDER}\">remainder characters(not yet examined by parser)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class=\"${style.CLASS_CTRLCHAR}\">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\\n`;\n    footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\\n`;\n    footer += '</p>\\n';\n    footer += `<p class=\"${style.CLASS_MONOSPACE}\">\\n`;\n    footer += '<sup>&dagger;</sup>original ABNF operators:<br>\\n';\n    footer += 'ALT - alternation<br>\\n';\n    footer += 'CAT - concatenation<br>\\n';\n    footer += 'REP - repetition<br>\\n';\n    footer += 'RNM - rule name<br>\\n';\n    footer += 'TRG - terminal range<br>\\n';\n    footer += 'TLS - terminal literal string (case insensitive)<br>\\n';\n    footer += 'TBS - terminal binary string (case sensitive)<br>\\n';\n    footer += '<br>\\n';\n    footer += '<sup>&Dagger;</sup>super set SABNF operators:<br>\\n';\n    footer += 'UDT - user-defined terminal<br>\\n';\n    footer += 'AND - positive look ahead<br>\\n';\n    footer += 'NOT - negative look ahead<br>\\n';\n    footer += 'BKA - positive look behind<br>\\n';\n    footer += 'BKN - negative look behind<br>\\n';\n    footer += 'BKR - back reference<br>\\n';\n    footer += 'ABG - anchor - begin of input string<br>\\n';\n    footer += 'AEN - anchor - end of input string<br>\\n';\n    footer += '</p>\\n';\n    return footer;\n  };\n  this.indent = function (depth) {\n    let html = '';\n    for (let i = 0; i < depth; i += 1) {\n      html += '.';\n    }\n    return html;\n  };\n  /* format the TRG operator */\n  const displayTrg = function (mode, op) {\n    let html = '';\n    if (op.type === id.TRG) {\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        html += hex;\n        hex = op.max.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html += `&ndash;${hex}`;\n      } else {\n        html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      }\n    }\n    return html;\n  };\n  /* format the REP operator */\n  const displayRep = function (mode, op) {\n    let html = '';\n    if (op.type === id.REP) {\n      if (mode === MODE_HEX) {\n        let hex = op.min.toString(16).toUpperCase();\n        if (hex.length % 2 !== 0) {\n          hex = `0${hex}`;\n        }\n        html = `x${hex}`;\n        if (op.max < Infinity) {\n          hex = op.max.toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n        } else {\n          hex = 'inf';\n        }\n        html += `&ndash;${hex}`;\n      } else if (op.max < Infinity) {\n        html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;\n      } else {\n        html = `${op.min.toString(10)}&ndash;inf`;\n      }\n    }\n    return html;\n  };\n  /* format the TBS operator */\n  const displayTbs = function (mode, op) {\n    let html = '';\n    if (op.type === id.TBS) {\n      const len = Math.min(op.string.length, MAX_TLS * 2);\n      if (mode === MODE_HEX || mode === MODE_UNICODE) {\n        html += mode === MODE_HEX ? '%x' : 'U+';\n        for (let i = 0; i < len; i += 1) {\n          let hex;\n          if (i > 0) {\n            html += '.';\n          }\n          hex = op.string[i].toString(16).toUpperCase();\n          if (hex.length % 2 !== 0) {\n            hex = `0${hex}`;\n          }\n          html += hex;\n        }\n      } else {\n        html = '%d';\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          html += op.string[i].toString(10);\n        }\n      }\n      if (len < op.string.length) {\n        html += PHRASE_CONTINUE;\n      }\n    }\n    return html;\n  };\n  /* format the TLS operator */\n  const displayTls = function (mode, op) {\n    let html = '';\n    if (op.type === id.TLS) {\n      const len = Math.min(op.string.length, MAX_TLS);\n      if (mode === MODE_HEX || mode === MODE_DEC) {\n        let charu;\n        let charl;\n        let base;\n        if (mode === MODE_HEX) {\n          html = '%x';\n          base = 16;\n        } else {\n          html = '%d';\n          base = 10;\n        }\n        for (let i = 0; i < len; i += 1) {\n          if (i > 0) {\n            html += '.';\n          }\n          charl = op.string[i];\n          if (charl >= 97 && charl <= 122) {\n            charu = charl - 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else if (charl >= 65 && charl <= 90) {\n            charu = charl;\n            charl += 32;\n            html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();\n          } else {\n            html += charl.toString(base).toUpperCase();\n          }\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n      } else {\n        html = '\"';\n        for (let i = 0; i < len; i += 1) {\n          html += utils.asciiChars[op.string[i]];\n        }\n        if (len < op.string.length) {\n          html += PHRASE_CONTINUE;\n        }\n        html += '\"';\n      }\n    }\n    return html;\n  };\n  const subPhrase = function (mode, charsArg, index, length, prev) {\n    if (length === 0) {\n      return '';\n    }\n    let phrase = '';\n    const comma = prev ? ',' : '';\n    switch (mode) {\n      case MODE_HEX:\n        phrase = comma + utils.charsToHex(charsArg, index, length);\n        break;\n      case MODE_DEC:\n        if (prev) {\n          return `,${utils.charsToDec(charsArg, index, length)}`;\n        }\n        phrase = comma + utils.charsToDec(charsArg, index, length);\n        break;\n      case MODE_UNICODE:\n        phrase = utils.charsToUnicode(charsArg, index, length);\n        break;\n      case MODE_ASCII:\n      default:\n        phrase = utils.charsToAsciiHtml(charsArg, index, length);\n        break;\n    }\n    return phrase;\n  };\n  /* display phrases matched in look-behind mode */\n  const displayBehind = function (mode, charsArg, state, index, length, anchor) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanBehind = `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.MATCH:\n      case id.ACTIVE:\n        beg1 = index - length;\n        len1 = anchor - beg1;\n        beg2 = anchor;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanBehind;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  const displayForward = function (mode, charsArg, state, index, length, spanAhead) {\n    let html = '';\n    let beg1;\n    let len1;\n    let beg2;\n    let len2;\n    let lastchar = PHRASE_END;\n    const spanRemainder = `<span class=\"${style.CLASS_REMAINDER}\">`;\n    const spanend = '</span>';\n    let prev = false;\n    switch (state) {\n      case id.EMPTY:\n        html += PHRASE_EMPTY;\n      /* // eslint-disable-next-line no-fallthrough */\n      case id.NOMATCH:\n      case id.ACTIVE:\n        beg1 = index;\n        len1 = 0;\n        beg2 = index;\n        len2 = charsArg.length - beg2;\n        break;\n      case id.MATCH:\n        beg1 = index;\n        len1 = length;\n        beg2 = index + len1;\n        len2 = charsArg.length - beg2;\n        break;\n      default:\n        throw new Error('unrecognized state');\n    }\n    lastchar = PHRASE_END;\n    if (len1 > MAX_PHRASE) {\n      len1 = MAX_PHRASE;\n      lastchar = PHRASE_CONTINUE;\n      len2 = 0;\n    } else if (len1 + len2 > MAX_PHRASE) {\n      lastchar = PHRASE_CONTINUE;\n      len2 = MAX_PHRASE - len1;\n    }\n    if (len1 > 0) {\n      html += spanAhead;\n      html += subPhrase(mode, charsArg, beg1, len1, prev);\n      html += spanend;\n      prev = true;\n    }\n    if (len2 > 0) {\n      html += spanRemainder;\n      html += subPhrase(mode, charsArg, beg2, len2, prev);\n      html += spanend;\n    }\n    return html + lastchar;\n  };\n  /* display phrases matched in look-ahead mode */\n  const displayAhead = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* display phrases matched in normal parsing mode */\n  const displayNone = function (mode, charsArg, state, index, length) {\n    const spanAhead = `<span class=\"${style.CLASS_MATCH}\">`;\n    return displayForward(mode, charsArg, state, index, length, spanAhead);\n  };\n  /* Returns the filtered records, formatted as an HTML table. */\n  const htmlTable = function (mode) {\n    if (rules === null) {\n      return '';\n    }\n    let html = '';\n    let thisLine;\n    let thatLine;\n    let lookAhead;\n    let lookBehind;\n    let lookAround;\n    let anchor;\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    circular.forEach((lineIndex) => {\n      const line = records[lineIndex];\n      thisLine = line.thisLine;\n      thatLine = line.thatLine !== undefined ? line.thatLine : '--';\n      lookAhead = false;\n      lookBehind = false;\n      lookAround = false;\n      if (line.lookAround === id.LOOKAROUND_AHEAD) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {\n        lookAhead = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      if (line.lookAround === id.LOOKAROUND_BEHIND) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.lookAnchor;\n      }\n      if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {\n        lookBehind = true;\n        lookAround = true;\n        anchor = line.phraseIndex;\n      }\n      html += '<tr>';\n      html += `<td>${thisLine}</td><td>${thatLine}</td>`;\n      html += `<td>${line.phraseIndex}</td>`;\n      html += `<td>${line.phraseLength}</td>`;\n      html += `<td>${line.depth}</td>`;\n      html += '<td>';\n      switch (line.state) {\n        case id.ACTIVE:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">&darr;&nbsp;</span>`;\n          break;\n        case id.MATCH:\n          html += `<span class=\"${style.CLASS_MATCH}\">&uarr;M</span>`;\n          break;\n        case id.NOMATCH:\n          html += `<span class=\"${style.CLASS_NOMATCH}\">&uarr;N</span>`;\n          break;\n        case id.EMPTY:\n          html += `<span class=\"${style.CLASS_EMPTY}\">&uarr;E</span>`;\n          break;\n        default:\n          html += `<span class=\"${style.CLASS_ACTIVE}\">--</span>`;\n          break;\n      }\n      html += '</td>';\n      html += '<td>';\n      html += that.indent(line.depth);\n      if (lookAhead) {\n        html += `<span class=\"${style.CLASS_LOOKAHEAD}\">`;\n      } else if (lookBehind) {\n        html += `<span class=\"${style.CLASS_LOOKBEHIND}\">`;\n      }\n      html += utils.opcodeToString(line.opcode.type);\n      if (line.opcode.type === id.RNM) {\n        html += `(${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.BKR) {\n        const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';\n        const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';\n        html += `(\\\\${casetype}${modetype}${rules[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.UDT) {\n        html += `(${udts[line.opcode.index].name}) `;\n      }\n      if (line.opcode.type === id.TRG) {\n        html += `(${displayTrg(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TBS) {\n        html += `(${displayTbs(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.TLS) {\n        html += `(${displayTls(mode, line.opcode)}) `;\n      }\n      if (line.opcode.type === id.REP) {\n        html += `(${displayRep(mode, line.opcode)}) `;\n      }\n      if (lookAround) {\n        html += '</span>';\n      }\n      html += '</td>';\n      html += '<td>';\n      if (lookBehind) {\n        html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);\n      } else if (lookAhead) {\n        html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      } else {\n        html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);\n      }\n      html += '</td></tr>\\n';\n    });\n    html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';\n    html += '<th>operator</th><th>phrase</th></tr>\\n';\n    html += '</table>\\n';\n    return html;\n  };\n  // Translate the trace records to HTML format.\n  // - *modearg* - can be `\"ascii\"`, `\"decimal\"`, `\"hexadecimal\"` or `\"unicode\"`.\n  // Determines the format of the string character code display.\n  // - *caption* - optional caption for the HTML table.\n  this.toHtml = function (modearg, caption) {\n    /* writes the trace records as a table in a complete html page */\n    let mode = MODE_ASCII;\n    if (typeof modearg === 'string' && modearg.length >= 3) {\n      const modein = modearg.toLowerCase().slice(0, 3);\n      if (modein === 'hex') {\n        mode = MODE_HEX;\n      } else if (modein === 'dec') {\n        mode = MODE_DEC;\n      } else if (modein === 'uni') {\n        mode = MODE_UNICODE;\n      }\n    }\n    let html = '';\n    html += htmlHeader(mode, caption);\n    html += htmlTable(mode);\n    html += htmlFooter();\n    return html;\n  };\n};\n", "/*  *************************************************************************************\n *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved\n *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)\n *   ********************************************************************************* */\n// This module serves to export all library objects and object constructors with the `require(\"apg-lib\")` statement.\n// For example, to create a new parser in your program,\n// ````\n// let apglib = require(\"../apg-lib/node-exports\");\n// let my-parser = new apglib.parser();\n// ````\nmodule.exports = {\n  ast: require('./ast'),\n  circular: require('./circular-buffer'),\n  ids: require('./identifiers'),\n  parser: require('./parser'),\n  stats: require('./stats'),\n  trace: require('./trace'),\n  utils: require('./utilities'),\n  emitcss: require('./emitcss'),\n  style: require('./style'),\n};\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\nfunction fromBig(\n  n: bigint,\n  le = false\n): {\n  h: number;\n  l: number;\n} {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false): Uint32Array[] {\n  const len = lst.length;\n  let Ah = new Uint32Array(len);\n  let Al = new Uint32Array(len);\n  for (let i = 0; i < len; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number): bigint => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number): number => h >>> s;\nconst shrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number): number => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number): number => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number): number => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number): number => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number): number => l;\nconst rotr32L = (h: number, _l: number): number => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number): number => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number): number => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number): number => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number): number => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(\n  Ah: number,\n  Al: number,\n  Bh: number,\n  Bl: number\n): {\n  h: number;\n  l: number;\n} {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number): number => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number): number =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number): number =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number): number =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number): number =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig\n};\n// prettier-ignore\nconst u64: { fromBig: typeof fromBig; split: typeof split; toBig: (h: number, l: number) => bigint; shrSH: (h: number, _l: number, s: number) => number; shrSL: (h: number, l: number, s: number) => number; rotrSH: (h: number, l: number, s: number) => number; rotrSL: (h: number, l: number, s: number) => number; rotrBH: (h: number, l: number, s: number) => number; rotrBL: (h: number, l: number, s: number) => number; rotr32H: (_h: number, l: number) => number; rotr32L: (h: number, _l: number) => number; rotlSH: (h: number, l: number, s: number) => number; rotlSL: (h: number, l: number, s: number) => number; rotlBH: (h: number, l: number, s: number) => number; rotlBL: (h: number, l: number, s: number) => number; add: typeof add; add3L: (Al: number, Bl: number, Cl: number) => number; add3H: (low: number, Ah: number, Bh: number, Ch: number) => number; add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number; add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number; add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number; add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number; } = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * Internal webcrypto alias.\n * We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n * See utils.ts for details.\n * @module\n */\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto: any =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\n/** Asserts something is positive integer. */\nexport function anumber(n: number): void {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n\n/** Asserts something is Uint8Array. */\nexport function abytes(b: Uint8Array | undefined, ...lengths: number[]): void {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n\n/** Asserts something is hash */\nexport function ahash(h: IHash): void {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.createHasher');\n  anumber(h.outputLen);\n  anumber(h.blockLen);\n}\n\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance: any, checkFinished = true): void {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\n\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out: any, instance: any): void {\n  abytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error('digestInto() expects output buffer of length at least ' + min);\n  }\n}\n\n/** Generic type encompassing 8/16/32-byte arrays - but not 64-byte. */\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr: TypedArray): Uint8Array {\n  return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr: TypedArray): Uint32Array {\n  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays: TypedArray[]): void {\n  for (let i = 0; i < arrays.length; i++) {\n    arrays[i].fill(0);\n  }\n}\n\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr: TypedArray): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word: number, shift: number): number {\n  return (word << (32 - shift)) | (word >>> shift);\n}\n\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word: number, shift: number): number {\n  return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE: boolean = /* @__PURE__ */ (() =>\n  new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n\n/** The byte swap operation for uint32 */\nexport function byteSwap(word: number): number {\n  return (\n    ((word << 24) & 0xff000000) |\n    ((word << 8) & 0xff0000) |\n    ((word >>> 8) & 0xff00) |\n    ((word >>> 24) & 0xff)\n  );\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE: (n: number) => number = isLE\n  ? (n: number) => n\n  : (n: number) => byteSwap(n);\n\n/** @deprecated */\nexport const byteSwapIfBE: typeof swap8IfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr: Uint32Array): Uint32Array {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n  return arr;\n}\n\nexport const swap32IfBE: (u: Uint32Array) => Uint32Array = isLE\n  ? (u: Uint32Array) => u\n  : byteSwap32;\n\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin: boolean = /* @__PURE__ */ (() =>\n  // @ts-ignore\n  typeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // @ts-ignore\n  if (hasHexBuiltin) return bytes.toHex();\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // @ts-ignore\n  if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async (): Promise<void> => {};\n\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(\n  iters: number,\n  tick: number,\n  cb: (i: number) => void\n): Promise<void> {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols, but ts doesn't see them: https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\ndeclare const TextDecoder: any;\n\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes: Uint8Array): string {\n  return new TextDecoder().decode(bytes);\n}\n\n/** Accepted input of hash functions. Strings are converted to byte arrays. */\nexport type Input = string | Uint8Array;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** KDFs can accept string or Uint8Array for user convenience. */\nexport type KDFInput = string | Uint8Array;\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data: KDFInput): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n    throw new Error('options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\n/** Hash interface. */\nexport type IHash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\n\n/** For runtime check if class implements interface */\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  abstract clone(): T;\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n/** Hash function */\nexport type CHash = ReturnType<typeof createHasher>;\n/** Hash function with output */\nexport type CHashO = ReturnType<typeof createOptHasher>;\n/** XOF with output */\nexport type CHashXO = ReturnType<typeof createXOFer>;\n\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher<T extends Hash<T>>(\n  hashCons: () => Hash<T>\n): {\n  (msg: Input): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(): Hash<T>;\n} {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function createOptHasher<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): Hash<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function createXOFer<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n): {\n  (msg: Input, opts?: T): Uint8Array;\n  outputLen: number;\n  blockLen: number;\n  create(opts?: T): HashXOF<H>;\n} {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts?: T) => hashCons(opts);\n  return hashC;\n}\nexport const wrapConstructor: typeof createHasher = createHasher;\nexport const wrapConstructorWithOpts: typeof createOptHasher = createOptHasher;\nexport const wrapXOFConstructorWithOpts: typeof createXOFer = createXOFer;\n\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return Uint8Array.from(crypto.randomBytes(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.ts';\n// prettier-ignore\nimport {\n  abytes, aexists, anumber, aoutput,\n  clean, createHasher, createXOFer, Hash,\n  swap32IfBE,\n  toBytes, u32,\n  type CHash, type CHashXO, type HashXOF, type Input\n} from './utils.ts';\n\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst IOTAS = split(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n/** `keccakf1600` internal function, additionally allows to adjust round count. */\nexport function keccakP(s: Uint32Array, rounds: number = 24): void {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  clean(B);\n}\n\n/** Keccak sponge function. */\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n\n  public blockLen: number;\n  public suffix: number;\n  public outputLen: number;\n  protected enableXOF = false;\n  protected rounds: number;\n\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    blockLen: number,\n    suffix: number,\n    outputLen: number,\n    enableXOF = false,\n    rounds: number = 24\n  ) {\n    super();\n    this.blockLen = blockLen;\n    this.suffix = suffix;\n    this.outputLen = outputLen;\n    this.enableXOF = enableXOF;\n    this.rounds = rounds;\n    // Can be passed from user as dkLen\n    anumber(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    // 0 < blockLen < 200\n    if (!(0 < blockLen && blockLen < 200))\n      throw new Error('only keccak-f1600 function is supported');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  clone(): Keccak {\n    return this._cloneInto();\n  }\n  protected keccak(): void {\n    swap32IfBE(this.state32);\n    keccakP(this.state32, this.rounds);\n    swap32IfBE(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input): this {\n    aexists(this);\n    data = toBytes(data);\n    abytes(data);\n    const { blockLen, state } = this;\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish(): void {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    aexists(this, false);\n    abytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    anumber(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array): Uint8Array {\n    aoutput(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest(): Uint8Array {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy(): void {\n    this.destroyed = true;\n    clean(this.state);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  createHasher(() => new Keccak(blockLen, suffix, outputLen));\n\n/** SHA3-224 hash function. */\nexport const sha3_224: CHash = /* @__PURE__ */ (() => gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */\nexport const sha3_256: CHash = /* @__PURE__ */ (() => gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */\nexport const sha3_384: CHash = /* @__PURE__ */ (() => gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */\nexport const sha3_512: CHash = /* @__PURE__ */ (() => gen(0x06, 72, 512 / 8))();\n\n/** keccak-224 hash function. */\nexport const keccak_224: CHash = /* @__PURE__ */ (() => gen(0x01, 144, 224 / 8))();\n/** keccak-256 hash function. Different from SHA3-256. */\nexport const keccak_256: CHash = /* @__PURE__ */ (() => gen(0x01, 136, 256 / 8))();\n/** keccak-384 hash function. */\nexport const keccak_384: CHash = /* @__PURE__ */ (() => gen(0x01, 104, 384 / 8))();\n/** keccak-512 hash function. */\nexport const keccak_512: CHash = /* @__PURE__ */ (() => gen(0x01, 72, 512 / 8))();\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  createXOFer<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\n/** SHAKE128 XOF with 128-bit security. */\nexport const shake128: CHashXO = /* @__PURE__ */ (() => genShake(0x1f, 168, 128 / 8))();\n/** SHAKE256 XOF with 256-bit security. */\nexport const shake256: CHashXO = /* @__PURE__ */ (() => genShake(0x1f, 136, 256 / 8))();\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseIntegerNumber = exports.isEIP55Address = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst utils_1 = require(\"@noble/hashes/utils\");\n/**\n * This method is supposed to check if an address is conforming to EIP-55.\n * @param address Address to be checked if conforms with EIP-55.\n * @returns Either the return is or not in the EIP-55 format.\n */\nconst isEIP55Address = (address) => {\n    if (address.length != 42) {\n        return false;\n    }\n    const lowerAddress = `${address}`.toLowerCase().replace(\"0x\", \"\");\n    const hash = (0, utils_1.bytesToHex)((0, sha3_1.keccak_256)(lowerAddress));\n    let ret = \"0x\";\n    for (let i = 0; i < lowerAddress.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += lowerAddress[i].toUpperCase();\n        }\n        else {\n            ret += lowerAddress[i];\n        }\n    }\n    return address === ret;\n};\nexports.isEIP55Address = isEIP55Address;\nconst parseIntegerNumber = (number) => {\n    const parsed = parseInt(number);\n    if (isNaN(parsed))\n        throw new Error(\"Invalid number.\");\n    if (parsed === Infinity)\n        throw new Error(\"Invalid number.\");\n    return parsed;\n};\nexports.parseIntegerNumber = parseIntegerNumber;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cb = void 0;\nconst node_exports_1 = __importDefault(require(\"apg-js/src/apg-lib/node-exports\"));\nconst utils = node_exports_1.default.utils;\nconst id = node_exports_1.default.ids;\nconst utils_1 = require(\"./utils\");\n/* copied from siwe/lib/utils.ts */\nconst ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\nconst isValidISO8601Date = (inputDate) => {\n    /* Split groups and make sure inputDate is in ISO8601 format */\n    const inputMatch = ISO8601.exec(inputDate);\n    /* if inputMatch is null the date is not ISO-8601 */\n    if (!inputMatch) {\n        return false;\n    }\n    /* Creates a date object with input date to parse for invalid days e.g. Feb, 30 -> Mar, 01 */\n    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();\n    /* Get groups from new parsed date to compare with the original input */\n    const parsedInputMatch = ISO8601.exec(inputDateParsed);\n    /* Compare remaining fields */\n    return inputMatch.groups.date === parsedInputMatch.groups.date;\n};\nexports.cb = {\n    signInWithEtherium: function (result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                if (typeof data !== \"object\" || data === null) {\n                    throw new Error(\"data must be an object\");\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`invalid message: max line number was ${data.lineno}`);\n        }\n    },\n    lineno: function lineno(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.lineno += 1;\n        }\n    },\n    exTitle: function exTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    nbTitle: function nbTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    riTitle: function riTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    reTitle: function reTitle(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.resources = [];\n        }\n        else if (result.state === id.NOMATCH) {\n            data.lineno -= 1;\n        }\n    },\n    oscheme: function oscheme(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            // if matched, remove :// from oscheme\n            data.scheme = utils.charsToString(chars, phraseIndex, result.phraseLength - 3);\n        }\n    },\n    domain: function domain(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.domain = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.errors.push(`line ${data.lineno}: domain cannot be empty`);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid domain`);\n        }\n    },\n    address: function address(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.address = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!(0, utils_1.isEIP55Address)(data.address)) {\n                    data.errors.push(`line ${data.lineno}: invalid EIP-55 address - ${data.address}`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid address`);\n                break;\n        }\n    },\n    statement: function statement(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.statement = utils.charsToString(chars, phraseIndex, result.phraseLength);\n        }\n    },\n    emptyStatement: function emptyStatement(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.statement = \"\";\n        }\n    },\n    version: function version(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.version = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid version`);\n                break;\n        }\n    },\n    nonce: function nonce(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.nonce = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid nonce`);\n                break;\n        }\n    },\n    issuedAt: function issuedAt(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.issuedAt = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!isValidISO8601Date(data.issuedAt)) {\n                    data.errors.push(`line ${data.lineno}: invalid issued-at date time semantics`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid issued-at date time syntax`);\n                break;\n        }\n    },\n    expirationTime: function expirationTime(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.expirationTime = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!isValidISO8601Date(data.expirationTime)) {\n                    data.errors.push(`line ${data.lineno}: invalid expiration-time date time semantics`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid expiration-time date time syntax`);\n                break;\n        }\n    },\n    notBefore: function notBefore(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.notBefore = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                if (!isValidISO8601Date(data.notBefore)) {\n                    data.errors.push(`line ${data.lineno}: invalid not-before date time semantics`);\n                }\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid not-before date time syntax`);\n                break;\n        }\n    },\n    requestId: function requestId(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.requestId = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.requestId = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid requestID`);\n                break;\n        }\n    },\n    chainId: function chainId(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.chainId = (0, utils_1.parseIntegerNumber)(utils.charsToString(chars, phraseIndex, result.phraseLength));\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid chain-id`);\n                break;\n        }\n    },\n    uriR: function uriR(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriR = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid resource URI`);\n                break;\n        }\n    },\n    resource: function resource(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.resources.push(data.uriR);\n                delete data.uriR;\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid resource`);\n                break;\n        }\n    },\n    // handle the URI\n    scheme: function scheme(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.scheme = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI scheme`);\n                break;\n        }\n    },\n    userinfo: function userinfo(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.userinfo = utils.charsToString(chars, phraseIndex, result.phraseLength - 1);\n                break;\n        }\n    },\n    host: function host(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.iplit = false;\n                break;\n            case id.MATCH:\n                if (data.iplit) {\n                    // strip leading \"[\" and trailing \"]\" brackets\n                    data.uriElements.host = utils.charsToString(chars, phraseIndex + 1, result.phraseLength - 2);\n                }\n                else {\n                    data.uriElements.host = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                }\n                break;\n            case id.EMPTY:\n                data.uriElements.host = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI host`);\n                break;\n        }\n    },\n    ipLiteral: function ipLiteral(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.iplit = true;\n        }\n    },\n    port: function port(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.port = (0, utils_1.parseIntegerNumber)(utils.charsToString(chars, phraseIndex, result.phraseLength));\n                break;\n            case id.EMPTY:\n                data.uriElements.port = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI port`);\n                break;\n        }\n    },\n    pathAbempty: function pathAbempty(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.path = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.uriElements.path = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI path-abempty`);\n                break;\n        }\n    },\n    pathAbsolute: function pathAbsolute(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.path = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n        }\n    },\n    pathRootless: function pathRootless(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.path = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n        }\n    },\n    pathEmpty: function pathEmpty(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI - path-empty must be empty`);\n                break;\n            case id.EMPTY:\n                data.uriElements.path = \"\";\n                break;\n        }\n    },\n    query: function query(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.query = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.uriElements.query = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI query`);\n                break;\n        }\n    },\n    fragment: function fragment(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.uriElements.fragment = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n                data.uriElements.fragment = \"\";\n                break;\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI fragment`);\n                break;\n        }\n    },\n    uri: function URI(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                //NOTE: all \"valid-url\" tests are satisfied if URI ABNF parses without error.\n                data.uri = utils.charsToString(chars, phraseIndex, result.phraseLength);\n                break;\n            case id.EMPTY:\n            case id.NOMATCH:\n                data.errors.push(`line ${data.lineno}: invalid URI`);\n                break;\n        }\n    },\n    ipv4: function ipv4(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.ipv4 = true;\n        }\n    },\n    h16: function h16(result, chars, phraseIndex, data) {\n        if (result.state === id.MATCH) {\n            data.h16count += 1;\n        }\n    },\n    nodcolon: function nodcolon(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.h16count = 0;\n                data.ipv4 = false;\n                break;\n            case id.MATCH:\n                // semantically validate the number of 16-bit digits\n                if (data.ipv4) {\n                    if (data.h16count === 6) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                else {\n                    if (data.h16count === 8) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                break;\n        }\n    },\n    dcolon: function dcolon(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.h16count = 0;\n                data.ipv4 = false;\n                break;\n            case id.MATCH:\n                // semantically validate the number of 16-bit digits\n                if (data.ipv4) {\n                    if (data.h16count < 6) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                else {\n                    if (data.h16count < 8) {\n                        result.state = id.MATCH;\n                    }\n                    else {\n                        result.state = id.NOMATCH;\n                        result.phraseLength = 0;\n                    }\n                }\n                break;\n        }\n    },\n    decOctet: function decOctet(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.ACTIVE:\n                data.octet = 0;\n                break;\n            case id.MATCH:\n                // semantically validate the octet\n                if (data.octet > 255) {\n                    result.state = id.NOMATCH;\n                    result.phraseLength = 0;\n                }\n                else {\n                    result.state = id.MATCH;\n                }\n                break;\n        }\n    },\n    decDigit: function decDigit(result, chars, phraseIndex, data) {\n        switch (result.state) {\n            case id.MATCH:\n                data.octet = 10 * data.octet + chars[phraseIndex] - 48;\n                break;\n        }\n    },\n};\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isUri = exports.ParsedMessage = void 0;\nconst siwe_grammar_1 = require(\"./siwe-grammar\");\nconst callbacks_1 = require(\"./callbacks\");\nconst node_exports_1 = __importDefault(require(\"apg-js/src/apg-lib/node-exports\"));\nconst grammarObj = new siwe_grammar_1.grammar();\nclass ParsedMessage {\n    // and display it on an HTML page.\n    constructor(msg) {\n        const parser = new node_exports_1.default.parser();\n        parser.callbacks[\"sign-in-with-ethereum\"] = callbacks_1.cb.signInWithEtherium;\n        parser.callbacks[\"oscheme\"] = callbacks_1.cb.oscheme;\n        parser.callbacks[\"domain\"] = callbacks_1.cb.domain;\n        parser.callbacks[\"LF\"] = callbacks_1.cb.lineno;\n        parser.callbacks[\"ex-title\"] = callbacks_1.cb.exTitle;\n        parser.callbacks[\"nb-title\"] = callbacks_1.cb.nbTitle;\n        parser.callbacks[\"ri-title\"] = callbacks_1.cb.riTitle;\n        parser.callbacks[\"re-title\"] = callbacks_1.cb.reTitle;\n        parser.callbacks[\"address\"] = callbacks_1.cb.address;\n        parser.callbacks[\"statement\"] = callbacks_1.cb.statement;\n        parser.callbacks[\"empty-statement\"] = callbacks_1.cb.emptyStatement;\n        parser.callbacks[\"version\"] = callbacks_1.cb.version;\n        parser.callbacks[\"chain-id\"] = callbacks_1.cb.chainId;\n        parser.callbacks[\"nonce\"] = callbacks_1.cb.nonce;\n        parser.callbacks[\"issued-at\"] = callbacks_1.cb.issuedAt;\n        parser.callbacks[\"expiration-time\"] = callbacks_1.cb.expirationTime;\n        parser.callbacks[\"not-before\"] = callbacks_1.cb.notBefore;\n        parser.callbacks[\"request-id\"] = callbacks_1.cb.requestId;\n        parser.callbacks[\"uri\"] = callbacks_1.cb.uri;\n        parser.callbacks[\"uri-r\"] = callbacks_1.cb.uriR;\n        parser.callbacks[\"resource\"] = callbacks_1.cb.resource;\n        parser.callbacks[\"scheme\"] = callbacks_1.cb.scheme;\n        parser.callbacks[\"userinfo-at\"] = callbacks_1.cb.userinfo;\n        parser.callbacks[\"host\"] = callbacks_1.cb.host;\n        parser.callbacks[\"IP-literal\"] = callbacks_1.cb.ipLiteral;\n        parser.callbacks[\"port\"] = callbacks_1.cb.port;\n        parser.callbacks[\"path-abempty\"] = callbacks_1.cb.pathAbempty;\n        parser.callbacks[\"path-absolute\"] = callbacks_1.cb.pathAbsolute;\n        parser.callbacks[\"path-rootless\"] = callbacks_1.cb.pathRootless;\n        parser.callbacks[\"path-empty\"] = callbacks_1.cb.pathEmpty;\n        parser.callbacks[\"query\"] = callbacks_1.cb.query;\n        parser.callbacks[\"fragment\"] = callbacks_1.cb.fragment;\n        parser.callbacks[\"IPv4address\"] = callbacks_1.cb.ipv4;\n        parser.callbacks[\"nodcolon\"] = callbacks_1.cb.nodcolon;\n        parser.callbacks[\"dcolon\"] = callbacks_1.cb.dcolon;\n        parser.callbacks[\"h16\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"h16c\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"h16n\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"h16cn\"] = callbacks_1.cb.h16;\n        parser.callbacks[\"dec-octet\"] = callbacks_1.cb.decOctet;\n        parser.callbacks[\"dec-digit\"] = callbacks_1.cb.decDigit;\n        // initialize parsed elements\n        const elements = {\n            errors: [],\n            lineno: 1,\n            scheme: undefined,\n            domain: undefined,\n            address: undefined,\n            statement: undefined,\n            uri: undefined,\n            version: undefined,\n            chainId: undefined,\n            nonce: undefined,\n            issuedAt: undefined,\n            expirationTime: undefined,\n            notBefore: undefined,\n            requestId: undefined,\n            resources: undefined,\n            uriElements: {\n                scheme: undefined,\n                userinfo: undefined,\n                host: undefined,\n                port: undefined,\n                path: undefined,\n                query: undefined,\n                fragment: undefined,\n            },\n        };\n        const result = parser.parse(grammarObj, 0, msg, elements);\n        let throwMsg = \"\";\n        for (let i = 0; i < elements.errors.length; i += 1) {\n            throwMsg += elements.errors[i] + \"\\n\";\n        }\n        if (!result.success) {\n            throwMsg += `Invalid message: ${JSON.stringify(result)}`;\n        }\n        if (throwMsg !== \"\") {\n            throw new Error(throwMsg);\n        }\n        this.scheme = elements.scheme;\n        this.domain = elements.domain;\n        this.address = elements.address;\n        this.statement = elements.statement;\n        this.uri = elements.uri;\n        this.version = elements.version;\n        this.chainId = elements.chainId;\n        this.nonce = elements.nonce;\n        this.issuedAt = elements.issuedAt;\n        this.expirationTime = elements.expirationTime;\n        this.notBefore = elements.notBefore;\n        this.requestId = elements.requestId;\n        this.resources = elements.resources;\n        this.uriElements = elements.uriElements;\n    }\n}\nexports.ParsedMessage = ParsedMessage;\nconst isUri = (uri) => {\n    const parser = new node_exports_1.default.parser();\n    parser.callbacks[\"IP-literal\"] = callbacks_1.cb.ipLiteral;\n    parser.callbacks[\"IPv4address\"] = callbacks_1.cb.ipv4;\n    parser.callbacks[\"nodcolon\"] = callbacks_1.cb.nodcolon;\n    parser.callbacks[\"dcolon\"] = callbacks_1.cb.dcolon;\n    parser.callbacks[\"h16\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"h16c\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"h16n\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"h16cn\"] = callbacks_1.cb.h16;\n    parser.callbacks[\"dec-octet\"] = callbacks_1.cb.decOctet;\n    parser.callbacks[\"dec-digit\"] = callbacks_1.cb.decDigit;\n    const data = { errors: [] };\n    const result = parser.parse(grammarObj, \"uri-r\", uri, data);\n    return result.success;\n};\nexports.isUri = isUri;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isUri = exports.ParsedMessage = void 0;\nconst abnf_1 = require(\"./abnf\");\nObject.defineProperty(exports, \"ParsedMessage\", { enumerable: true, get: function () { return abnf_1.ParsedMessage; } });\nconst abnf_2 = require(\"./abnf\");\nObject.defineProperty(exports, \"isUri\", { enumerable: true, get: function () { return abnf_2.isUri; } });\n__exportStar(require(\"./utils\"), exports);\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAddress = exports.hashMessage = exports.verifyMessage = void 0;\nconst ethers_1 = require(\"ethers\");\nlet ethersVerifyMessage = null;\nlet ethersHashMessage = null;\nlet ethersGetAddress = null;\ntry {\n    // @ts-expect-error -- v6 compatibility hack\n    ethersVerifyMessage = ethers_1.ethers.utils.verifyMessage;\n    // @ts-expect-error -- v6 compatibility hack\n    ethersHashMessage = ethers_1.ethers.utils.hashMessage;\n    // @ts-expect-error -- v6 compatibility hack\n    ethersGetAddress = ethers_1.ethers.utils.getAddress;\n}\ncatch (_a) {\n    ethersVerifyMessage = ethers_1.ethers.verifyMessage;\n    ethersHashMessage = ethers_1.ethers.hashMessage;\n    ethersGetAddress = ethers_1.ethers.getAddress;\n}\nexports.verifyMessage = ethersVerifyMessage;\nexports.hashMessage = ethersHashMessage;\nexports.getAddress = ethersGetAddress;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiweErrorType = exports.SiweError = exports.VerifyOptsKeys = exports.VerifyParamsKeys = void 0;\nexports.VerifyParamsKeys = [\n    'signature',\n    'scheme',\n    'domain',\n    'nonce',\n    'time',\n];\nexports.VerifyOptsKeys = [\n    'provider',\n    'suppressExceptions',\n    'verificationFallback',\n];\n/**\n * Interface used to return errors in SiweResponses.\n */\nclass SiweError {\n    constructor(type, expected, received) {\n        this.type = type;\n        this.expected = expected;\n        this.received = received;\n    }\n}\nexports.SiweError = SiweError;\n/**\n * Possible message error types.\n */\nvar SiweErrorType;\n(function (SiweErrorType) {\n    /** `expirationTime` is present and in the past. */\n    SiweErrorType[\"EXPIRED_MESSAGE\"] = \"Expired message.\";\n    /** `domain` is not a valid authority or is empty. */\n    SiweErrorType[\"INVALID_DOMAIN\"] = \"Invalid domain.\";\n    /** `scheme` don't match the scheme provided for verification. */\n    SiweErrorType[\"SCHEME_MISMATCH\"] = \"Scheme does not match provided scheme for verification.\";\n    /** `domain` don't match the domain provided for verification. */\n    SiweErrorType[\"DOMAIN_MISMATCH\"] = \"Domain does not match provided domain for verification.\";\n    /** `nonce` don't match the nonce provided for verification. */\n    SiweErrorType[\"NONCE_MISMATCH\"] = \"Nonce does not match provided nonce for verification.\";\n    /** `address` does not conform to EIP-55 or is not a valid address. */\n    SiweErrorType[\"INVALID_ADDRESS\"] = \"Invalid address.\";\n    /** `uri` does not conform to RFC 3986. */\n    SiweErrorType[\"INVALID_URI\"] = \"URI does not conform to RFC 3986.\";\n    /** `nonce` is smaller then 8 characters or is not alphanumeric */\n    SiweErrorType[\"INVALID_NONCE\"] = \"Nonce size smaller then 8 characters or is not alphanumeric.\";\n    /** `notBefore` is present and in the future. */\n    SiweErrorType[\"NOT_YET_VALID_MESSAGE\"] = \"Message is not valid yet.\";\n    /** Signature doesn't match the address of the message. */\n    SiweErrorType[\"INVALID_SIGNATURE\"] = \"Signature does not match address of the message.\";\n    /** `expirationTime`, `notBefore` or `issuedAt` not compliant to ISO-8601. */\n    SiweErrorType[\"INVALID_TIME_FORMAT\"] = \"Invalid time format.\";\n    /** `version` is not 1. */\n    SiweErrorType[\"INVALID_MESSAGE_VERSION\"] = \"Invalid message version.\";\n    /** Thrown when some required field is missing. */\n    SiweErrorType[\"UNABLE_TO_PARSE\"] = \"Unable to parse the message.\";\n})(SiweErrorType = exports.SiweErrorType || (exports.SiweErrorType = {}));\n", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\n\nconst QUOTA = 65536;\n\nexport class BrowserRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto?: { getRandomValues: typeof window.crypto.getRandomValues };\n\n    constructor() {\n        const browserCrypto = typeof self !== 'undefined'\n            ? (self.crypto || (self as { msCrypto?: any }).msCrypto) // IE11 has msCrypto\n            : null;\n\n        if (browserCrypto && browserCrypto.getRandomValues !== undefined) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i += QUOTA) {\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\n", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package wipe implements functions for zeroing arrays.\n */\n\nexport type NumericArray = number[] | Uint8Array | Int8Array | Uint16Array\n    | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array;\n\n/**\n * Sets all values in the given array to zero and returns it.\n *\n * The fact that it sets bytes to zero can be relied on.\n *\n * There is no guarantee that this function makes data disappear from memory,\n * as runtime implementation can, for example, have copying garbage collector\n * that will make copies of sensitive data before we wipe it. Or that an\n * operating system will write our data to swap or sleep image. Another thing\n * is that an optimizing compiler can remove calls to this function or make it\n * no-op. There's nothing we can do with it, so we just do our best and hope\n * that everything will be okay and good will triumph over evil.\n */\nexport function wipe(array: NumericArray): NumericArray {\n    // Right now it's similar to array.fill(0). If it turns\n    // out that runtimes optimize this call away, maybe\n    // we can try something else.\n    for (let i = 0; i < array.length; i++) {\n        array[i] = 0;\n    }\n    return array;\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\nimport { wipe } from \"@stablelib/wipe\";\n\ndeclare function require(name: string): any;\n\nexport class NodeRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto: { randomBytes(n: number): Uint8Array } | undefined;\n\n    constructor() {\n        if (typeof require !== \"undefined\") {\n            const nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n\n        // Get random bytes (result is Buffer).\n        let buffer = this._crypto.randomBytes(length);\n\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n\n        // Allocate output array.\n        const out = new Uint8Array(length);\n\n        // Copy bytes from buffer to output.\n        for (let i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n\n        // Cleanup.\n        wipe(buffer);\n\n        return out;\n    }\n}\n", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\nimport { BrowserRandomSource } from \"./browser\";\nimport { NodeRandomSource } from \"./node\";\n\nexport class SystemRandomSource implements RandomSource {\n    isAvailable = false;\n    name = \"\";\n    private _source: RandomSource;\n\n    constructor() {\n        // Try browser.\n        this._source = new BrowserRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Browser\";\n            return;\n        }\n\n        // If no browser source, try Node.\n        this._source = new NodeRandomSource();\n        if (this._source.isAvailable) {\n            this.isAvailable = true;\n            this.name = \"Node\";\n            return;\n        }\n\n        // No sources, we're out of options.\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        return this._source.randomBytes(length);\n    }\n}\n", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package int provides helper functions for integerss.\n */\n\n// Shim using 16-bit pieces.\nfunction imulShim(a: number, b: number): number {\n    const ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    const bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexport const mul = (Math as { imul?(a: number, b: number): number }).imul || imulShim;\n\n/** 32-bit integer addition.  */\nexport function add(a: number, b: number): number {\n    return (a + b) | 0;\n}\n\n/**  32-bit integer subtraction.  */\nexport function sub(a: number, b: number): number {\n    return (a - b) | 0;\n}\n\n/** 32-bit integer left rotation */\nexport function rotl(x: number, n: number): number {\n    return x << n | x >>> (32 - n);\n}\n\n/** 32-bit integer left rotation */\nexport function rotr(x: number, n: number): number {\n    return x << (32 - n) | x >>> n;\n}\n\nfunction isIntegerShim(n: number): boolean {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexport const isInteger = (Number as { isInteger?(n: number): boolean }).isInteger || isIntegerShim;\n\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexport const MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexport const isSafeInteger = (n: number): boolean =>\n    isInteger(n) && (n >= -MAX_SAFE_INTEGER && n <= MAX_SAFE_INTEGER);\n", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */\n\nimport { isSafeInteger } from \"@stablelib/int\";\n\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */\nexport function readInt16BE(array: Uint8Array, offset = 0): number {\n    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;\n}\n\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */\nexport function readUint16BE(array: Uint8Array, offset = 0): number {\n    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;\n}\n\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */\nexport function readInt16LE(array: Uint8Array, offset = 0): number {\n    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;\n}\n\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */\nexport function readUint16LE(array: Uint8Array, offset = 0): number {\n    return ((array[offset + 1] << 8) | array[offset]) >>> 0;\n}\n\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint16BE(value: number, out = new Uint8Array(2), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 8;\n    out[offset + 1] = value >>> 0;\n    return out;\n}\n\nexport const writeInt16BE = writeUint16BE;\n\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint16LE(value: number, out = new Uint8Array(2), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    return out;\n}\n\nexport const writeInt16LE = writeUint16LE;\n\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */\nexport function readInt32BE(array: Uint8Array, offset = 0): number {\n    return (array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3];\n}\n\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */\nexport function readUint32BE(array: Uint8Array, offset = 0): number {\n    return ((array[offset] << 24) |\n        (array[offset + 1] << 16) |\n        (array[offset + 2] << 8) |\n        array[offset + 3]) >>> 0;\n}\n\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */\nexport function readInt32LE(array: Uint8Array, offset = 0): number {\n    return (array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset];\n}\n\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */\nexport function readUint32LE(array: Uint8Array, offset = 0): number {\n    return ((array[offset + 3] << 24) |\n        (array[offset + 2] << 16) |\n        (array[offset + 1] << 8) |\n        array[offset]) >>> 0;\n}\n\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint32BE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 24;\n    out[offset + 1] = value >>> 16;\n    out[offset + 2] = value >>> 8;\n    out[offset + 3] = value >>> 0;\n    return out;\n}\n\nexport const writeInt32BE = writeUint32BE;\n\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint32LE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    out[offset + 0] = value >>> 0;\n    out[offset + 1] = value >>> 8;\n    out[offset + 2] = value >>> 16;\n    out[offset + 3] = value >>> 24;\n    return out;\n}\n\n\nexport const writeInt32LE = writeUint32LE;\n\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nexport function readInt64BE(array: Uint8Array, offset = 0): number {\n    const hi = readInt32BE(array, offset);\n    const lo = readInt32BE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo>>31) * 0x100000000);\n}\n\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nexport function readUint64BE(array: Uint8Array, offset = 0): number {\n    const hi = readUint32BE(array, offset);\n    const lo = readUint32BE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\n\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nexport function readInt64LE(array: Uint8Array, offset = 0): number {\n    const lo = readInt32LE(array, offset);\n    const hi = readInt32LE(array, offset + 4);\n    return hi * 0x100000000 + lo - ((lo>>31) * 0x100000000);\n}\n\n\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nexport function readUint64LE(array: Uint8Array, offset = 0): number {\n    const lo = readUint32LE(array, offset);\n    const hi = readUint32LE(array, offset + 4);\n    return hi * 0x100000000 + lo;\n}\n\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint64BE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n    writeUint32BE(value >>> 0, out, offset + 4);\n    return out;\n}\n\nexport const writeInt64BE = writeUint64BE;\n\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeUint64LE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    writeUint32LE(value >>> 0, out, offset);\n    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n    return out;\n}\n\nexport const writeInt64LE = writeUint64LE;\n\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nexport function readUintBE(bitLength: number, array: Uint8Array, offset = 0): number {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintBE: array is too short for the given bitLength\");\n    }\n    let result = 0;\n    let mul = 1;\n    for (let i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\n\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nexport function readUintLE(bitLength: number, array: Uint8Array, offset = 0): number {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n    }\n    if (bitLength / 8 > array.length - offset) {\n        throw new Error(\"readUintLE: array is too short for the given bitLength\");\n    }\n    let result = 0;\n    let mul = 1;\n    for (let i = offset; i < offset + bitLength / 8; i++) {\n        result += array[i] * mul;\n        mul *= 256;\n    }\n    return result;\n}\n\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nexport function writeUintBE(bitLength: number, value: number,\n    out = new Uint8Array(bitLength / 8), offset = 0): Uint8Array {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n    }\n    if (!isSafeInteger(value)) {\n        throw new Error(\"writeUintBE value must be an integer\");\n    }\n    let div = 1;\n    for (let i = bitLength / 8 + offset - 1; i >= offset; i--) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\n\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nexport function writeUintLE(bitLength: number, value: number,\n    out = new Uint8Array(bitLength / 8), offset = 0): Uint8Array {\n    // TODO(dchest): implement support for bitLengths non-divisible by 8\n    if (bitLength % 8 !== 0) {\n        throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n    }\n    if (!isSafeInteger(value)) {\n        throw new Error(\"writeUintLE value must be an integer\");\n    }\n    let div = 1;\n    for (let i = offset; i < offset + bitLength / 8; i++) {\n        out[i] = (value / div) & 0xff;\n        div *= 256;\n    }\n    return out;\n}\n\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */\nexport function readFloat32BE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset);\n}\n\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */\nexport function readFloat32LE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat32(offset, true);\n}\n\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nexport function readFloat64BE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset);\n}\n\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nexport function readFloat64LE(array: Uint8Array, offset = 0): number {\n    const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n    return view.getFloat64(offset, true);\n}\n\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat32BE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value);\n    return out;\n}\n\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat32LE(value: number, out = new Uint8Array(4), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat32(offset, value, true);\n    return out;\n}\n\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat64BE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value);\n    return out;\n}\n\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nexport function writeFloat64LE(value: number, out = new Uint8Array(8), offset = 0): Uint8Array {\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    view.setFloat64(offset, value, true);\n    return out;\n}\n", "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package random provides functions to access system's\n * cryptographically secure random byte generator.\n */\n\nimport { RandomSource } from \"./source\";\nimport { SystemRandomSource } from \"./source/system\";\nimport { readUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport { RandomSource } from \"./source\";\n\nexport const defaultRandomSource = new SystemRandomSource();\n\nexport function randomBytes(length: number, prng: RandomSource = defaultRandomSource): Uint8Array {\n    return prng.randomBytes(length);\n}\n\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nexport function randomUint32(prng: RandomSource = defaultRandomSource): number {\n    // Generate 4-byte random buffer.\n    const buf = randomBytes(4, prng);\n\n    // Convert bytes from buffer into a 32-bit integer.\n    // It's not important which byte order to use, since\n    // the result is random.\n    const result = readUint32LE(buf);\n\n    // Clean the buffer.\n    wipe(buf);\n\n    return result;\n}\n\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomString(\n    length: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    if (charset.length < 2) {\n        throw new Error(\"randomString charset is too short\");\n    }\n    if (charset.length > 256) {\n        throw new Error(\"randomString charset is too long\");\n    }\n    let out = '';\n    const charsLen = charset.length;\n    const maxByte = 256 - (256 % charsLen);\n    while (length > 0) {\n        const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n        for (let i = 0; i < buf.length && length > 0; i++) {\n            const randomByte = buf[i];\n            if (randomByte < maxByte) {\n                out += charset.charAt(randomByte % charsLen);\n                length--;\n            }\n        }\n        wipe(buf);\n    }\n    return out;\n}\n\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nexport function randomStringForEntropy(\n    bits: number,\n    charset = ALPHANUMERIC,\n    prng: RandomSource = defaultRandomSource\n): string {\n    const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n    return randomString(length, charset, prng);\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkInvalidKeys = exports.isValidISO8601Date = exports.generateNonce = exports.checkContractWalletSignature = void 0;\nconst random_1 = require(\"@stablelib/random\");\n// @ts-expect-error -- ethers v6 compatibility hack\nconst ethers_1 = require(\"ethers\");\nconst ethersCompat_1 = require(\"./ethersCompat\");\nconst EIP1271_ABI = [\n    'function isValidSignature(bytes32 _message, bytes _signature) public view returns (bytes4)',\n];\nconst EIP1271_MAGICVALUE = '0x1626ba7e';\nconst ISO8601 = /^(?<date>[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(.[0-9]+)?(([Zz])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;\n/**\n * This method calls the EIP-1271 method for Smart Contract wallets\n * @param message The EIP-4361 parsed message\n * @param provider Web3 provider able to perform a contract check (Web3/EthersJS).\n * @returns {Promise<boolean>} Checks for the smart contract (if it exists) if\n * the signature is valid for given address.\n */\nconst checkContractWalletSignature = async (message, signature, provider) => {\n    if (!provider) {\n        return false;\n    }\n    const walletContract = new ethers_1.Contract(message.address, EIP1271_ABI, provider);\n    const hashedMessage = (0, ethersCompat_1.hashMessage)(message.prepareMessage());\n    const res = await walletContract.isValidSignature(hashedMessage, signature);\n    return res === EIP1271_MAGICVALUE;\n};\nexports.checkContractWalletSignature = checkContractWalletSignature;\n/**\n * This method leverages a native CSPRNG with support for both browser and Node.js\n * environments in order generate a cryptographically secure nonce for use in the\n * SiweMessage in order to prevent replay attacks.\n *\n * 96 bits has been chosen as a number to sufficiently balance size and security considerations\n * relative to the lifespan of it's usage.\n *\n * @returns cryptographically generated random nonce with 96 bits of entropy encoded with\n * an alphanumeric character set.\n */\nconst generateNonce = () => {\n    const nonce = (0, random_1.randomStringForEntropy)(96);\n    if (!nonce || nonce.length < 8) {\n        throw new Error('Error during nonce creation.');\n    }\n    return nonce;\n};\nexports.generateNonce = generateNonce;\n/**\n * This method matches the given date string against the ISO-8601 regex and also\n * performs checks if it's a valid date.\n * @param inputDate any string to be validated against ISO-8601\n * @returns boolean indicating if the provided date is valid and conformant to ISO-8601\n */\nconst isValidISO8601Date = (inputDate) => {\n    /* Split groups and make sure inputDate is in ISO8601 format */\n    const inputMatch = ISO8601.exec(inputDate);\n    /* if inputMatch is null the date is not ISO-8601 */\n    if (!inputMatch) {\n        return false;\n    }\n    /* Creates a date object with input date to parse for invalid days e.g. Feb, 30 -> Mar, 01 */\n    const inputDateParsed = new Date(inputMatch.groups.date).toISOString();\n    /* Get groups from new parsed date to compare with the original input */\n    const parsedInputMatch = ISO8601.exec(inputDateParsed);\n    /* Compare remaining fields */\n    return inputMatch.groups.date === parsedInputMatch.groups.date;\n};\nexports.isValidISO8601Date = isValidISO8601Date;\nconst checkInvalidKeys = (obj, keys) => {\n    const invalidKeys = [];\n    Object.keys(obj).forEach(key => {\n        if (!keys.includes(key)) {\n            invalidKeys.push(key);\n        }\n    });\n    return invalidKeys;\n};\nexports.checkInvalidKeys = checkInvalidKeys;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SiweMessage = void 0;\n// TODO: Figure out how to get types from this lib:\nconst siwe_parser_1 = require(\"@spruceid/siwe-parser\");\nconst ethersCompat_1 = require(\"./ethersCompat\");\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nclass SiweMessage {\n    /**\n     * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a\n     * string or an object. If a string is used an ABNF parser is called to\n     * validate the parameter, otherwise the fields are attributed.\n     * @param param {string | SiweMessage} Sign message as a string or an object.\n     */\n    constructor(param) {\n        if (typeof param === 'string') {\n            /* the message string (including nonce) is valid or ParsedMessage will throw */\n            const parsedMessage = new siwe_parser_1.ParsedMessage(param);\n            this.scheme = parsedMessage.scheme;\n            this.domain = parsedMessage.domain;\n            this.address = parsedMessage.address;\n            this.statement = parsedMessage.statement;\n            this.uri = parsedMessage.uri;\n            this.version = parsedMessage.version;\n            this.nonce = parsedMessage.nonce;\n            this.issuedAt = parsedMessage.issuedAt;\n            this.expirationTime = parsedMessage.expirationTime;\n            this.notBefore = parsedMessage.notBefore;\n            this.requestId = parsedMessage.requestId;\n            this.chainId = parsedMessage.chainId;\n            this.resources = parsedMessage.resources;\n        }\n        else {\n            this.scheme = param === null || param === void 0 ? void 0 : param.scheme;\n            this.domain = param.domain;\n            this.address = param.address;\n            this.statement = param === null || param === void 0 ? void 0 : param.statement;\n            this.uri = param.uri;\n            this.version = param.version;\n            this.chainId = param.chainId;\n            this.nonce = param.nonce;\n            this.issuedAt = param === null || param === void 0 ? void 0 : param.issuedAt;\n            this.expirationTime = param === null || param === void 0 ? void 0 : param.expirationTime;\n            this.notBefore = param === null || param === void 0 ? void 0 : param.notBefore;\n            this.requestId = param === null || param === void 0 ? void 0 : param.requestId;\n            this.resources = param === null || param === void 0 ? void 0 : param.resources;\n            if (typeof this.chainId === 'string') {\n                this.chainId = (0, siwe_parser_1.parseIntegerNumber)(this.chainId);\n            }\n            this.nonce = this.nonce || (0, utils_1.generateNonce)();\n            /* the message object is valid or parsing its stringified value will throw */\n            new siwe_parser_1.ParsedMessage(this.prepareMessage());\n        }\n    }\n    /**\n     * This function can be used to retrieve an EIP-4361 formatted message for\n     * signature, although you can call it directly it's advised to use\n     * [prepareMessage()] instead which will resolve to the correct method based\n     * on the [type] attribute of this object, in case of other formats being\n     * implemented.\n     * @returns {string} EIP-4361 formatted message, ready for EIP-191 signing.\n     */\n    toMessage() {\n        /** Validates all fields of the object */\n        // this.validateMessage();\n        const headerPrefix = this.scheme\n            ? `${this.scheme}://${this.domain}`\n            : this.domain;\n        const header = `${headerPrefix} wants you to sign in with your Ethereum account:`;\n        const uriField = `URI: ${this.uri}`;\n        let prefix = [header, this.address].join('\\n');\n        const versionField = `Version: ${this.version}`;\n        if (!this.nonce) {\n            this.nonce = (0, utils_1.generateNonce)();\n        }\n        const chainField = `Chain ID: ` + this.chainId || '1';\n        const nonceField = `Nonce: ${this.nonce}`;\n        const suffixArray = [uriField, versionField, chainField, nonceField];\n        this.issuedAt = this.issuedAt || new Date().toISOString();\n        suffixArray.push(`Issued At: ${this.issuedAt}`);\n        if (this.expirationTime) {\n            const expiryField = `Expiration Time: ${this.expirationTime}`;\n            suffixArray.push(expiryField);\n        }\n        if (this.notBefore) {\n            suffixArray.push(`Not Before: ${this.notBefore}`);\n        }\n        if (this.requestId) {\n            suffixArray.push(`Request ID: ${this.requestId}`);\n        }\n        if (this.resources) {\n            suffixArray.push([`Resources:`, ...this.resources.map(x => `- ${x}`)].join('\\n'));\n        }\n        const suffix = suffixArray.join('\\n');\n        prefix = [prefix, this.statement].join('\\n\\n');\n        if (this.statement !== undefined) {\n            prefix += '\\n';\n        }\n        return [prefix, suffix].join('\\n');\n    }\n    /**\n     * This method parses all the fields in the object and creates a messaging for signing\n     * message according with the type defined.\n     * @returns {string} Returns a message ready to be signed according with the\n     * type defined in the object.\n     */\n    prepareMessage() {\n        let message;\n        switch (this.version) {\n            case '1': {\n                message = this.toMessage();\n                break;\n            }\n            default: {\n                message = this.toMessage();\n                break;\n            }\n        }\n        return message;\n    }\n    /**\n     * Verifies the integrity of the object by matching its signature.\n     * @param params Parameters to verify the integrity of the message, signature is required.\n     * @returns {Promise<SiweMessage>} This object if valid.\n     */\n    async verify(params, opts = { suppressExceptions: false }) {\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c;\n            const fail = result => {\n                if (opts.suppressExceptions) {\n                    return resolve(result);\n                }\n                else {\n                    return reject(result);\n                }\n            };\n            const invalidParams = (0, utils_1.checkInvalidKeys)(params, types_1.VerifyParamsKeys);\n            if (invalidParams.length > 0) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new Error(`${invalidParams.join(', ')} is/are not valid key(s) for VerifyParams.`),\n                });\n            }\n            const invalidOpts = (0, utils_1.checkInvalidKeys)(opts, types_1.VerifyOptsKeys);\n            if (invalidOpts.length > 0) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new Error(`${invalidOpts.join(', ')} is/are not valid key(s) for VerifyOpts.`),\n                });\n            }\n            const { signature, scheme, domain, nonce, time } = params;\n            /** Scheme for domain binding */\n            if (scheme && scheme !== this.scheme) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new types_1.SiweError(types_1.SiweErrorType.SCHEME_MISMATCH, scheme, this.scheme),\n                });\n            }\n            /** Domain binding */\n            if (domain && domain !== this.domain) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new types_1.SiweError(types_1.SiweErrorType.DOMAIN_MISMATCH, domain, this.domain),\n                });\n            }\n            /** Nonce binding */\n            if (nonce && nonce !== this.nonce) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: new types_1.SiweError(types_1.SiweErrorType.NONCE_MISMATCH, nonce, this.nonce),\n                });\n            }\n            /** Check time or now */\n            const checkTime = new Date(time || new Date());\n            /** Message not expired */\n            if (this.expirationTime) {\n                const expirationDate = new Date(this.expirationTime);\n                if (checkTime.getTime() >= expirationDate.getTime()) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new types_1.SiweError(types_1.SiweErrorType.EXPIRED_MESSAGE, `${checkTime.toISOString()} < ${expirationDate.toISOString()}`, `${checkTime.toISOString()} >= ${expirationDate.toISOString()}`),\n                    });\n                }\n            }\n            /** Message is valid already */\n            if (this.notBefore) {\n                const notBefore = new Date(this.notBefore);\n                if (checkTime.getTime() < notBefore.getTime()) {\n                    fail({\n                        success: false,\n                        data: this,\n                        error: new types_1.SiweError(types_1.SiweErrorType.NOT_YET_VALID_MESSAGE, `${checkTime.toISOString()} >= ${notBefore.toISOString()}`, `${checkTime.toISOString()} < ${notBefore.toISOString()}`),\n                    });\n                }\n            }\n            let EIP4361Message;\n            try {\n                EIP4361Message = this.prepareMessage();\n            }\n            catch (e) {\n                fail({\n                    success: false,\n                    data: this,\n                    error: e,\n                });\n            }\n            /** Recover address from signature */\n            let addr;\n            try {\n                addr = (0, ethersCompat_1.verifyMessage)(EIP4361Message, signature);\n            }\n            catch (e) {\n                console.error(e);\n            }\n            /** Match signature with message's address */\n            if (addr === this.address) {\n                return resolve({\n                    success: true,\n                    data: this,\n                });\n            }\n            else {\n                const EIP1271Promise = (0, utils_1.checkContractWalletSignature)(this, signature, opts.provider)\n                    .then(isValid => {\n                    if (!isValid) {\n                        return {\n                            success: false,\n                            data: this,\n                            error: new types_1.SiweError(types_1.SiweErrorType.INVALID_SIGNATURE, addr, `Resolved address to be ${this.address}`),\n                        };\n                    }\n                    return {\n                        success: true,\n                        data: this,\n                    };\n                })\n                    .catch(error => {\n                    return {\n                        success: false,\n                        data: this,\n                        error,\n                    };\n                });\n                Promise.all([\n                    EIP1271Promise,\n                    (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.verificationFallback) === null || _a === void 0 ? void 0 : _a.call(opts, params, opts, this, EIP1271Promise)) === null || _b === void 0 ? void 0 : _b.then(res => res)) === null || _c === void 0 ? void 0 : _c.catch((res) => res),\n                ]).then(([EIP1271Response, fallbackResponse]) => {\n                    if (fallbackResponse) {\n                        if (fallbackResponse.success) {\n                            return resolve(fallbackResponse);\n                        }\n                        else {\n                            fail(fallbackResponse);\n                        }\n                    }\n                    else {\n                        if (EIP1271Response.success) {\n                            return resolve(EIP1271Response);\n                        }\n                        else {\n                            fail(EIP1271Response);\n                        }\n                    }\n                });\n            }\n        });\n    }\n}\nexports.SiweMessage = SiweMessage;\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./client\"), exports);\n__exportStar(require(\"./types\"), exports);\n__exportStar(require(\"./utils\"), exports);\n"],
  "mappings": "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;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO;AACP,eAAO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",
  "names": ["len", "i", "len2", "i", "byteLength", "b1", "i", "len", "ret", "buf", "tail", "bom8", "bom16", "bom32", "validateSrc", "ret", "validateDst", "encode", "decode", "convert", "evaluateRule", "systemData", "lookAroundValue", "inLookAround", "initializeInputChars", "sortAlpha", "sortHits", "sortIndex", "EmptyStat", "clear", "incStat", "displayRow", "displayOpsOnly", "displayRules", "i", "node", "parent", "record", "depth", "obj", "require_utils", "exports", "SiweErrorType", "require_crypto", "require_utils", "exports"]
}
